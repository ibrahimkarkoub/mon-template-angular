{"ast":null,"code":"import _get from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport * as i2 from '@angular/cdk/portal';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Optional, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, SkipSelf, Input, Output, ContentChild, ViewChild, Host, Attribute, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { ENTER, hasModifierKey, SPACE } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/collections';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\n\nvar _c0 = [\"body\"];\n\nfunction MatExpansionPanel_ng_template_5_Template(rf, ctx) {}\n\nvar _c1 = [[[\"mat-expansion-panel-header\"]], \"*\", [[\"mat-action-row\"]]];\nvar _c2 = [\"mat-expansion-panel-header\", \"*\", \"mat-action-row\"];\n\nfunction MatExpansionPanelHeader_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 2);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@indicatorRotate\", ctx_r0._getExpandedState());\n  }\n}\n\nvar _c3 = [[[\"mat-panel-title\"]], [[\"mat-panel-description\"]], \"*\"];\nvar _c4 = [\"mat-panel-title\", \"mat-panel-description\", \"*\"];\nvar MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\n\nvar EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\n\nvar matExpansionAnimations = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [state('collapsed, void', style({\n    transform: 'rotate(0deg)'\n  })), state('expanded', style({\n    transform: 'rotate(180deg)'\n  })), transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING))]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [state('collapsed, void', style({\n    height: '0px',\n    visibility: 'hidden'\n  })), state('expanded', style({\n    height: '*',\n    visibility: 'visible'\n  })), transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Token used to provide a `MatExpansionPanel` to `MatExpansionPanelContent`.\n * Used to avoid circular imports between `MatExpansionPanel` and `MatExpansionPanelContent`.\n */\n\nvar MAT_EXPANSION_PANEL = new InjectionToken('MAT_EXPANSION_PANEL');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n\nvar MatExpansionPanelContent = /*#__PURE__*/_createClass(function MatExpansionPanelContent(_template, _expansionPanel) {\n  _classCallCheck(this, MatExpansionPanelContent);\n\n  this._template = _template;\n  this._expansionPanel = _expansionPanel;\n});\n\nMatExpansionPanelContent.ɵfac = function MatExpansionPanelContent_Factory(t) {\n  return new (t || MatExpansionPanelContent)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL, 8));\n};\n\nMatExpansionPanelContent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatExpansionPanelContent,\n  selectors: [[\"ng-template\", \"matExpansionPanelContent\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatExpansionPanelContent, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[matExpansionPanelContent]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_EXPANSION_PANEL]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/** Counter for generating unique element ids. */\n\n\nvar uniqueId = 0;\n/**\n * Injection token that can be used to configure the default\n * options for the expansion panel component.\n */\n\nvar MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n\nvar MatExpansionPanel = /*#__PURE__*/function (_CdkAccordionItem) {\n  _inherits(MatExpansionPanel, _CdkAccordionItem);\n\n  var _super = _createSuper(MatExpansionPanel);\n\n  function MatExpansionPanel(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n    var _this;\n\n    _classCallCheck(this, MatExpansionPanel);\n\n    _this = _super.call(this, accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    _this._viewContainerRef = _viewContainerRef;\n    _this._animationMode = _animationMode;\n    _this._hideToggle = false;\n    /** An event emitted after the body's expansion animation happens. */\n\n    _this.afterExpand = new EventEmitter();\n    /** An event emitted after the body's collapse animation happens. */\n\n    _this.afterCollapse = new EventEmitter();\n    /** Stream that emits for changes in `@Input` properties. */\n\n    _this._inputChanges = new Subject();\n    /** ID for the associated header element. Used for a11y labelling. */\n\n    _this._headerId = \"mat-expansion-panel-header-\".concat(uniqueId++);\n    /** Stream of body animation done events. */\n\n    _this._bodyAnimationDone = new Subject();\n    _this.accordion = accordion;\n    _this._document = _document; // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n\n    _this._bodyAnimationDone.pipe(distinctUntilChanged(function (x, y) {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(function (event) {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          _this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          _this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      _this.hideToggle = defaultOptions.hideToggle;\n    }\n\n    return _this;\n  }\n  /** Whether the toggle indicator should be hidden. */\n\n\n  _createClass(MatExpansionPanel, [{\n    key: \"hideToggle\",\n    get: function get() {\n      return this._hideToggle || this.accordion && this.accordion.hideToggle;\n    },\n    set: function set(value) {\n      this._hideToggle = coerceBooleanProperty(value);\n    }\n    /** The position of the expansion indicator. */\n\n  }, {\n    key: \"togglePosition\",\n    get: function get() {\n      return this._togglePosition || this.accordion && this.accordion.togglePosition;\n    },\n    set: function set(value) {\n      this._togglePosition = value;\n    }\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n\n  }, {\n    key: \"_hasSpacing\",\n    value: function _hasSpacing() {\n      if (this.accordion) {\n        return this.expanded && this.accordion.displayMode === 'default';\n      }\n\n      return false;\n    }\n    /** Gets the expanded state string. */\n\n  }, {\n    key: \"_getExpandedState\",\n    value: function _getExpandedState() {\n      return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /** Toggles the expanded state of the expansion panel. */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.expanded = !this.expanded;\n    }\n    /** Sets the expanded state of the expansion panel to false. */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.expanded = false;\n    }\n    /** Sets the expanded state of the expansion panel to true. */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      this.expanded = true;\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this2 = this;\n\n      if (this._lazyContent && this._lazyContent._expansionPanel === this) {\n        // Render the content as soon as the panel becomes open.\n        this.opened.pipe(startWith(null), filter(function () {\n          return _this2.expanded && !_this2._portal;\n        }), take(1)).subscribe(function () {\n          _this2._portal = new TemplatePortal(_this2._lazyContent._template, _this2._viewContainerRef);\n        });\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this._inputChanges.next(changes);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      _get(_getPrototypeOf(MatExpansionPanel.prototype), \"ngOnDestroy\", this).call(this);\n\n      this._bodyAnimationDone.complete();\n\n      this._inputChanges.complete();\n    }\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\n\n  }, {\n    key: \"_containsFocus\",\n    value: function _containsFocus() {\n      if (this._body) {\n        var focusedElement = this._document.activeElement;\n        var bodyElement = this._body.nativeElement;\n        return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n      }\n\n      return false;\n    }\n  }]);\n\n  return MatExpansionPanel;\n}(CdkAccordionItem);\n\nMatExpansionPanel.ɵfac = function MatExpansionPanel_Factory(t) {\n  return new (t || MatExpansionPanel)(i0.ɵɵdirectiveInject(MAT_ACCORDION, 12), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.UniqueSelectionDispatcher), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), i0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8));\n};\n\nMatExpansionPanel.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatExpansionPanel,\n  selectors: [[\"mat-expansion-panel\"]],\n  contentQueries: function MatExpansionPanel_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatExpansionPanelContent, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._lazyContent = _t.first);\n    }\n  },\n  viewQuery: function MatExpansionPanel_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._body = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-expansion-panel\"],\n  hostVars: 6,\n  hostBindings: function MatExpansionPanel_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-expanded\", ctx.expanded)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-expansion-panel-spacing\", ctx._hasSpacing());\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    expanded: \"expanded\",\n    hideToggle: \"hideToggle\",\n    togglePosition: \"togglePosition\"\n  },\n  outputs: {\n    opened: \"opened\",\n    closed: \"closed\",\n    expandedChange: \"expandedChange\",\n    afterExpand: \"afterExpand\",\n    afterCollapse: \"afterCollapse\"\n  },\n  exportAs: [\"matExpansionPanel\"],\n  features: [i0.ɵɵProvidersFeature([// Provide MatAccordion as undefined to prevent nested expansion panels from registering\n  // to the same accordion.\n  {\n    provide: MAT_ACCORDION,\n    useValue: undefined\n  }, {\n    provide: MAT_EXPANSION_PANEL,\n    useExisting: MatExpansionPanel\n  }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c2,\n  decls: 7,\n  vars: 4,\n  consts: [[\"role\", \"region\", 1, \"mat-expansion-panel-content\", 3, \"id\"], [\"body\", \"\"], [1, \"mat-expansion-panel-body\"], [3, \"cdkPortalOutlet\"]],\n  template: function MatExpansionPanel_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c1);\n      i0.ɵɵprojection(0);\n      i0.ɵɵelementStart(1, \"div\", 0, 1);\n      i0.ɵɵlistener(\"@bodyExpansion.done\", function MatExpansionPanel_Template_div_animation_bodyExpansion_done_1_listener($event) {\n        return ctx._bodyAnimationDone.next($event);\n      });\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵprojection(4, 1);\n      i0.ɵɵtemplate(5, MatExpansionPanel_ng_template_5_Template, 0, 0, \"ng-template\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵprojection(6, 2);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"@bodyExpansion\", ctx._getExpandedState())(\"id\", ctx.id);\n      i0.ɵɵattribute(\"aria-labelledby\", ctx._headerId);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"cdkPortalOutlet\", ctx._portal);\n    }\n  },\n  dependencies: [i2.CdkPortalOutlet],\n  styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row .mat-button-base,.mat-action-row .mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row .mat-button-base,[dir=rtl] .mat-action-row .mat-mdc-button-base{margin-left:0;margin-right:8px}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matExpansionAnimations.bodyExpansion]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatExpansionPanel, [{\n    type: Component,\n    args: [{\n      selector: 'mat-expansion-panel',\n      exportAs: 'matExpansionPanel',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['disabled', 'expanded'],\n      outputs: ['opened', 'closed', 'expandedChange'],\n      animations: [matExpansionAnimations.bodyExpansion],\n      providers: [// Provide MatAccordion as undefined to prevent nested expansion panels from registering\n      // to the same accordion.\n      {\n        provide: MAT_ACCORDION,\n        useValue: undefined\n      }, {\n        provide: MAT_EXPANSION_PANEL,\n        useExisting: MatExpansionPanel\n      }],\n      host: {\n        'class': 'mat-expansion-panel',\n        '[class.mat-expanded]': 'expanded',\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n        '[class.mat-expansion-panel-spacing]': '_hasSpacing()'\n      },\n      template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\",\n      styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row .mat-button-base,.mat-action-row .mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row .mat-button-base,[dir=rtl] .mat-action-row .mat-mdc-button-base{margin-left:0;margin-right:8px}\"]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }, {\n        type: Inject,\n        args: [MAT_ACCORDION]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.UniqueSelectionDispatcher\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    hideToggle: [{\n      type: Input\n    }],\n    togglePosition: [{\n      type: Input\n    }],\n    afterExpand: [{\n      type: Output\n    }],\n    afterCollapse: [{\n      type: Output\n    }],\n    _lazyContent: [{\n      type: ContentChild,\n      args: [MatExpansionPanelContent]\n    }],\n    _body: [{\n      type: ViewChild,\n      args: ['body']\n    }]\n  });\n})();\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\n\n\nvar MatExpansionPanelActionRow = /*#__PURE__*/_createClass(function MatExpansionPanelActionRow() {\n  _classCallCheck(this, MatExpansionPanelActionRow);\n});\n\nMatExpansionPanelActionRow.ɵfac = function MatExpansionPanelActionRow_Factory(t) {\n  return new (t || MatExpansionPanelActionRow)();\n};\n\nMatExpansionPanelActionRow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatExpansionPanelActionRow,\n  selectors: [[\"mat-action-row\"]],\n  hostAttrs: [1, \"mat-action-row\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatExpansionPanelActionRow, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-action-row',\n      host: {\n        class: 'mat-action-row'\n      }\n    }]\n  }], null, null);\n})(); // Boilerplate for applying mixins to MatExpansionPanelHeader.\n\n/** @docs-private */\n\n\nvar MatExpansionPanelHeaderBase = /*#__PURE__*/_createClass(function MatExpansionPanelHeaderBase() {\n  _classCallCheck(this, MatExpansionPanelHeaderBase);\n});\n\nvar _MatExpansionPanelHeaderMixinBase = mixinTabIndex(MatExpansionPanelHeaderBase);\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\n\n\nvar MatExpansionPanelHeader = /*#__PURE__*/function (_MatExpansionPanelHea) {\n  _inherits(MatExpansionPanelHeader, _MatExpansionPanelHea);\n\n  var _super2 = _createSuper(MatExpansionPanelHeader);\n\n  function MatExpansionPanelHeader(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions, _animationMode, tabIndex) {\n    var _this3;\n\n    _classCallCheck(this, MatExpansionPanelHeader);\n\n    _this3 = _super2.call(this);\n    _this3.panel = panel;\n    _this3._element = _element;\n    _this3._focusMonitor = _focusMonitor;\n    _this3._changeDetectorRef = _changeDetectorRef;\n    _this3._animationMode = _animationMode;\n    _this3._parentChangeSubscription = Subscription.EMPTY;\n    var accordionHideToggleChange = panel.accordion ? panel.accordion._stateChanges.pipe(filter(function (changes) {\n      return !!(changes['hideToggle'] || changes['togglePosition']);\n    })) : EMPTY;\n    _this3.tabIndex = parseInt(tabIndex || '') || 0; // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n\n    _this3._parentChangeSubscription = merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(function (changes) {\n      return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n    }))).subscribe(function () {\n      return _this3._changeDetectorRef.markForCheck();\n    }); // Avoids focus being lost if the panel contained the focused element and was closed.\n\n    panel.closed.pipe(filter(function () {\n      return panel._containsFocus();\n    })).subscribe(function () {\n      return _focusMonitor.focusVia(_element, 'program');\n    });\n\n    if (defaultOptions) {\n      _this3.expandedHeight = defaultOptions.expandedHeight;\n      _this3.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n\n    return _this3;\n  }\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n\n\n  _createClass(MatExpansionPanelHeader, [{\n    key: \"disabled\",\n    get: function get() {\n      return this.panel.disabled;\n    }\n    /** Toggles the expanded state of the panel. */\n\n  }, {\n    key: \"_toggle\",\n    value: function _toggle() {\n      if (!this.disabled) {\n        this.panel.toggle();\n      }\n    }\n    /** Gets whether the panel is expanded. */\n\n  }, {\n    key: \"_isExpanded\",\n    value: function _isExpanded() {\n      return this.panel.expanded;\n    }\n    /** Gets the expanded state string of the panel. */\n\n  }, {\n    key: \"_getExpandedState\",\n    value: function _getExpandedState() {\n      return this.panel._getExpandedState();\n    }\n    /** Gets the panel id. */\n\n  }, {\n    key: \"_getPanelId\",\n    value: function _getPanelId() {\n      return this.panel.id;\n    }\n    /** Gets the toggle position for the header. */\n\n  }, {\n    key: \"_getTogglePosition\",\n    value: function _getTogglePosition() {\n      return this.panel.togglePosition;\n    }\n    /** Gets whether the expand indicator should be shown. */\n\n  }, {\n    key: \"_showToggle\",\n    value: function _showToggle() {\n      return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Gets the current height of the header. Null if no custom height has been\n     * specified, and if the default height from the stylesheet should be used.\n     */\n\n  }, {\n    key: \"_getHeaderHeight\",\n    value: function _getHeaderHeight() {\n      var isExpanded = this._isExpanded();\n\n      if (isExpanded && this.expandedHeight) {\n        return this.expandedHeight;\n      } else if (!isExpanded && this.collapsedHeight) {\n        return this.collapsedHeight;\n      }\n\n      return null;\n    }\n    /** Handle keydown event calling to toggle() if appropriate. */\n\n  }, {\n    key: \"_keydown\",\n    value: function _keydown(event) {\n      switch (event.keyCode) {\n        // Toggle for space and enter keys.\n        case SPACE:\n        case ENTER:\n          if (!hasModifierKey(event)) {\n            event.preventDefault();\n\n            this._toggle();\n          }\n\n          break;\n\n        default:\n          if (this.panel.accordion) {\n            this.panel.accordion._handleHeaderKeydown(event);\n          }\n\n          return;\n      }\n    }\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * @param origin Origin of the action that triggered the focus.\n     * @docs-private\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus(origin, options) {\n      if (origin) {\n        this._focusMonitor.focusVia(this._element, origin, options);\n      } else {\n        this._element.nativeElement.focus(options);\n      }\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this4 = this;\n\n      this._focusMonitor.monitor(this._element).subscribe(function (origin) {\n        if (origin && _this4.panel.accordion) {\n          _this4.panel.accordion._handleHeaderFocus(_this4);\n        }\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._parentChangeSubscription.unsubscribe();\n\n      this._focusMonitor.stopMonitoring(this._element);\n    }\n  }]);\n\n  return MatExpansionPanelHeader;\n}(_MatExpansionPanelHeaderMixinBase);\n\nMatExpansionPanelHeader.ɵfac = function MatExpansionPanelHeader_Factory(t) {\n  return new (t || MatExpansionPanelHeader)(i0.ɵɵdirectiveInject(MatExpansionPanel, 1), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2$1.FocusMonitor), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), i0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatExpansionPanelHeader.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatExpansionPanelHeader,\n  selectors: [[\"mat-expansion-panel-header\"]],\n  hostAttrs: [\"role\", \"button\", 1, \"mat-expansion-panel-header\", \"mat-focus-indicator\"],\n  hostVars: 15,\n  hostBindings: function MatExpansionPanelHeader_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MatExpansionPanelHeader_click_HostBindingHandler() {\n        return ctx._toggle();\n      })(\"keydown\", function MatExpansionPanelHeader_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"id\", ctx.panel._headerId)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx._getPanelId())(\"aria-expanded\", ctx._isExpanded())(\"aria-disabled\", ctx.panel.disabled);\n      i0.ɵɵstyleProp(\"height\", ctx._getHeaderHeight());\n      i0.ɵɵclassProp(\"mat-expanded\", ctx._isExpanded())(\"mat-expansion-toggle-indicator-after\", ctx._getTogglePosition() === \"after\")(\"mat-expansion-toggle-indicator-before\", ctx._getTogglePosition() === \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    tabIndex: \"tabIndex\",\n    expandedHeight: \"expandedHeight\",\n    collapsedHeight: \"collapsedHeight\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c4,\n  decls: 5,\n  vars: 3,\n  consts: [[1, \"mat-content\"], [\"class\", \"mat-expansion-indicator\", 4, \"ngIf\"], [1, \"mat-expansion-indicator\"]],\n  template: function MatExpansionPanelHeader_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c3);\n      i0.ɵɵelementStart(0, \"span\", 0);\n      i0.ɵɵprojection(1);\n      i0.ɵɵprojection(2, 1);\n      i0.ɵɵprojection(3, 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, MatExpansionPanelHeader_span_4_Template, 1, 1, \"span\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-content-hide-toggle\", !ctx._showToggle());\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx._showToggle());\n    }\n  },\n  dependencies: [i3.NgIf],\n  styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-content.mat-content-hide-toggle{margin-right:8px}[dir=rtl] .mat-content.mat-content-hide-toggle{margin-right:0;margin-left:8px}.mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-left:24px;margin-right:0}[dir=rtl] .mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-right:24px;margin-left:0}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;flex-basis:0;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matExpansionAnimations.indicatorRotate]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatExpansionPanelHeader, [{\n    type: Component,\n    args: [{\n      selector: 'mat-expansion-panel-header',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['tabIndex'],\n      animations: [matExpansionAnimations.indicatorRotate],\n      host: {\n        'class': 'mat-expansion-panel-header mat-focus-indicator',\n        'role': 'button',\n        '[attr.id]': 'panel._headerId',\n        '[attr.tabindex]': 'tabIndex',\n        '[attr.aria-controls]': '_getPanelId()',\n        '[attr.aria-expanded]': '_isExpanded()',\n        '[attr.aria-disabled]': 'panel.disabled',\n        '[class.mat-expanded]': '_isExpanded()',\n        '[class.mat-expansion-toggle-indicator-after]': \"_getTogglePosition() === 'after'\",\n        '[class.mat-expansion-toggle-indicator-before]': \"_getTogglePosition() === 'before'\",\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n        '[style.height]': '_getHeaderHeight()',\n        '(click)': '_toggle()',\n        '(keydown)': '_keydown($event)'\n      },\n      template: \"<span class=\\\"mat-content\\\" [class.mat-content-hide-toggle]=\\\"!_showToggle()\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\",\n      styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-content.mat-content-hide-toggle{margin-right:8px}[dir=rtl] .mat-content.mat-content-hide-toggle{margin-right:0;margin-left:8px}.mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-left:24px;margin-right:0}[dir=rtl] .mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-right:24px;margin-left:0}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;flex-basis:0;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\"]\n    }]\n  }], function () {\n    return [{\n      type: MatExpansionPanel,\n      decorators: [{\n        type: Host\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i2$1.FocusMonitor\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    expandedHeight: [{\n      type: Input\n    }],\n    collapsedHeight: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\n\n\nvar MatExpansionPanelDescription = /*#__PURE__*/_createClass(function MatExpansionPanelDescription() {\n  _classCallCheck(this, MatExpansionPanelDescription);\n});\n\nMatExpansionPanelDescription.ɵfac = function MatExpansionPanelDescription_Factory(t) {\n  return new (t || MatExpansionPanelDescription)();\n};\n\nMatExpansionPanelDescription.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatExpansionPanelDescription,\n  selectors: [[\"mat-panel-description\"]],\n  hostAttrs: [1, \"mat-expansion-panel-header-description\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatExpansionPanelDescription, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-panel-description',\n      host: {\n        class: 'mat-expansion-panel-header-description'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\n\n\nvar MatExpansionPanelTitle = /*#__PURE__*/_createClass(function MatExpansionPanelTitle() {\n  _classCallCheck(this, MatExpansionPanelTitle);\n});\n\nMatExpansionPanelTitle.ɵfac = function MatExpansionPanelTitle_Factory(t) {\n  return new (t || MatExpansionPanelTitle)();\n};\n\nMatExpansionPanelTitle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatExpansionPanelTitle,\n  selectors: [[\"mat-panel-title\"]],\n  hostAttrs: [1, \"mat-expansion-panel-header-title\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatExpansionPanelTitle, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-panel-title',\n      host: {\n        class: 'mat-expansion-panel-header-title'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Directive for a Material Design Accordion.\n */\n\n\nvar MatAccordion = /*#__PURE__*/function (_CdkAccordion) {\n  _inherits(MatAccordion, _CdkAccordion);\n\n  var _super3 = _createSuper(MatAccordion);\n\n  function MatAccordion() {\n    var _this5;\n\n    _classCallCheck(this, MatAccordion);\n\n    _this5 = _super3.apply(this, arguments);\n    /** Headers belonging to this accordion. */\n\n    _this5._ownHeaders = new QueryList();\n    _this5._hideToggle = false;\n    /**\n     * Display mode used for all expansion panels in the accordion. Currently two display\n     * modes exist:\n     *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n     *     panel at a different elevation from the rest of the accordion.\n     *  flat - no spacing is placed around expanded panels, showing all panels at the same\n     *     elevation.\n     */\n\n    _this5.displayMode = 'default';\n    /** The position of the expansion indicator. */\n\n    _this5.togglePosition = 'after';\n    return _this5;\n  }\n  /** Whether the expansion indicator should be hidden. */\n\n\n  _createClass(MatAccordion, [{\n    key: \"hideToggle\",\n    get: function get() {\n      return this._hideToggle;\n    },\n    set: function set(show) {\n      this._hideToggle = coerceBooleanProperty(show);\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this6 = this;\n\n      this._headers.changes.pipe(startWith(this._headers)).subscribe(function (headers) {\n        _this6._ownHeaders.reset(headers.filter(function (header) {\n          return header.panel.accordion === _this6;\n        }));\n\n        _this6._ownHeaders.notifyOnChanges();\n      });\n\n      this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n    }\n    /** Handles keyboard events coming in from the panel headers. */\n\n  }, {\n    key: \"_handleHeaderKeydown\",\n    value: function _handleHeaderKeydown(event) {\n      this._keyManager.onKeydown(event);\n    }\n  }, {\n    key: \"_handleHeaderFocus\",\n    value: function _handleHeaderFocus(header) {\n      this._keyManager.updateActiveItem(header);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      _get(_getPrototypeOf(MatAccordion.prototype), \"ngOnDestroy\", this).call(this);\n\n      this._ownHeaders.destroy();\n    }\n  }]);\n\n  return MatAccordion;\n}(CdkAccordion);\n\nMatAccordion.ɵfac = /* @__PURE__ */function () {\n  var ɵMatAccordion_BaseFactory;\n  return function MatAccordion_Factory(t) {\n    return (ɵMatAccordion_BaseFactory || (ɵMatAccordion_BaseFactory = i0.ɵɵgetInheritedFactory(MatAccordion)))(t || MatAccordion);\n  };\n}();\n\nMatAccordion.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatAccordion,\n  selectors: [[\"mat-accordion\"]],\n  contentQueries: function MatAccordion_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatExpansionPanelHeader, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._headers = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-accordion\"],\n  hostVars: 2,\n  hostBindings: function MatAccordion_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-accordion-multi\", ctx.multi);\n    }\n  },\n  inputs: {\n    multi: \"multi\",\n    hideToggle: \"hideToggle\",\n    displayMode: \"displayMode\",\n    togglePosition: \"togglePosition\"\n  },\n  exportAs: [\"matAccordion\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAccordion, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-accordion',\n      exportAs: 'matAccordion',\n      inputs: ['multi'],\n      providers: [{\n        provide: MAT_ACCORDION,\n        useExisting: MatAccordion\n      }],\n      host: {\n        class: 'mat-accordion',\n        // Class binding which is only used by the test harness as there is no other\n        // way for the harness to detect if multiple panel support is enabled.\n        '[class.mat-accordion-multi]': 'this.multi'\n      }\n    }]\n  }], null, {\n    _headers: [{\n      type: ContentChildren,\n      args: [MatExpansionPanelHeader, {\n        descendants: true\n      }]\n    }],\n    hideToggle: [{\n      type: Input\n    }],\n    displayMode: [{\n      type: Input\n    }],\n    togglePosition: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatExpansionModule = /*#__PURE__*/_createClass(function MatExpansionModule() {\n  _classCallCheck(this, MatExpansionModule);\n});\n\nMatExpansionModule.ɵfac = function MatExpansionModule_Factory(t) {\n  return new (t || MatExpansionModule)();\n};\n\nMatExpansionModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatExpansionModule\n});\nMatExpansionModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatExpansionModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule],\n      exports: [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent],\n      declarations: [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations };","map":{"version":3,"names":["CdkAccordionItem","CdkAccordion","CdkAccordionModule","i2","TemplatePortal","PortalModule","i3","DOCUMENT","CommonModule","i0","InjectionToken","Directive","Inject","Optional","EventEmitter","Component","ViewEncapsulation","ChangeDetectionStrategy","SkipSelf","Input","Output","ContentChild","ViewChild","Host","Attribute","QueryList","ContentChildren","NgModule","mixinTabIndex","MatCommonModule","coerceBooleanProperty","i2$1","FocusKeyManager","distinctUntilChanged","startWith","filter","take","ENTER","hasModifierKey","SPACE","ANIMATION_MODULE_TYPE","Subject","Subscription","EMPTY","merge","trigger","state","style","transition","animate","i1","MAT_ACCORDION","EXPANSION_PANEL_ANIMATION_TIMING","matExpansionAnimations","indicatorRotate","transform","bodyExpansion","height","visibility","MAT_EXPANSION_PANEL","MatExpansionPanelContent","_template","_expansionPanel","ɵfac","TemplateRef","ɵdir","type","args","selector","undefined","decorators","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanel","accordion","_changeDetectorRef","_uniqueSelectionDispatcher","_viewContainerRef","_document","_animationMode","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","pipe","x","y","fromState","toState","subscribe","event","emit","hideToggle","value","_togglePosition","togglePosition","expanded","displayMode","_lazyContent","opened","_portal","changes","next","complete","_body","focusedElement","activeElement","bodyElement","nativeElement","contains","ChangeDetectorRef","UniqueSelectionDispatcher","ViewContainerRef","ɵcmp","provide","useValue","useExisting","CdkPortalOutlet","exportAs","encapsulation","None","changeDetection","OnPush","inputs","outputs","animations","providers","host","template","styles","MatExpansionPanelActionRow","class","MatExpansionPanelHeaderBase","_MatExpansionPanelHeaderMixinBase","MatExpansionPanelHeader","panel","_element","_focusMonitor","tabIndex","_parentChangeSubscription","accordionHideToggleChange","_stateChanges","parseInt","closed","markForCheck","_containsFocus","focusVia","expandedHeight","collapsedHeight","disabled","toggle","_getExpandedState","id","isExpanded","_isExpanded","keyCode","preventDefault","_toggle","_handleHeaderKeydown","origin","options","focus","monitor","_handleHeaderFocus","unsubscribe","stopMonitoring","ElementRef","FocusMonitor","NgIf","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","arguments","_ownHeaders","show","_headers","headers","reset","header","notifyOnChanges","_keyManager","withWrap","withHomeAndEnd","onKeydown","updateActiveItem","destroy","descendants","MatExpansionModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@angular/material/fesm2015/expansion.mjs"],"sourcesContent":["import { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport * as i2 from '@angular/cdk/portal';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Optional, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, SkipSelf, Input, Output, ContentChild, ViewChild, Host, Attribute, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { ENTER, hasModifierKey, SPACE } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nconst matExpansionAnimations = {\n    /** Animation that rotates the indicator arrow. */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /** Animation that expands and collapses the panel content. */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\n        state('expanded', style({ height: '*', visibility: 'visible' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token used to provide a `MatExpansionPanel` to `MatExpansionPanelContent`.\n * Used to avoid circular imports between `MatExpansionPanel` and `MatExpansionPanelContent`.\n */\nconst MAT_EXPANSION_PANEL = new InjectionToken('MAT_EXPANSION_PANEL');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nclass MatExpansionPanelContent {\n    constructor(_template, _expansionPanel) {\n        this._template = _template;\n        this._expansionPanel = _expansionPanel;\n    }\n}\nMatExpansionPanelContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatExpansionPanelContent, deps: [{ token: i0.TemplateRef }, { token: MAT_EXPANSION_PANEL, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatExpansionPanelContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatExpansionPanelContent, selector: \"ng-template[matExpansionPanelContent]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatExpansionPanelContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matExpansionPanelContent]',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.TemplateRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_EXPANSION_PANEL]\n                    }, {\n                        type: Optional\n                    }] }];\n    } });\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n/**\n * Injection token that can be used to configure the default\n * options for the expansion panel component.\n */\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nclass MatExpansionPanel extends CdkAccordionItem {\n    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n        this._viewContainerRef = _viewContainerRef;\n        this._animationMode = _animationMode;\n        this._hideToggle = false;\n        /** An event emitted after the body's expansion animation happens. */\n        this.afterExpand = new EventEmitter();\n        /** An event emitted after the body's collapse animation happens. */\n        this.afterCollapse = new EventEmitter();\n        /** Stream that emits for changes in `@Input` properties. */\n        this._inputChanges = new Subject();\n        /** ID for the associated header element. Used for a11y labelling. */\n        this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n        /** Stream of body animation done events. */\n        this._bodyAnimationDone = new Subject();\n        this.accordion = accordion;\n        this._document = _document;\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._bodyAnimationDone\n            .pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))\n            .subscribe(event => {\n            if (event.fromState !== 'void') {\n                if (event.toState === 'expanded') {\n                    this.afterExpand.emit();\n                }\n                else if (event.toState === 'collapsed') {\n                    this.afterCollapse.emit();\n                }\n            }\n        });\n        if (defaultOptions) {\n            this.hideToggle = defaultOptions.hideToggle;\n        }\n    }\n    /** Whether the toggle indicator should be hidden. */\n    get hideToggle() {\n        return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n    }\n    set hideToggle(value) {\n        this._hideToggle = coerceBooleanProperty(value);\n    }\n    /** The position of the expansion indicator. */\n    get togglePosition() {\n        return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n    }\n    set togglePosition(value) {\n        this._togglePosition = value;\n    }\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    _hasSpacing() {\n        if (this.accordion) {\n            return this.expanded && this.accordion.displayMode === 'default';\n        }\n        return false;\n    }\n    /** Gets the expanded state string. */\n    _getExpandedState() {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /** Toggles the expanded state of the expansion panel. */\n    toggle() {\n        this.expanded = !this.expanded;\n    }\n    /** Sets the expanded state of the expansion panel to false. */\n    close() {\n        this.expanded = false;\n    }\n    /** Sets the expanded state of the expansion panel to true. */\n    open() {\n        this.expanded = true;\n    }\n    ngAfterContentInit() {\n        if (this._lazyContent && this._lazyContent._expansionPanel === this) {\n            // Render the content as soon as the panel becomes open.\n            this.opened\n                .pipe(startWith(null), filter(() => this.expanded && !this._portal), take(1))\n                .subscribe(() => {\n                this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n            });\n        }\n    }\n    ngOnChanges(changes) {\n        this._inputChanges.next(changes);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._bodyAnimationDone.complete();\n        this._inputChanges.complete();\n    }\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\n    _containsFocus() {\n        if (this._body) {\n            const focusedElement = this._document.activeElement;\n            const bodyElement = this._body.nativeElement;\n            return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n        }\n        return false;\n    }\n}\nMatExpansionPanel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatExpansionPanel, deps: [{ token: MAT_ACCORDION, optional: true, skipSelf: true }, { token: i0.ChangeDetectorRef }, { token: i1.UniqueSelectionDispatcher }, { token: i0.ViewContainerRef }, { token: DOCUMENT }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatExpansionPanel.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatExpansionPanel, selector: \"mat-expansion-panel\", inputs: { disabled: \"disabled\", expanded: \"expanded\", hideToggle: \"hideToggle\", togglePosition: \"togglePosition\" }, outputs: { opened: \"opened\", closed: \"closed\", expandedChange: \"expandedChange\", afterExpand: \"afterExpand\", afterCollapse: \"afterCollapse\" }, host: { properties: { \"class.mat-expanded\": \"expanded\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\", \"class.mat-expansion-panel-spacing\": \"_hasSpacing()\" }, classAttribute: \"mat-expansion-panel\" }, providers: [\n        // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n        // to the same accordion.\n        { provide: MAT_ACCORDION, useValue: undefined },\n        { provide: MAT_EXPANSION_PANEL, useExisting: MatExpansionPanel },\n    ], queries: [{ propertyName: \"_lazyContent\", first: true, predicate: MatExpansionPanelContent, descendants: true }], viewQueries: [{ propertyName: \"_body\", first: true, predicate: [\"body\"], descendants: true }], exportAs: [\"matExpansionPanel\"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\", styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row .mat-button-base,.mat-action-row .mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row .mat-button-base,[dir=rtl] .mat-action-row .mat-mdc-button-base{margin-left:0;margin-right:8px}\"], dependencies: [{ kind: \"directive\", type: i2.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matExpansionAnimations.bodyExpansion], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatExpansionPanel, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-expansion-panel', exportAs: 'matExpansionPanel', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['disabled', 'expanded'], outputs: ['opened', 'closed', 'expandedChange'], animations: [matExpansionAnimations.bodyExpansion], providers: [\n                        // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                        // to the same accordion.\n                        { provide: MAT_ACCORDION, useValue: undefined },\n                        { provide: MAT_EXPANSION_PANEL, useExisting: MatExpansionPanel },\n                    ], host: {\n                        'class': 'mat-expansion-panel',\n                        '[class.mat-expanded]': 'expanded',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n                    }, template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\", styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row .mat-button-base,.mat-action-row .mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row .mat-button-base,[dir=rtl] .mat-action-row .mat-mdc-button-base{margin-left:0;margin-right:8px}\"] }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }, {\n                        type: Inject,\n                        args: [MAT_ACCORDION]\n                    }] }, { type: i0.ChangeDetectorRef }, { type: i1.UniqueSelectionDispatcher }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n                    }, {\n                        type: Optional\n                    }] }];\n    }, propDecorators: { hideToggle: [{\n                type: Input\n            }], togglePosition: [{\n                type: Input\n            }], afterExpand: [{\n                type: Output\n            }], afterCollapse: [{\n                type: Output\n            }], _lazyContent: [{\n                type: ContentChild,\n                args: [MatExpansionPanelContent]\n            }], _body: [{\n                type: ViewChild,\n                args: ['body']\n            }] } });\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelActionRow {\n}\nMatExpansionPanelActionRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatExpansionPanelActionRow, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatExpansionPanelActionRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatExpansionPanelActionRow, selector: \"mat-action-row\", host: { classAttribute: \"mat-action-row\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatExpansionPanelActionRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-action-row',\n                    host: {\n                        class: 'mat-action-row',\n                    },\n                }]\n        }] });\n\n// Boilerplate for applying mixins to MatExpansionPanelHeader.\n/** @docs-private */\nclass MatExpansionPanelHeaderBase {\n}\nconst _MatExpansionPanelHeaderMixinBase = mixinTabIndex(MatExpansionPanelHeaderBase);\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelHeader extends _MatExpansionPanelHeaderMixinBase {\n    constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions, _animationMode, tabIndex) {\n        super();\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        this._parentChangeSubscription = Subscription.EMPTY;\n        const accordionHideToggleChange = panel.accordion\n            ? panel.accordion._stateChanges.pipe(filter(changes => !!(changes['hideToggle'] || changes['togglePosition'])))\n            : EMPTY;\n        this.tabIndex = parseInt(tabIndex || '') || 0;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to subscribe and trigger change detection manually.\n        this._parentChangeSubscription = merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(changes => {\n            return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n        }))).subscribe(() => this._changeDetectorRef.markForCheck());\n        // Avoids focus being lost if the panel contained the focused element and was closed.\n        panel.closed\n            .pipe(filter(() => panel._containsFocus()))\n            .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n        if (defaultOptions) {\n            this.expandedHeight = defaultOptions.expandedHeight;\n            this.collapsedHeight = defaultOptions.collapsedHeight;\n        }\n    }\n    /**\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n     * @docs-private\n     */\n    get disabled() {\n        return this.panel.disabled;\n    }\n    /** Toggles the expanded state of the panel. */\n    _toggle() {\n        if (!this.disabled) {\n            this.panel.toggle();\n        }\n    }\n    /** Gets whether the panel is expanded. */\n    _isExpanded() {\n        return this.panel.expanded;\n    }\n    /** Gets the expanded state string of the panel. */\n    _getExpandedState() {\n        return this.panel._getExpandedState();\n    }\n    /** Gets the panel id. */\n    _getPanelId() {\n        return this.panel.id;\n    }\n    /** Gets the toggle position for the header. */\n    _getTogglePosition() {\n        return this.panel.togglePosition;\n    }\n    /** Gets whether the expand indicator should be shown. */\n    _showToggle() {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Gets the current height of the header. Null if no custom height has been\n     * specified, and if the default height from the stylesheet should be used.\n     */\n    _getHeaderHeight() {\n        const isExpanded = this._isExpanded();\n        if (isExpanded && this.expandedHeight) {\n            return this.expandedHeight;\n        }\n        else if (!isExpanded && this.collapsedHeight) {\n            return this.collapsedHeight;\n        }\n        return null;\n    }\n    /** Handle keydown event calling to toggle() if appropriate. */\n    _keydown(event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this._toggle();\n                }\n                break;\n            default:\n                if (this.panel.accordion) {\n                    this.panel.accordion._handleHeaderKeydown(event);\n                }\n                return;\n        }\n    }\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * @param origin Origin of the action that triggered the focus.\n     * @docs-private\n     */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._element).subscribe(origin => {\n            if (origin && this.panel.accordion) {\n                this.panel.accordion._handleHeaderFocus(this);\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element);\n    }\n}\nMatExpansionPanelHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatExpansionPanelHeader, deps: [{ token: MatExpansionPanel, host: true }, { token: i0.ElementRef }, { token: i2$1.FocusMonitor }, { token: i0.ChangeDetectorRef }, { token: MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component });\nMatExpansionPanelHeader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatExpansionPanelHeader, selector: \"mat-expansion-panel-header\", inputs: { tabIndex: \"tabIndex\", expandedHeight: \"expandedHeight\", collapsedHeight: \"collapsedHeight\" }, host: { attributes: { \"role\": \"button\" }, listeners: { \"click\": \"_toggle()\", \"keydown\": \"_keydown($event)\" }, properties: { \"attr.id\": \"panel._headerId\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"_getPanelId()\", \"attr.aria-expanded\": \"_isExpanded()\", \"attr.aria-disabled\": \"panel.disabled\", \"class.mat-expanded\": \"_isExpanded()\", \"class.mat-expansion-toggle-indicator-after\": \"_getTogglePosition() === 'after'\", \"class.mat-expansion-toggle-indicator-before\": \"_getTogglePosition() === 'before'\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\", \"style.height\": \"_getHeaderHeight()\" }, classAttribute: \"mat-expansion-panel-header mat-focus-indicator\" }, usesInheritance: true, ngImport: i0, template: \"<span class=\\\"mat-content\\\" [class.mat-content-hide-toggle]=\\\"!_showToggle()\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\", styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-content.mat-content-hide-toggle{margin-right:8px}[dir=rtl] .mat-content.mat-content-hide-toggle{margin-right:0;margin-left:8px}.mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-left:24px;margin-right:0}[dir=rtl] .mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-right:24px;margin-left:0}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;flex-basis:0;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [matExpansionAnimations.indicatorRotate], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatExpansionPanelHeader, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-expansion-panel-header', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['tabIndex'], animations: [matExpansionAnimations.indicatorRotate], host: {\n                        'class': 'mat-expansion-panel-header mat-focus-indicator',\n                        'role': 'button',\n                        '[attr.id]': 'panel._headerId',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': '_getPanelId()',\n                        '[attr.aria-expanded]': '_isExpanded()',\n                        '[attr.aria-disabled]': 'panel.disabled',\n                        '[class.mat-expanded]': '_isExpanded()',\n                        '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n                        '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        '[style.height]': '_getHeaderHeight()',\n                        '(click)': '_toggle()',\n                        '(keydown)': '_keydown($event)',\n                    }, template: \"<span class=\\\"mat-content\\\" [class.mat-content-hide-toggle]=\\\"!_showToggle()\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\", styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-content.mat-content-hide-toggle{margin-right:8px}[dir=rtl] .mat-content.mat-content-hide-toggle{margin-right:0;margin-left:8px}.mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-left:24px;margin-right:0}[dir=rtl] .mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-right:24px;margin-left:0}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;flex-basis:0;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\"] }]\n        }], ctorParameters: function () {\n        return [{ type: MatExpansionPanel, decorators: [{\n                        type: Host\n                    }] }, { type: i0.ElementRef }, { type: i2$1.FocusMonitor }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n                    }, {\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }];\n    }, propDecorators: { expandedHeight: [{\n                type: Input\n            }], collapsedHeight: [{\n                type: Input\n            }] } });\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelDescription {\n}\nMatExpansionPanelDescription.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatExpansionPanelDescription, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatExpansionPanelDescription.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatExpansionPanelDescription, selector: \"mat-panel-description\", host: { classAttribute: \"mat-expansion-panel-header-description\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatExpansionPanelDescription, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-panel-description',\n                    host: {\n                        class: 'mat-expansion-panel-header-description',\n                    },\n                }]\n        }] });\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelTitle {\n}\nMatExpansionPanelTitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatExpansionPanelTitle, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatExpansionPanelTitle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatExpansionPanelTitle, selector: \"mat-panel-title\", host: { classAttribute: \"mat-expansion-panel-header-title\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatExpansionPanelTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-panel-title',\n                    host: {\n                        class: 'mat-expansion-panel-header-title',\n                    },\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive for a Material Design Accordion.\n */\nclass MatAccordion extends CdkAccordion {\n    constructor() {\n        super(...arguments);\n        /** Headers belonging to this accordion. */\n        this._ownHeaders = new QueryList();\n        this._hideToggle = false;\n        /**\n         * Display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the rest of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        this.displayMode = 'default';\n        /** The position of the expansion indicator. */\n        this.togglePosition = 'after';\n    }\n    /** Whether the expansion indicator should be hidden. */\n    get hideToggle() {\n        return this._hideToggle;\n    }\n    set hideToggle(show) {\n        this._hideToggle = coerceBooleanProperty(show);\n    }\n    ngAfterContentInit() {\n        this._headers.changes\n            .pipe(startWith(this._headers))\n            .subscribe((headers) => {\n            this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n            this._ownHeaders.notifyOnChanges();\n        });\n        this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n    }\n    /** Handles keyboard events coming in from the panel headers. */\n    _handleHeaderKeydown(event) {\n        this._keyManager.onKeydown(event);\n    }\n    _handleHeaderFocus(header) {\n        this._keyManager.updateActiveItem(header);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._ownHeaders.destroy();\n    }\n}\nMatAccordion.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatAccordion, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatAccordion.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatAccordion, selector: \"mat-accordion\", inputs: { multi: \"multi\", hideToggle: \"hideToggle\", displayMode: \"displayMode\", togglePosition: \"togglePosition\" }, host: { properties: { \"class.mat-accordion-multi\": \"this.multi\" }, classAttribute: \"mat-accordion\" }, providers: [\n        {\n            provide: MAT_ACCORDION,\n            useExisting: MatAccordion,\n        },\n    ], queries: [{ propertyName: \"_headers\", predicate: MatExpansionPanelHeader, descendants: true }], exportAs: [\"matAccordion\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatAccordion, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-accordion',\n                    exportAs: 'matAccordion',\n                    inputs: ['multi'],\n                    providers: [\n                        {\n                            provide: MAT_ACCORDION,\n                            useExisting: MatAccordion,\n                        },\n                    ],\n                    host: {\n                        class: 'mat-accordion',\n                        // Class binding which is only used by the test harness as there is no other\n                        // way for the harness to detect if multiple panel support is enabled.\n                        '[class.mat-accordion-multi]': 'this.multi',\n                    },\n                }]\n        }], propDecorators: { _headers: [{\n                type: ContentChildren,\n                args: [MatExpansionPanelHeader, { descendants: true }]\n            }], hideToggle: [{\n                type: Input\n            }], displayMode: [{\n                type: Input\n            }], togglePosition: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatExpansionModule {\n}\nMatExpansionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatExpansionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatExpansionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatExpansionModule, declarations: [MatAccordion,\n        MatExpansionPanel,\n        MatExpansionPanelActionRow,\n        MatExpansionPanelHeader,\n        MatExpansionPanelTitle,\n        MatExpansionPanelDescription,\n        MatExpansionPanelContent], imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule], exports: [MatAccordion,\n        MatExpansionPanel,\n        MatExpansionPanelActionRow,\n        MatExpansionPanelHeader,\n        MatExpansionPanelTitle,\n        MatExpansionPanelDescription,\n        MatExpansionPanelContent] });\nMatExpansionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatExpansionModule, imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatExpansionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule],\n                    exports: [\n                        MatAccordion,\n                        MatExpansionPanel,\n                        MatExpansionPanelActionRow,\n                        MatExpansionPanelHeader,\n                        MatExpansionPanelTitle,\n                        MatExpansionPanelDescription,\n                        MatExpansionPanelContent,\n                    ],\n                    declarations: [\n                        MatAccordion,\n                        MatExpansionPanel,\n                        MatExpansionPanelActionRow,\n                        MatExpansionPanelHeader,\n                        MatExpansionPanelTitle,\n                        MatExpansionPanelDescription,\n                        MatExpansionPanelContent,\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _assertThisInitialized from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as i1 from '@angular/cdk/a11y';\nimport { FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Input, QueryList, EventEmitter, TemplateRef, ContentChildren, ViewChild, ContentChild, Output, Self, NgModule } from '@angular/core';\nimport { Subject, Subscription, merge, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, takeUntil, filter, delay } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i3 from '@angular/material/core';\nimport { mixinDisableRipple, mixinDisabled, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport * as i3$1 from '@angular/cdk/bidi';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\n\nvar _c0 = [\"mat-menu-item\", \"\"];\n\nfunction MatMenuItem__svg_svg_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 2);\n    i0.ɵɵelement(1, \"polygon\", 3);\n    i0.ɵɵelementEnd();\n  }\n}\n\nvar _c1 = [\"*\"];\n\nfunction MatMenu_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 0);\n    i0.ɵɵlistener(\"keydown\", function MatMenu_ng_template_0_Template_div_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      var ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._handleKeydown($event));\n    })(\"click\", function MatMenu_ng_template_0_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      var ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.closed.emit(\"click\"));\n    })(\"@transformMenu.start\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      var ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4._onAnimationStart($event));\n    })(\"@transformMenu.done\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      var ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5._onAnimationDone($event));\n    });\n    i0.ɵɵelementStart(1, \"div\", 1);\n    i0.ɵɵprojection(2);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"id\", ctx_r0.panelId)(\"ngClass\", ctx_r0._classList)(\"@transformMenu\", ctx_r0._panelAnimationState);\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0.ariaLabelledby || null)(\"aria-describedby\", ctx_r0.ariaDescribedby || null);\n  }\n}\n\nvar matMenuAnimations = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [state('void', style({\n    opacity: 0,\n    transform: 'scale(0.8)'\n  })), transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 1,\n    transform: 'scale(1)'\n  }))), transition('* => void', animate('100ms 25ms linear', style({\n    opacity: 0\n  })))]),\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [// TODO(crisbeto): this is inside the `transformMenu`\n  // now. Remove next time we do breaking changes.\n  state('showing', style({\n    opacity: 1\n  })), transition('void => *', [style({\n    opacity: 0\n  }), animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\n\nvar fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\n\nvar transformMenu = matMenuAnimations.transformMenu;\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nvar MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\n\nvar _MatMenuContentBase = /*#__PURE__*/function () {\n  function _MatMenuContentBase(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n    _classCallCheck(this, _MatMenuContentBase);\n\n    this._template = _template;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n    this._injector = _injector;\n    this._viewContainerRef = _viewContainerRef;\n    this._document = _document;\n    this._changeDetectorRef = _changeDetectorRef;\n    /** Emits when the menu content has been attached. */\n\n    this._attached = new Subject();\n  }\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n\n\n  _createClass(_MatMenuContentBase, [{\n    key: \"attach\",\n    value: function attach() {\n      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _a;\n\n      if (!this._portal) {\n        this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n      }\n\n      this.detach();\n\n      if (!this._outlet) {\n        this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n      }\n\n      var element = this._template.elementRef.nativeElement; // Because we support opening the same menu from different triggers (which in turn have their\n      // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n      // risk it staying attached to a pane that's no longer in the DOM.\n\n      element.parentNode.insertBefore(this._outlet.outletElement, element); // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n      // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n      // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n      // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n      // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n      // @breaking-change 9.0.0 Make change detector ref required\n\n      (_a = this._changeDetectorRef) === null || _a === void 0 ? void 0 : _a.markForCheck();\n\n      this._portal.attach(this._outlet, context);\n\n      this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      if (this._portal.isAttached) {\n        this._portal.detach();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._outlet) {\n        this._outlet.dispose();\n      }\n    }\n  }]);\n\n  return _MatMenuContentBase;\n}();\n\n_MatMenuContentBase.ɵfac = function _MatMenuContentBase_Factory(t) {\n  return new (t || _MatMenuContentBase)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.ApplicationRef), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\n_MatMenuContentBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatMenuContentBase\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatMenuContentBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }, {\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: i0.ApplicationRef\n    }, {\n      type: i0.Injector\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, null);\n})();\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n\n\nvar MatMenuContent = /*#__PURE__*/function (_MatMenuContentBase2) {\n  _inherits(MatMenuContent, _MatMenuContentBase2);\n\n  var _super = _createSuper(MatMenuContent);\n\n  function MatMenuContent() {\n    _classCallCheck(this, MatMenuContent);\n\n    return _super.apply(this, arguments);\n  }\n\n  return _createClass(MatMenuContent);\n}(_MatMenuContentBase);\n\nMatMenuContent.ɵfac = /* @__PURE__ */function () {\n  var ɵMatMenuContent_BaseFactory;\n  return function MatMenuContent_Factory(t) {\n    return (ɵMatMenuContent_BaseFactory || (ɵMatMenuContent_BaseFactory = i0.ɵɵgetInheritedFactory(MatMenuContent)))(t || MatMenuContent);\n  };\n}();\n\nMatMenuContent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatMenuContent,\n  selectors: [[\"ng-template\", \"matMenuContent\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_MENU_CONTENT,\n    useExisting: MatMenuContent\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenuContent, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[matMenuContent]',\n      providers: [{\n        provide: MAT_MENU_CONTENT,\n        useExisting: MatMenuContent\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\n\n\nfunction throwMatMenuInvalidPositionX() {\n  throw Error(\"xPosition value must be either 'before' or after'.\\n      Example: <mat-menu xPosition=\\\"before\\\" #menu=\\\"matMenu\\\"></mat-menu>\");\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\n\n\nfunction throwMatMenuInvalidPositionY() {\n  throw Error(\"yPosition value must be either 'above' or below'.\\n      Example: <mat-menu yPosition=\\\"above\\\" #menu=\\\"matMenu\\\"></mat-menu>\");\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\n\n\nfunction throwMatMenuRecursiveError() {\n  throw Error(\"matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is \" + \"not a parent of the trigger or move the trigger outside of the menu.\");\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\n\n\nvar MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL'); // Boilerplate for applying mixins to MatMenuItem.\n\n/** @docs-private */\n\nvar _MatMenuItemBase = mixinDisableRipple(mixinDisabled( /*#__PURE__*/function () {\n  function _class() {\n    _classCallCheck(this, _class);\n  }\n\n  return _createClass(_class);\n}()));\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\n\n\nvar MatMenuItem = /*#__PURE__*/function (_MatMenuItemBase2) {\n  _inherits(MatMenuItem, _MatMenuItemBase2);\n\n  var _super2 = _createSuper(MatMenuItem);\n\n  function MatMenuItem(_elementRef, _document, _focusMonitor, _parentMenu, _changeDetectorRef) {\n    var _this;\n\n    _classCallCheck(this, MatMenuItem);\n\n    var _a;\n\n    _this = _super2.call(this);\n    _this._elementRef = _elementRef;\n    _this._document = _document;\n    _this._focusMonitor = _focusMonitor;\n    _this._parentMenu = _parentMenu;\n    _this._changeDetectorRef = _changeDetectorRef;\n    /** ARIA role for the menu item. */\n\n    _this.role = 'menuitem';\n    /** Stream that emits when the menu item is hovered. */\n\n    _this._hovered = new Subject();\n    /** Stream that emits when the menu item is focused. */\n\n    _this._focused = new Subject();\n    /** Whether the menu item is highlighted. */\n\n    _this._highlighted = false;\n    /** Whether the menu item acts as a trigger for a sub-menu. */\n\n    _this._triggersSubmenu = false;\n    (_a = _parentMenu === null || _parentMenu === void 0 ? void 0 : _parentMenu.addItem) === null || _a === void 0 ? void 0 : _a.call(_parentMenu, _assertThisInitialized(_this));\n    return _this;\n  }\n  /** Focuses the menu item. */\n\n\n  _createClass(MatMenuItem, [{\n    key: \"focus\",\n    value: function focus(origin, options) {\n      if (this._focusMonitor && origin) {\n        this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n      } else {\n        this._getHostElement().focus(options);\n      }\n\n      this._focused.next(this);\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      if (this._focusMonitor) {\n        // Start monitoring the element so it gets the appropriate focused classes. We want\n        // to show the focus style for menu items only when the focus was not caused by a\n        // mouse or touch interaction.\n        this._focusMonitor.monitor(this._elementRef, false);\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._focusMonitor) {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n      }\n\n      if (this._parentMenu && this._parentMenu.removeItem) {\n        this._parentMenu.removeItem(this);\n      }\n\n      this._hovered.complete();\n\n      this._focused.complete();\n    }\n    /** Used to set the `tabindex`. */\n\n  }, {\n    key: \"_getTabIndex\",\n    value: function _getTabIndex() {\n      return this.disabled ? '-1' : '0';\n    }\n    /** Returns the host DOM element. */\n\n  }, {\n    key: \"_getHostElement\",\n    value: function _getHostElement() {\n      return this._elementRef.nativeElement;\n    }\n    /** Prevents the default element actions if it is disabled. */\n\n  }, {\n    key: \"_checkDisabled\",\n    value: function _checkDisabled(event) {\n      if (this.disabled) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n    /** Emits to the hover stream. */\n\n  }, {\n    key: \"_handleMouseEnter\",\n    value: function _handleMouseEnter() {\n      this._hovered.next(this);\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n\n  }, {\n    key: \"getLabel\",\n    value: function getLabel() {\n      var _a;\n\n      var clone = this._elementRef.nativeElement.cloneNode(true);\n\n      var icons = clone.querySelectorAll('mat-icon, .material-icons'); // Strip away icons so they don't show up in the text.\n\n      for (var i = 0; i < icons.length; i++) {\n        icons[i].remove();\n      }\n\n      return ((_a = clone.textContent) === null || _a === void 0 ? void 0 : _a.trim()) || '';\n    }\n  }, {\n    key: \"_setHighlighted\",\n    value: function _setHighlighted(isHighlighted) {\n      var _a; // We need to mark this for check for the case where the content is coming from a\n      // `matMenuContent` whose change detection tree is at the declaration position,\n      // not the insertion position. See #23175.\n      // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n\n\n      this._highlighted = isHighlighted;\n      (_a = this._changeDetectorRef) === null || _a === void 0 ? void 0 : _a.markForCheck();\n    }\n  }, {\n    key: \"_hasFocus\",\n    value: function _hasFocus() {\n      return this._document && this._document.activeElement === this._getHostElement();\n    }\n  }]);\n\n  return MatMenuItem;\n}(_MatMenuItemBase);\n\nMatMenuItem.ɵfac = function MatMenuItem_Factory(t) {\n  return new (t || MatMenuItem)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nMatMenuItem.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatMenuItem,\n  selectors: [[\"\", \"mat-menu-item\", \"\"]],\n  hostAttrs: [1, \"mat-focus-indicator\"],\n  hostVars: 10,\n  hostBindings: function MatMenuItem_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MatMenuItem_click_HostBindingHandler($event) {\n        return ctx._checkDisabled($event);\n      })(\"mouseenter\", function MatMenuItem_mouseenter_HostBindingHandler() {\n        return ctx._handleMouseEnter();\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"role\", ctx.role)(\"tabindex\", ctx._getTabIndex())(\"aria-disabled\", ctx.disabled.toString())(\"disabled\", ctx.disabled || null);\n      i0.ɵɵclassProp(\"mat-menu-item\", true)(\"mat-menu-item-highlighted\", ctx._highlighted)(\"mat-menu-item-submenu-trigger\", ctx._triggersSubmenu);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    role: \"role\"\n  },\n  exportAs: [\"matMenuItem\"],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  attrs: _c0,\n  ngContentSelectors: _c1,\n  decls: 3,\n  vars: 3,\n  consts: [[\"matRipple\", \"\", 1, \"mat-menu-ripple\", 3, \"matRippleDisabled\", \"matRippleTrigger\"], [\"class\", \"mat-menu-submenu-icon\", \"viewBox\", \"0 0 5 10\", \"focusable\", \"false\", 4, \"ngIf\"], [\"viewBox\", \"0 0 5 10\", \"focusable\", \"false\", 1, \"mat-menu-submenu-icon\"], [\"points\", \"0,0 5,5 0,10\"]],\n  template: function MatMenuItem_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n      i0.ɵɵelement(1, \"div\", 0);\n      i0.ɵɵtemplate(2, MatMenuItem__svg_svg_2_Template, 2, 0, \"svg\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleTrigger\", ctx._getHostElement());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx._triggersSubmenu);\n    }\n  },\n  dependencies: [i2.NgIf, i3.MatRipple],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenuItem, [{\n    type: Component,\n    args: [{\n      selector: '[mat-menu-item]',\n      exportAs: 'matMenuItem',\n      inputs: ['disabled', 'disableRipple'],\n      host: {\n        '[attr.role]': 'role',\n        '[class.mat-menu-item]': 'true',\n        '[class.mat-menu-item-highlighted]': '_highlighted',\n        '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.disabled]': 'disabled || null',\n        'class': 'mat-focus-indicator',\n        '(click)': '_checkDisabled($event)',\n        '(mouseenter)': '_handleMouseEnter()'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<ng-content></ng-content>\\n<div class=\\\"mat-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1.FocusMonitor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_PANEL]\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    role: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token to be used to override the default options for `mat-menu`. */\n\n\nvar MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n  providedIn: 'root',\n  factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop'\n  };\n}\n\nvar menuPanelUid = 0;\n/** Base class with all of the `MatMenu` functionality. */\n\nvar _MatMenuBase = /*#__PURE__*/function () {\n  function _MatMenuBase(_elementRef, _ngZone, _defaultOptions, // @breaking-change 15.0.0 `_changeDetectorRef` to become a required parameter.\n  _changeDetectorRef) {\n    _classCallCheck(this, _MatMenuBase);\n\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    this._defaultOptions = _defaultOptions;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._xPosition = this._defaultOptions.xPosition;\n    this._yPosition = this._defaultOptions.yPosition;\n    /** Only the direct descendant menu items. */\n\n    this._directDescendantItems = new QueryList();\n    /** Subscription to tab events on the menu panel */\n\n    this._tabSubscription = Subscription.EMPTY;\n    /** Config object to be passed into the menu's ngClass */\n\n    this._classList = {};\n    /** Current state of the panel animation. */\n\n    this._panelAnimationState = 'void';\n    /** Emits whenever an animation on the menu completes. */\n\n    this._animationDone = new Subject();\n    /** Class or list of classes to be added to the overlay panel. */\n\n    this.overlayPanelClass = this._defaultOptions.overlayPanelClass || '';\n    /** Class to be added to the backdrop element. */\n\n    this.backdropClass = this._defaultOptions.backdropClass;\n    this._overlapTrigger = this._defaultOptions.overlapTrigger;\n    this._hasBackdrop = this._defaultOptions.hasBackdrop;\n    /** Event emitted when the menu is closed. */\n\n    this.closed = new EventEmitter();\n    /**\n     * Event emitted when the menu is closed.\n     * @deprecated Switch to `closed` instead\n     * @breaking-change 8.0.0\n     */\n\n    this.close = this.closed;\n    this.panelId = \"mat-menu-panel-\".concat(menuPanelUid++);\n  }\n  /** Position of the menu in the X axis. */\n\n\n  _createClass(_MatMenuBase, [{\n    key: \"xPosition\",\n    get: function get() {\n      return this._xPosition;\n    },\n    set: function set(value) {\n      if (value !== 'before' && value !== 'after' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatMenuInvalidPositionX();\n      }\n\n      this._xPosition = value;\n      this.setPositionClasses();\n    }\n    /** Position of the menu in the Y axis. */\n\n  }, {\n    key: \"yPosition\",\n    get: function get() {\n      return this._yPosition;\n    },\n    set: function set(value) {\n      if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatMenuInvalidPositionY();\n      }\n\n      this._yPosition = value;\n      this.setPositionClasses();\n    }\n    /** Whether the menu should overlap its trigger. */\n\n  }, {\n    key: \"overlapTrigger\",\n    get: function get() {\n      return this._overlapTrigger;\n    },\n    set: function set(value) {\n      this._overlapTrigger = coerceBooleanProperty(value);\n    }\n    /** Whether the menu has a backdrop. */\n\n  }, {\n    key: \"hasBackdrop\",\n    get: function get() {\n      return this._hasBackdrop;\n    },\n    set: function set(value) {\n      this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n\n  }, {\n    key: \"panelClass\",\n    set: function set(classes) {\n      var _this2 = this;\n\n      var previousPanelClass = this._previousPanelClass;\n\n      if (previousPanelClass && previousPanelClass.length) {\n        previousPanelClass.split(' ').forEach(function (className) {\n          _this2._classList[className] = false;\n        });\n      }\n\n      this._previousPanelClass = classes;\n\n      if (classes && classes.length) {\n        classes.split(' ').forEach(function (className) {\n          _this2._classList[className] = true;\n        });\n        this._elementRef.nativeElement.className = '';\n      }\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n\n  }, {\n    key: \"classList\",\n    get: function get() {\n      return this.panelClass;\n    },\n    set: function set(classes) {\n      this.panelClass = classes;\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.setPositionClasses();\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this3 = this;\n\n      this._updateDirectDescendants();\n\n      this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead().withHomeAndEnd();\n      this._tabSubscription = this._keyManager.tabOut.subscribe(function () {\n        return _this3.closed.emit('tab');\n      }); // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n      // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n      // is internal and we know that it gets completed on destroy.\n\n      this._directDescendantItems.changes.pipe(startWith(this._directDescendantItems), switchMap(function (items) {\n        return merge.apply(void 0, _toConsumableArray(items.map(function (item) {\n          return item._focused;\n        })));\n      })).subscribe(function (focusedItem) {\n        return _this3._keyManager.updateActiveItem(focusedItem);\n      });\n\n      this._directDescendantItems.changes.subscribe(function (itemsList) {\n        var _a; // Move focus to another item, if the active item is removed from the list.\n        // We need to debounce the callback, because multiple items might be removed\n        // in quick succession.\n\n\n        var manager = _this3._keyManager;\n\n        if (_this3._panelAnimationState === 'enter' && ((_a = manager.activeItem) === null || _a === void 0 ? void 0 : _a._hasFocus())) {\n          var items = itemsList.toArray();\n          var index = Math.max(0, Math.min(items.length - 1, manager.activeItemIndex || 0));\n\n          if (items[index] && !items[index].disabled) {\n            manager.setActiveItem(index);\n          } else {\n            manager.setNextItemActive();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._directDescendantItems.destroy();\n\n      this._tabSubscription.unsubscribe();\n\n      this.closed.complete();\n    }\n    /** Stream that emits whenever the hovered menu item changes. */\n\n  }, {\n    key: \"_hovered\",\n    value: function _hovered() {\n      // Coerce the `changes` property because Angular types it as `Observable<any>`\n      var itemChanges = this._directDescendantItems.changes;\n      return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(function (items) {\n        return merge.apply(void 0, _toConsumableArray(items.map(function (item) {\n          return item._hovered;\n        })));\n      }));\n    }\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n\n  }, {\n    key: \"addItem\",\n    value: function addItem(_item) {}\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(_item) {}\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(event) {\n      var keyCode = event.keyCode;\n      var manager = this._keyManager;\n\n      switch (keyCode) {\n        case ESCAPE:\n          if (!hasModifierKey(event)) {\n            event.preventDefault();\n            this.closed.emit('keydown');\n          }\n\n          break;\n\n        case LEFT_ARROW:\n          if (this.parentMenu && this.direction === 'ltr') {\n            this.closed.emit('keydown');\n          }\n\n          break;\n\n        case RIGHT_ARROW:\n          if (this.parentMenu && this.direction === 'rtl') {\n            this.closed.emit('keydown');\n          }\n\n          break;\n\n        default:\n          if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n            manager.setFocusOrigin('keyboard');\n          }\n\n          manager.onKeydown(event);\n          return;\n      } // Don't allow the event to propagate if we've already handled it, or it may\n      // end up reaching other overlays that were opened earlier (see #22694).\n\n\n      event.stopPropagation();\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n\n  }, {\n    key: \"focusFirstItem\",\n    value: function focusFirstItem() {\n      var _this4 = this;\n\n      var origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'program';\n\n      // Wait for `onStable` to ensure iOS VoiceOver screen reader focuses the first item (#24735).\n      this._ngZone.onStable.pipe(take(1)).subscribe(function () {\n        var menuPanel = null;\n\n        if (_this4._directDescendantItems.length) {\n          // Because the `mat-menuPanel` is at the DOM insertion point, not inside the overlay, we don't\n          // have a nice way of getting a hold of the menuPanel panel. We can't use a `ViewChild` either\n          // because the panel is inside an `ng-template`. We work around it by starting from one of\n          // the items and walking up the DOM.\n          menuPanel = _this4._directDescendantItems.first._getHostElement().closest('[role=\"menu\"]');\n        } // If an item in the menuPanel is already focused, avoid overriding the focus.\n\n\n        if (!menuPanel || !menuPanel.contains(document.activeElement)) {\n          var manager = _this4._keyManager;\n          manager.setFocusOrigin(origin).setFirstItemActive(); // If there's no active item at this point, it means that all the items are disabled.\n          // Move focus to the menuPanel panel so keyboard events like Escape still work. Also this will\n          // give _some_ feedback to screen readers.\n\n          if (!manager.activeItem && menuPanel) {\n            menuPanel.focus();\n          }\n        }\n      });\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n\n  }, {\n    key: \"resetActiveItem\",\n    value: function resetActiveItem() {\n      this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n\n  }, {\n    key: \"setElevation\",\n    value: function setElevation(depth) {\n      var _this5 = this;\n\n      // The elevation starts at the base and increases by one for each level.\n      // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n      var elevation = Math.min(this._baseElevation + depth, 24);\n      var newElevation = \"\".concat(this._elevationPrefix).concat(elevation);\n      var customElevation = Object.keys(this._classList).find(function (className) {\n        return className.startsWith(_this5._elevationPrefix);\n      });\n\n      if (!customElevation || customElevation === this._previousElevation) {\n        if (this._previousElevation) {\n          this._classList[this._previousElevation] = false;\n        }\n\n        this._classList[newElevation] = true;\n        this._previousElevation = newElevation;\n      }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n\n  }, {\n    key: \"setPositionClasses\",\n    value: function setPositionClasses() {\n      var posX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.xPosition;\n      var posY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.yPosition;\n\n      var _a;\n\n      var classes = this._classList;\n      classes['mat-menu-before'] = posX === 'before';\n      classes['mat-menu-after'] = posX === 'after';\n      classes['mat-menu-above'] = posY === 'above';\n      classes['mat-menu-below'] = posY === 'below'; // @breaking-change 15.0.0 Remove null check for `_changeDetectorRef`.\n\n      (_a = this._changeDetectorRef) === null || _a === void 0 ? void 0 : _a.markForCheck();\n    }\n    /** Starts the enter animation. */\n\n  }, {\n    key: \"_startAnimation\",\n    value: function _startAnimation() {\n      // @breaking-change 8.0.0 Combine with _resetAnimation.\n      this._panelAnimationState = 'enter';\n    }\n    /** Resets the panel animation to its initial state. */\n\n  }, {\n    key: \"_resetAnimation\",\n    value: function _resetAnimation() {\n      // @breaking-change 8.0.0 Combine with _startAnimation.\n      this._panelAnimationState = 'void';\n    }\n    /** Callback that is invoked when the panel animation completes. */\n\n  }, {\n    key: \"_onAnimationDone\",\n    value: function _onAnimationDone(event) {\n      this._animationDone.next(event);\n\n      this._isAnimating = false;\n    }\n  }, {\n    key: \"_onAnimationStart\",\n    value: function _onAnimationStart(event) {\n      this._isAnimating = true; // Scroll the content element to the top as soon as the animation starts. This is necessary,\n      // because we move focus to the first item while it's still being animated, which can throw\n      // the browser off when it determines the scroll position. Alternatively we can move focus\n      // when the animation is done, however moving focus asynchronously will interrupt screen\n      // readers which are in the process of reading out the menu already. We take the `element`\n      // from the `event` since we can't use a `ViewChild` to access the pane.\n\n      if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n        event.element.scrollTop = 0;\n      }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n\n  }, {\n    key: \"_updateDirectDescendants\",\n    value: function _updateDirectDescendants() {\n      var _this6 = this;\n\n      this._allItems.changes.pipe(startWith(this._allItems)).subscribe(function (items) {\n        _this6._directDescendantItems.reset(items.filter(function (item) {\n          return item._parentMenu === _this6;\n        }));\n\n        _this6._directDescendantItems.notifyOnChanges();\n      });\n    }\n  }]);\n\n  return _MatMenuBase;\n}();\n\n_MatMenuBase.ɵfac = function _MatMenuBase_Factory(t) {\n  return new (t || _MatMenuBase)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\n_MatMenuBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatMenuBase,\n  contentQueries: function _MatMenuBase_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MAT_MENU_CONTENT, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatMenuItem, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatMenuItem, 4);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.lazyContent = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._allItems = _t);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.items = _t);\n    }\n  },\n  viewQuery: function _MatMenuBase_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(TemplateRef, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n    }\n  },\n  inputs: {\n    backdropClass: \"backdropClass\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"],\n    xPosition: \"xPosition\",\n    yPosition: \"yPosition\",\n    overlapTrigger: \"overlapTrigger\",\n    hasBackdrop: \"hasBackdrop\",\n    panelClass: [\"class\", \"panelClass\"],\n    classList: \"classList\"\n  },\n  outputs: {\n    closed: \"closed\",\n    close: \"close\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatMenuBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    _allItems: [{\n      type: ContentChildren,\n      args: [MatMenuItem, {\n        descendants: true\n      }]\n    }],\n    backdropClass: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    ariaDescribedby: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    xPosition: [{\n      type: Input\n    }],\n    yPosition: [{\n      type: Input\n    }],\n    templateRef: [{\n      type: ViewChild,\n      args: [TemplateRef]\n    }],\n    items: [{\n      type: ContentChildren,\n      args: [MatMenuItem, {\n        descendants: false\n      }]\n    }],\n    lazyContent: [{\n      type: ContentChild,\n      args: [MAT_MENU_CONTENT]\n    }],\n    overlapTrigger: [{\n      type: Input\n    }],\n    hasBackdrop: [{\n      type: Input\n    }],\n    panelClass: [{\n      type: Input,\n      args: ['class']\n    }],\n    classList: [{\n      type: Input\n    }],\n    closed: [{\n      type: Output\n    }],\n    close: [{\n      type: Output\n    }]\n  });\n})();\n/** @docs-public MatMenu */\n\n\nvar MatMenu = /*#__PURE__*/function (_MatMenuBase2) {\n  _inherits(MatMenu, _MatMenuBase2);\n\n  var _super3 = _createSuper(MatMenu);\n\n  function MatMenu(elementRef, ngZone, defaultOptions, changeDetectorRef) {\n    var _this7;\n\n    _classCallCheck(this, MatMenu);\n\n    _this7 = _super3.call(this, elementRef, ngZone, defaultOptions, changeDetectorRef);\n    _this7._elevationPrefix = 'mat-elevation-z';\n    _this7._baseElevation = 4;\n    return _this7;\n  }\n\n  return _createClass(MatMenu);\n}(_MatMenuBase);\n\nMatMenu.ɵfac = function MatMenu_Factory(t) {\n  return new (t || MatMenu)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nMatMenu.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatMenu,\n  selectors: [[\"mat-menu\"]],\n  hostVars: 3,\n  hostBindings: function MatMenu_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n    }\n  },\n  exportAs: [\"matMenu\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_MENU_PANEL,\n    useExisting: MatMenu\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 0,\n  consts: [[\"tabindex\", \"-1\", \"role\", \"menu\", 1, \"mat-menu-panel\", 3, \"id\", \"ngClass\", \"keydown\", \"click\"], [1, \"mat-menu-content\"]],\n  template: function MatMenu_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵtemplate(0, MatMenu_ng_template_0_Template, 3, 6, \"ng-template\");\n    }\n  },\n  dependencies: [i2.NgClass],\n  styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px;position:relative}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.mat-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-menu-submenu-icon{fill:CanvasText}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenu, [{\n    type: Component,\n    args: [{\n      selector: 'mat-menu',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matMenu',\n      host: {\n        '[attr.aria-label]': 'null',\n        '[attr.aria-labelledby]': 'null',\n        '[attr.aria-describedby]': 'null'\n      },\n      animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems],\n      providers: [{\n        provide: MAT_MENU_PANEL,\n        useExisting: MatMenu\n      }],\n      template: \"<ng-template>\\n  <div\\n    class=\\\"mat-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n      styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px;position:relative}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.mat-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-menu-submenu-icon{fill:CanvasText}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that determines the scroll handling while the menu is open. */\n\n\nvar MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/** @docs-private */\n\n\nvar MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Default top padding of the menu panel.\n * @deprecated No longer being used. Will be removed.\n * @breaking-change 15.0.0\n */\n\nvar MENU_PANEL_TOP_PADDING = 8;\n/** Options for binding a passive event listener. */\n\nvar passiveEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n}); // TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\nvar _MatMenuTriggerBase = /*#__PURE__*/function () {\n  function _MatMenuTriggerBase(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu, // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n  // tslint:disable-next-line: lightweight-tokens\n  _menuItemInstance, _dir, _focusMonitor, _ngZone) {\n    var _this8 = this;\n\n    _classCallCheck(this, _MatMenuTriggerBase);\n\n    this._overlay = _overlay;\n    this._element = _element;\n    this._viewContainerRef = _viewContainerRef;\n    this._menuItemInstance = _menuItemInstance;\n    this._dir = _dir;\n    this._focusMonitor = _focusMonitor;\n    this._ngZone = _ngZone;\n    this._overlayRef = null;\n    this._menuOpen = false;\n    this._closingActionsSubscription = Subscription.EMPTY;\n    this._hoverSubscription = Subscription.EMPTY;\n    this._menuCloseSubscription = Subscription.EMPTY;\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n\n    this._handleTouchStart = function (event) {\n      if (!isFakeTouchstartFromScreenReader(event)) {\n        _this8._openedBy = 'touch';\n      }\n    }; // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the menu is opened via the keyboard\n\n\n    this._openedBy = undefined;\n    /**\n     * Whether focus should be restored when the menu is closed.\n     * Note that disabling this option can have accessibility implications\n     * and it's up to you to manage focus, if you decide to turn it off.\n     */\n\n    this.restoreFocus = true;\n    /** Event emitted when the associated menu is opened. */\n\n    this.menuOpened = new EventEmitter();\n    /**\n     * Event emitted when the associated menu is opened.\n     * @deprecated Switch to `menuOpened` instead\n     * @breaking-change 8.0.0\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n\n    this.onMenuOpen = this.menuOpened;\n    /** Event emitted when the associated menu is closed. */\n\n    this.menuClosed = new EventEmitter();\n    /**\n     * Event emitted when the associated menu is closed.\n     * @deprecated Switch to `menuClosed` instead\n     * @breaking-change 8.0.0\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n\n    this.onMenuClose = this.menuClosed;\n    this._scrollStrategy = scrollStrategy;\n    this._parentMaterialMenu = parentMenu instanceof _MatMenuBase ? parentMenu : undefined;\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n\n\n  _createClass(_MatMenuTriggerBase, [{\n    key: \"_deprecatedMatMenuTriggerFor\",\n    get: function get() {\n      return this.menu;\n    },\n    set: function set(v) {\n      this.menu = v;\n    }\n    /** References the menu instance that the trigger is associated with. */\n\n  }, {\n    key: \"menu\",\n    get: function get() {\n      return this._menu;\n    },\n    set: function set(menu) {\n      var _this9 = this;\n\n      if (menu === this._menu) {\n        return;\n      }\n\n      this._menu = menu;\n\n      this._menuCloseSubscription.unsubscribe();\n\n      if (menu) {\n        if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throwMatMenuRecursiveError();\n        }\n\n        this._menuCloseSubscription = menu.close.subscribe(function (reason) {\n          _this9._destroyMenu(reason); // If a click closed the menu, we should close the entire chain of nested menus.\n\n\n          if ((reason === 'click' || reason === 'tab') && _this9._parentMaterialMenu) {\n            _this9._parentMaterialMenu.closed.emit(reason);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      this._handleHover();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._overlayRef) {\n        this._overlayRef.dispose();\n\n        this._overlayRef = null;\n      }\n\n      this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n\n      this._menuCloseSubscription.unsubscribe();\n\n      this._closingActionsSubscription.unsubscribe();\n\n      this._hoverSubscription.unsubscribe();\n    }\n    /** Whether the menu is open. */\n\n  }, {\n    key: \"menuOpen\",\n    get: function get() {\n      return this._menuOpen;\n    }\n    /** The text direction of the containing app. */\n\n  }, {\n    key: \"dir\",\n    get: function get() {\n      return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n\n  }, {\n    key: \"triggersSubmenu\",\n    value: function triggersSubmenu() {\n      return !!(this._menuItemInstance && this._parentMaterialMenu);\n    }\n    /** Toggles the menu between the open and closed states. */\n\n  }, {\n    key: \"toggleMenu\",\n    value: function toggleMenu() {\n      return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /** Opens the menu. */\n\n  }, {\n    key: \"openMenu\",\n    value: function openMenu() {\n      var _this10 = this;\n\n      var menu = this.menu;\n\n      if (this._menuOpen || !menu) {\n        return;\n      }\n\n      var overlayRef = this._createOverlay(menu);\n\n      var overlayConfig = overlayRef.getConfig();\n      var positionStrategy = overlayConfig.positionStrategy;\n\n      this._setPosition(menu, positionStrategy);\n\n      overlayConfig.hasBackdrop = menu.hasBackdrop == null ? !this.triggersSubmenu() : menu.hasBackdrop;\n      overlayRef.attach(this._getPortal(menu));\n\n      if (menu.lazyContent) {\n        menu.lazyContent.attach(this.menuData);\n      }\n\n      this._closingActionsSubscription = this._menuClosingActions().subscribe(function () {\n        return _this10.closeMenu();\n      });\n\n      this._initMenu(menu);\n\n      if (menu instanceof _MatMenuBase) {\n        menu._startAnimation();\n\n        menu._directDescendantItems.changes.pipe(takeUntil(menu.close)).subscribe(function () {\n          // Re-adjust the position without locking when the amount of items\n          // changes so that the overlay is allowed to pick a new optimal position.\n          positionStrategy.withLockedPosition(false).reapplyLastPosition();\n          positionStrategy.withLockedPosition(true);\n        });\n      }\n    }\n    /** Closes the menu. */\n\n  }, {\n    key: \"closeMenu\",\n    value: function closeMenu() {\n      var _a;\n\n      (_a = this.menu) === null || _a === void 0 ? void 0 : _a.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus(origin, options) {\n      if (this._focusMonitor && origin) {\n        this._focusMonitor.focusVia(this._element, origin, options);\n      } else {\n        this._element.nativeElement.focus(options);\n      }\n    }\n    /**\n     * Updates the position of the menu to ensure that it fits all options within the viewport.\n     */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      var _a;\n\n      (_a = this._overlayRef) === null || _a === void 0 ? void 0 : _a.updatePosition();\n    }\n    /** Closes the menu and does the necessary cleanup. */\n\n  }, {\n    key: \"_destroyMenu\",\n    value: function _destroyMenu(reason) {\n      var _this11 = this;\n\n      var _a;\n\n      if (!this._overlayRef || !this.menuOpen) {\n        return;\n      }\n\n      var menu = this.menu;\n\n      this._closingActionsSubscription.unsubscribe();\n\n      this._overlayRef.detach(); // Always restore focus if the user is navigating using the keyboard or the menu was opened\n      // programmatically. We don't restore for non-root triggers, because it can prevent focus\n      // from making it back to the root trigger when closing a long chain of menus by clicking\n      // on the backdrop.\n\n\n      if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n        this.focus(this._openedBy);\n      }\n\n      this._openedBy = undefined;\n\n      if (menu instanceof _MatMenuBase) {\n        menu._resetAnimation();\n\n        if (menu.lazyContent) {\n          // Wait for the exit animation to finish before detaching the content.\n          menu._animationDone.pipe(filter(function (event) {\n            return event.toState === 'void';\n          }), take(1), // Interrupt if the content got re-attached.\n          takeUntil(menu.lazyContent._attached)).subscribe({\n            next: function next() {\n              return menu.lazyContent.detach();\n            },\n            // No matter whether the content got re-attached, reset the menu.\n            complete: function complete() {\n              return _this11._setIsMenuOpen(false);\n            }\n          });\n        } else {\n          this._setIsMenuOpen(false);\n        }\n      } else {\n        this._setIsMenuOpen(false);\n\n        (_a = menu === null || menu === void 0 ? void 0 : menu.lazyContent) === null || _a === void 0 ? void 0 : _a.detach();\n      }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n\n  }, {\n    key: \"_initMenu\",\n    value: function _initMenu(menu) {\n      menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n      menu.direction = this.dir;\n\n      this._setMenuElevation(menu);\n\n      menu.focusFirstItem(this._openedBy || 'program');\n\n      this._setIsMenuOpen(true);\n    }\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n\n  }, {\n    key: \"_setMenuElevation\",\n    value: function _setMenuElevation(menu) {\n      if (menu.setElevation) {\n        var depth = 0;\n        var parentMenu = menu.parentMenu;\n\n        while (parentMenu) {\n          depth++;\n          parentMenu = parentMenu.parentMenu;\n        }\n\n        menu.setElevation(depth);\n      }\n    } // set state rather than toggle to support triggers sharing a menu\n\n  }, {\n    key: \"_setIsMenuOpen\",\n    value: function _setIsMenuOpen(isOpen) {\n      this._menuOpen = isOpen;\n      this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n      if (this.triggersSubmenu()) {\n        this._menuItemInstance._setHighlighted(isOpen);\n      }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n\n  }, {\n    key: \"_createOverlay\",\n    value: function _createOverlay(menu) {\n      if (!this._overlayRef) {\n        var config = this._getOverlayConfig(menu);\n\n        this._subscribeToPositions(menu, config.positionStrategy);\n\n        this._overlayRef = this._overlay.create(config); // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n        // Ideally we'd also have our keyboard event logic in here, however doing so will\n        // break anybody that may have implemented the `MatMenuPanel` themselves.\n\n        this._overlayRef.keydownEvents().subscribe();\n      }\n\n      return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n\n  }, {\n    key: \"_getOverlayConfig\",\n    value: function _getOverlayConfig(menu) {\n      return new OverlayConfig({\n        positionStrategy: this._overlay.position().flexibleConnectedTo(this._element).withLockedPosition().withGrowAfterOpen().withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n        backdropClass: menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n        panelClass: menu.overlayPanelClass,\n        scrollStrategy: this._scrollStrategy(),\n        direction: this._dir\n      });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n\n  }, {\n    key: \"_subscribeToPositions\",\n    value: function _subscribeToPositions(menu, position) {\n      var _this12 = this;\n\n      if (menu.setPositionClasses) {\n        position.positionChanges.subscribe(function (change) {\n          var posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n          var posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above'; // @breaking-change 15.0.0 Remove null check for `ngZone`.\n          // `positionChanges` fires outside of the `ngZone` and `setPositionClasses` might be\n          // updating something in the view so we need to bring it back in.\n\n          if (_this12._ngZone) {\n            _this12._ngZone.run(function () {\n              return menu.setPositionClasses(posX, posY);\n            });\n          } else {\n            menu.setPositionClasses(posX, posY);\n          }\n        });\n      }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n\n  }, {\n    key: \"_setPosition\",\n    value: function _setPosition(menu, positionStrategy) {\n      var _ref = menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'],\n          _ref2 = _slicedToArray(_ref, 2),\n          originX = _ref2[0],\n          originFallbackX = _ref2[1];\n\n      var _ref3 = menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'],\n          _ref4 = _slicedToArray(_ref3, 2),\n          overlayY = _ref4[0],\n          overlayFallbackY = _ref4[1];\n\n      var originY = overlayY,\n          originFallbackY = overlayFallbackY;\n      var overlayX = originX,\n          overlayFallbackX = originFallbackX;\n      var offsetY = 0;\n\n      if (this.triggersSubmenu()) {\n        // When the menu is a sub-menu, it should always align itself\n        // to the edges of the trigger, instead of overlapping it.\n        overlayFallbackX = originX = menu.xPosition === 'before' ? 'start' : 'end';\n        originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n\n        if (this._parentMaterialMenu) {\n          if (this._parentInnerPadding == null) {\n            var firstItem = this._parentMaterialMenu.items.first;\n            this._parentInnerPadding = firstItem ? firstItem._getHostElement().offsetTop : 0;\n          }\n\n          offsetY = overlayY === 'bottom' ? this._parentInnerPadding : -this._parentInnerPadding;\n        }\n      } else if (!menu.overlapTrigger) {\n        originY = overlayY === 'top' ? 'bottom' : 'top';\n        originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n      }\n\n      positionStrategy.withPositions([{\n        originX: originX,\n        originY: originY,\n        overlayX: overlayX,\n        overlayY: overlayY,\n        offsetY: offsetY\n      }, {\n        originX: originFallbackX,\n        originY: originY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayY,\n        offsetY: offsetY\n      }, {\n        originX: originX,\n        originY: originFallbackY,\n        overlayX: overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }, {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }]);\n    }\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n\n  }, {\n    key: \"_menuClosingActions\",\n    value: function _menuClosingActions() {\n      var _this13 = this;\n\n      var backdrop = this._overlayRef.backdropClick();\n\n      var detachments = this._overlayRef.detachments();\n\n      var parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n      var hover = this._parentMaterialMenu ? this._parentMaterialMenu._hovered().pipe(filter(function (active) {\n        return active !== _this13._menuItemInstance;\n      }), filter(function () {\n        return _this13._menuOpen;\n      })) : of();\n      return merge(backdrop, parentClose, hover, detachments);\n    }\n    /** Handles mouse presses on the trigger. */\n\n  }, {\n    key: \"_handleMousedown\",\n    value: function _handleMousedown(event) {\n      if (!isFakeMousedownFromScreenReader(event)) {\n        // Since right or middle button clicks won't trigger the `click` event,\n        // we shouldn't consider the menu as opened by mouse in those cases.\n        this._openedBy = event.button === 0 ? 'mouse' : undefined; // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n        // we should prevent focus from moving onto it via click to avoid the\n        // highlight from lingering on the menu item.\n\n        if (this.triggersSubmenu()) {\n          event.preventDefault();\n        }\n      }\n    }\n    /** Handles key presses on the trigger. */\n\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(event) {\n      var keyCode = event.keyCode; // Pressing enter on the trigger will trigger the click handler later.\n\n      if (keyCode === ENTER || keyCode === SPACE) {\n        this._openedBy = 'keyboard';\n      }\n\n      if (this.triggersSubmenu() && (keyCode === RIGHT_ARROW && this.dir === 'ltr' || keyCode === LEFT_ARROW && this.dir === 'rtl')) {\n        this._openedBy = 'keyboard';\n        this.openMenu();\n      }\n    }\n    /** Handles click events on the trigger. */\n\n  }, {\n    key: \"_handleClick\",\n    value: function _handleClick(event) {\n      if (this.triggersSubmenu()) {\n        // Stop event propagation to avoid closing the parent menu.\n        event.stopPropagation();\n        this.openMenu();\n      } else {\n        this.toggleMenu();\n      }\n    }\n    /** Handles the cases where the user hovers over the trigger. */\n\n  }, {\n    key: \"_handleHover\",\n    value: function _handleHover() {\n      var _this14 = this;\n\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n        return;\n      }\n\n      this._hoverSubscription = this._parentMaterialMenu._hovered() // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(filter(function (active) {\n        return active === _this14._menuItemInstance && !active.disabled;\n      }), delay(0, asapScheduler)).subscribe(function () {\n        _this14._openedBy = 'mouse'; // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n\n        if (_this14.menu instanceof _MatMenuBase && _this14.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          _this14.menu._animationDone.pipe(take(1), delay(0, asapScheduler), takeUntil(_this14._parentMaterialMenu._hovered())).subscribe(function () {\n            return _this14.openMenu();\n          });\n        } else {\n          _this14.openMenu();\n        }\n      });\n    }\n    /** Gets the portal that should be attached to the overlay. */\n\n  }, {\n    key: \"_getPortal\",\n    value: function _getPortal(menu) {\n      // Note that we can avoid this check by keeping the portal on the menu panel.\n      // While it would be cleaner, we'd have to introduce another required method on\n      // `MatMenuPanel`, making it harder to consume.\n      if (!this._portal || this._portal.templateRef !== menu.templateRef) {\n        this._portal = new TemplatePortal(menu.templateRef, this._viewContainerRef);\n      }\n\n      return this._portal;\n    }\n  }]);\n\n  return _MatMenuTriggerBase;\n}();\n\n_MatMenuTriggerBase.ɵfac = function _MatMenuTriggerBase_Factory(t) {\n  return new (t || _MatMenuTriggerBase)(i0.ɵɵdirectiveInject(i1$1.Overlay), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(MAT_MENU_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8), i0.ɵɵdirectiveInject(MatMenuItem, 10), i0.ɵɵdirectiveInject(i3$1.Directionality, 8), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\n_MatMenuTriggerBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatMenuTriggerBase,\n  hostVars: 3,\n  hostBindings: function _MatMenuTriggerBase_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function _MatMenuTriggerBase_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      })(\"mousedown\", function _MatMenuTriggerBase_mousedown_HostBindingHandler($event) {\n        return ctx._handleMousedown($event);\n      })(\"keydown\", function _MatMenuTriggerBase_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-haspopup\", ctx.menu ? \"menu\" : null)(\"aria-expanded\", ctx.menuOpen || null)(\"aria-controls\", ctx.menuOpen ? ctx.menu.panelId : null);\n    }\n  },\n  inputs: {\n    _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"],\n    menu: [\"matMenuTriggerFor\", \"menu\"],\n    menuData: [\"matMenuTriggerData\", \"menuData\"],\n    restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"]\n  },\n  outputs: {\n    menuOpened: \"menuOpened\",\n    onMenuOpen: \"onMenuOpen\",\n    menuClosed: \"menuClosed\",\n    onMenuClose: \"onMenuClose\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatMenuTriggerBase, [{\n    type: Directive,\n    args: [{\n      host: {\n        '[attr.aria-haspopup]': 'menu ? \"menu\" : null',\n        '[attr.aria-expanded]': 'menuOpen || null',\n        '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n        '(click)': '_handleClick($event)',\n        '(mousedown)': '_handleMousedown($event)',\n        '(keydown)': '_handleKeydown($event)'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_PANEL]\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: MatMenuItem,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }, {\n      type: i3$1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i1.FocusMonitor\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    _deprecatedMatMenuTriggerFor: [{\n      type: Input,\n      args: ['mat-menu-trigger-for']\n    }],\n    menu: [{\n      type: Input,\n      args: ['matMenuTriggerFor']\n    }],\n    menuData: [{\n      type: Input,\n      args: ['matMenuTriggerData']\n    }],\n    restoreFocus: [{\n      type: Input,\n      args: ['matMenuTriggerRestoreFocus']\n    }],\n    menuOpened: [{\n      type: Output\n    }],\n    onMenuOpen: [{\n      type: Output\n    }],\n    menuClosed: [{\n      type: Output\n    }],\n    onMenuClose: [{\n      type: Output\n    }]\n  });\n})();\n/** Directive applied to an element that should trigger a `mat-menu`. */\n\n\nvar MatMenuTrigger = /*#__PURE__*/function (_MatMenuTriggerBase2) {\n  _inherits(MatMenuTrigger, _MatMenuTriggerBase2);\n\n  var _super4 = _createSuper(MatMenuTrigger);\n\n  function MatMenuTrigger() {\n    _classCallCheck(this, MatMenuTrigger);\n\n    return _super4.apply(this, arguments);\n  }\n\n  return _createClass(MatMenuTrigger);\n}(_MatMenuTriggerBase);\n\nMatMenuTrigger.ɵfac = /* @__PURE__ */function () {\n  var ɵMatMenuTrigger_BaseFactory;\n  return function MatMenuTrigger_Factory(t) {\n    return (ɵMatMenuTrigger_BaseFactory || (ɵMatMenuTrigger_BaseFactory = i0.ɵɵgetInheritedFactory(MatMenuTrigger)))(t || MatMenuTrigger);\n  };\n}();\n\nMatMenuTrigger.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatMenuTrigger,\n  selectors: [[\"\", \"mat-menu-trigger-for\", \"\"], [\"\", \"matMenuTriggerFor\", \"\"]],\n  hostAttrs: [1, \"mat-menu-trigger\"],\n  exportAs: [\"matMenuTrigger\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenuTrigger, [{\n    type: Directive,\n    args: [{\n      selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\",\n      host: {\n        'class': 'mat-menu-trigger'\n      },\n      exportAs: 'matMenuTrigger'\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatMenuModule = /*#__PURE__*/_createClass(function MatMenuModule() {\n  _classCallCheck(this, MatMenuModule);\n});\n\nMatMenuModule.ɵfac = function MatMenuModule_Factory(t) {\n  return new (t || MatMenuModule)();\n};\n\nMatMenuModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatMenuModule\n});\nMatMenuModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [CommonModule, MatCommonModule, MatRippleModule, OverlayModule, CdkScrollableModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenuModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatCommonModule, MatRippleModule, OverlayModule],\n      exports: [CdkScrollableModule, MatCommonModule, MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n      declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n      providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenuBase, _MatMenuContentBase, _MatMenuTriggerBase, fadeInItems, matMenuAnimations, transformMenu };","map":{"version":3,"names":["i1","FocusKeyManager","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","coerceBooleanProperty","UP_ARROW","DOWN_ARROW","RIGHT_ARROW","LEFT_ARROW","ESCAPE","hasModifierKey","ENTER","SPACE","i0","InjectionToken","Directive","Inject","Component","ChangeDetectionStrategy","ViewEncapsulation","Optional","Input","QueryList","EventEmitter","TemplateRef","ContentChildren","ViewChild","ContentChild","Output","Self","NgModule","Subject","Subscription","merge","of","asapScheduler","startWith","switchMap","take","takeUntil","filter","delay","trigger","state","style","transition","animate","TemplatePortal","DomPortalOutlet","i2","DOCUMENT","CommonModule","i3","mixinDisableRipple","mixinDisabled","MatCommonModule","MatRippleModule","i1$1","Overlay","OverlayConfig","OverlayModule","normalizePassiveListenerOptions","i3$1","CdkScrollableModule","matMenuAnimations","transformMenu","opacity","transform","fadeInItems","MAT_MENU_CONTENT","_MatMenuContentBase","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_document","_changeDetectorRef","_attached","context","_a","_portal","detach","_outlet","createElement","element","elementRef","nativeElement","parentNode","insertBefore","outletElement","markForCheck","attach","next","isAttached","dispose","ɵfac","ComponentFactoryResolver","ApplicationRef","Injector","ViewContainerRef","ChangeDetectorRef","ɵdir","type","undefined","decorators","args","MatMenuContent","provide","useExisting","selector","providers","throwMatMenuInvalidPositionX","Error","throwMatMenuInvalidPositionY","throwMatMenuRecursiveError","MAT_MENU_PANEL","_MatMenuItemBase","MatMenuItem","_elementRef","_focusMonitor","_parentMenu","role","_hovered","_focused","_highlighted","_triggersSubmenu","addItem","call","origin","options","focusVia","_getHostElement","focus","monitor","stopMonitoring","removeItem","complete","disabled","event","preventDefault","stopPropagation","clone","cloneNode","icons","querySelectorAll","i","length","remove","textContent","trim","isHighlighted","activeElement","ElementRef","FocusMonitor","ɵcmp","NgIf","MatRipple","exportAs","inputs","host","changeDetection","OnPush","encapsulation","None","template","MAT_MENU_DEFAULT_OPTIONS","providedIn","factory","MAT_MENU_DEFAULT_OPTIONS_FACTORY","overlapTrigger","xPosition","yPosition","backdropClass","menuPanelUid","_MatMenuBase","_ngZone","_defaultOptions","_xPosition","_yPosition","_directDescendantItems","_tabSubscription","EMPTY","_classList","_panelAnimationState","_animationDone","overlayPanelClass","_overlapTrigger","_hasBackdrop","hasBackdrop","closed","close","panelId","value","ngDevMode","setPositionClasses","classes","previousPanelClass","_previousPanelClass","split","forEach","className","panelClass","_updateDirectDescendants","_keyManager","withWrap","withTypeAhead","withHomeAndEnd","tabOut","subscribe","emit","changes","pipe","items","map","item","focusedItem","updateActiveItem","itemsList","manager","activeItem","_hasFocus","toArray","index","Math","max","min","activeItemIndex","setActiveItem","setNextItemActive","destroy","unsubscribe","itemChanges","_item","keyCode","parentMenu","direction","setFocusOrigin","onKeydown","onStable","menuPanel","first","closest","contains","document","setFirstItemActive","depth","elevation","_baseElevation","newElevation","_elevationPrefix","customElevation","Object","keys","find","startsWith","_previousElevation","posX","posY","_isAnimating","toState","scrollTop","_allItems","reset","notifyOnChanges","NgZone","descendants","ariaLabel","ariaLabelledby","ariaDescribedby","templateRef","lazyContent","classList","MatMenu","ngZone","defaultOptions","changeDetectorRef","NgClass","animations","styles","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MENU_PANEL_TOP_PADDING","passiveEventListenerOptions","passive","_MatMenuTriggerBase","_overlay","_element","scrollStrategy","_menuItemInstance","_dir","_overlayRef","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_scrollStrategy","_parentMaterialMenu","addEventListener","triggersSubmenu","menu","v","_menu","reason","_destroyMenu","_handleHover","removeEventListener","closeMenu","openMenu","overlayRef","_createOverlay","overlayConfig","getConfig","positionStrategy","_setPosition","_getPortal","menuData","_menuClosingActions","_initMenu","_startAnimation","withLockedPosition","reapplyLastPosition","updatePosition","menuOpen","_resetAnimation","_setIsMenuOpen","dir","_setMenuElevation","focusFirstItem","setElevation","isOpen","_setHighlighted","config","_getOverlayConfig","_subscribeToPositions","create","keydownEvents","position","flexibleConnectedTo","withGrowAfterOpen","withTransformOriginOn","positionChanges","change","connectionPair","overlayX","overlayY","run","originX","originFallbackX","overlayFallbackY","originY","originFallbackY","overlayFallbackX","offsetY","_parentInnerPadding","firstItem","offsetTop","withPositions","backdrop","backdropClick","detachments","parentClose","hover","active","button","toggleMenu","Directionality","_deprecatedMatMenuTriggerFor","MatMenuTrigger","MatMenuModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@angular/material/fesm2015/menu.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/a11y';\nimport { FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Input, QueryList, EventEmitter, TemplateRef, ContentChildren, ViewChild, ContentChild, Output, Self, NgModule } from '@angular/core';\nimport { Subject, Subscription, merge, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, takeUntil, filter, delay } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i3 from '@angular/material/core';\nimport { mixinDisableRipple, mixinDisabled, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport * as i3$1 from '@angular/cdk/bidi';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nconst matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)',\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1)',\n        }))),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ]),\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\nclass _MatMenuContentBase {\n    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n        this._template = _template;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._document = _document;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Emits when the menu content has been attached. */\n        this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context = {}) {\n        var _a;\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n        const element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode.insertBefore(this._outlet.outletElement, element);\n        // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n        // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n        // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n        // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n        // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n        // @breaking-change 9.0.0 Make change detector ref required\n        (_a = this._changeDetectorRef) === null || _a === void 0 ? void 0 : _a.markForCheck();\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\n_MatMenuContentBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatMenuContentBase, deps: [{ token: i0.TemplateRef }, { token: i0.ComponentFactoryResolver }, { token: i0.ApplicationRef }, { token: i0.Injector }, { token: i0.ViewContainerRef }, { token: DOCUMENT }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\n_MatMenuContentBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: _MatMenuContentBase, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatMenuContentBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.TemplateRef }, { type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i0.Injector }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i0.ChangeDetectorRef }];\n    } });\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\nclass MatMenuContent extends _MatMenuContentBase {\n}\nMatMenuContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatMenuContent, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatMenuContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatMenuContent, selector: \"ng-template[matMenuContent]\", providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatMenuContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matMenuContent]',\n                    providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n    throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +\n        `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nconst _MatMenuItemBase = mixinDisableRipple(mixinDisabled(class {\n}));\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem extends _MatMenuItemBase {\n    constructor(_elementRef, _document, _focusMonitor, _parentMenu, _changeDetectorRef) {\n        var _a;\n        super();\n        this._elementRef = _elementRef;\n        this._document = _document;\n        this._focusMonitor = _focusMonitor;\n        this._parentMenu = _parentMenu;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** ARIA role for the menu item. */\n        this.role = 'menuitem';\n        /** Stream that emits when the menu item is hovered. */\n        this._hovered = new Subject();\n        /** Stream that emits when the menu item is focused. */\n        this._focused = new Subject();\n        /** Whether the menu item is highlighted. */\n        this._highlighted = false;\n        /** Whether the menu item acts as a trigger for a sub-menu. */\n        this._triggersSubmenu = false;\n        (_a = _parentMenu === null || _parentMenu === void 0 ? void 0 : _parentMenu.addItem) === null || _a === void 0 ? void 0 : _a.call(_parentMenu, this);\n    }\n    /** Focuses the menu item. */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n        this._focused.next(this);\n    }\n    ngAfterViewInit() {\n        if (this._focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            this._focusMonitor.monitor(this._elementRef, false);\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n        this._focused.complete();\n    }\n    /** Used to set the `tabindex`. */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Returns the host DOM element. */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        var _a;\n        const clone = this._elementRef.nativeElement.cloneNode(true);\n        const icons = clone.querySelectorAll('mat-icon, .material-icons');\n        // Strip away icons so they don't show up in the text.\n        for (let i = 0; i < icons.length; i++) {\n            icons[i].remove();\n        }\n        return ((_a = clone.textContent) === null || _a === void 0 ? void 0 : _a.trim()) || '';\n    }\n    _setHighlighted(isHighlighted) {\n        var _a;\n        // We need to mark this for check for the case where the content is coming from a\n        // `matMenuContent` whose change detection tree is at the declaration position,\n        // not the insertion position. See #23175.\n        // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n        this._highlighted = isHighlighted;\n        (_a = this._changeDetectorRef) === null || _a === void 0 ? void 0 : _a.markForCheck();\n    }\n    _hasFocus() {\n        return this._document && this._document.activeElement === this._getHostElement();\n    }\n}\nMatMenuItem.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatMenuItem, deps: [{ token: i0.ElementRef }, { token: DOCUMENT }, { token: i1.FocusMonitor }, { token: MAT_MENU_PANEL, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nMatMenuItem.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatMenuItem, selector: \"[mat-menu-item]\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", role: \"role\" }, host: { listeners: { \"click\": \"_checkDisabled($event)\", \"mouseenter\": \"_handleMouseEnter()\" }, properties: { \"attr.role\": \"role\", \"class.mat-menu-item\": \"true\", \"class.mat-menu-item-highlighted\": \"_highlighted\", \"class.mat-menu-item-submenu-trigger\": \"_triggersSubmenu\", \"attr.tabindex\": \"_getTabIndex()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.disabled\": \"disabled || null\" }, classAttribute: \"mat-focus-indicator\" }, exportAs: [\"matMenuItem\"], usesInheritance: true, ngImport: i0, template: \"<ng-content></ng-content>\\n<div class=\\\"mat-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\", dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatMenuItem, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-menu-item]', exportAs: 'matMenuItem', inputs: ['disabled', 'disableRipple'], host: {\n                        '[attr.role]': 'role',\n                        '[class.mat-menu-item]': 'true',\n                        '[class.mat-menu-item-highlighted]': '_highlighted',\n                        '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n                        '[attr.tabindex]': '_getTabIndex()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.disabled]': 'disabled || null',\n                        'class': 'mat-focus-indicator',\n                        '(click)': '_checkDisabled($event)',\n                        '(mouseenter)': '_handleMouseEnter()',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<ng-content></ng-content>\\n<div class=\\\"mat-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\" }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_MENU_PANEL]\n                    }, {\n                        type: Optional\n                    }] }, { type: i0.ChangeDetectorRef }];\n    }, propDecorators: { role: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\nlet menuPanelUid = 0;\n/** Base class with all of the `MatMenu` functionality. */\nclass _MatMenuBase {\n    constructor(_elementRef, _ngZone, _defaultOptions, \n    // @breaking-change 15.0.0 `_changeDetectorRef` to become a required parameter.\n    _changeDetectorRef) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._xPosition = this._defaultOptions.xPosition;\n        this._yPosition = this._defaultOptions.yPosition;\n        /** Only the direct descendant menu items. */\n        this._directDescendantItems = new QueryList();\n        /** Subscription to tab events on the menu panel */\n        this._tabSubscription = Subscription.EMPTY;\n        /** Config object to be passed into the menu's ngClass */\n        this._classList = {};\n        /** Current state of the panel animation. */\n        this._panelAnimationState = 'void';\n        /** Emits whenever an animation on the menu completes. */\n        this._animationDone = new Subject();\n        /** Class or list of classes to be added to the overlay panel. */\n        this.overlayPanelClass = this._defaultOptions.overlayPanelClass || '';\n        /** Class to be added to the backdrop element. */\n        this.backdropClass = this._defaultOptions.backdropClass;\n        this._overlapTrigger = this._defaultOptions.overlapTrigger;\n        this._hasBackdrop = this._defaultOptions.hasBackdrop;\n        /** Event emitted when the menu is closed. */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted when the menu is closed.\n         * @deprecated Switch to `closed` instead\n         * @breaking-change 8.0.0\n         */\n        this.close = this.closed;\n        this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n    }\n    /** Position of the menu in the X axis. */\n    get xPosition() {\n        return this._xPosition;\n    }\n    set xPosition(value) {\n        if (value !== 'before' &&\n            value !== 'after' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n    /** Position of the menu in the Y axis. */\n    get yPosition() {\n        return this._yPosition;\n    }\n    set yPosition(value) {\n        if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n    /** Whether the menu should overlap its trigger. */\n    get overlapTrigger() {\n        return this._overlapTrigger;\n    }\n    set overlapTrigger(value) {\n        this._overlapTrigger = coerceBooleanProperty(value);\n    }\n    /** Whether the menu has a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    set panelClass(classes) {\n        const previousPanelClass = this._previousPanelClass;\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className) => {\n                this._classList[className] = false;\n            });\n        }\n        this._previousPanelClass = classes;\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className) => {\n                this._classList[className] = true;\n            });\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    get classList() {\n        return this.panelClass;\n    }\n    set classList(classes) {\n        this.panelClass = classes;\n    }\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n    ngAfterContentInit() {\n        this._updateDirectDescendants();\n        this._keyManager = new FocusKeyManager(this._directDescendantItems)\n            .withWrap()\n            .withTypeAhead()\n            .withHomeAndEnd();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n        // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n        // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n        // is internal and we know that it gets completed on destroy.\n        this._directDescendantItems.changes\n            .pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._focused))))\n            .subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n        this._directDescendantItems.changes.subscribe((itemsList) => {\n            var _a;\n            // Move focus to another item, if the active item is removed from the list.\n            // We need to debounce the callback, because multiple items might be removed\n            // in quick succession.\n            const manager = this._keyManager;\n            if (this._panelAnimationState === 'enter' && ((_a = manager.activeItem) === null || _a === void 0 ? void 0 : _a._hasFocus())) {\n                const items = itemsList.toArray();\n                const index = Math.max(0, Math.min(items.length - 1, manager.activeItemIndex || 0));\n                if (items[index] && !items[index].disabled) {\n                    manager.setActiveItem(index);\n                }\n                else {\n                    manager.setNextItemActive();\n                }\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._directDescendantItems.destroy();\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered() {\n        // Coerce the `changes` property because Angular types it as `Observable<any>`\n        const itemChanges = this._directDescendantItems.changes;\n        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._hovered))));\n    }\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    addItem(_item) { }\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    removeItem(_item) { }\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    manager.setFocusOrigin('keyboard');\n                }\n                manager.onKeydown(event);\n                return;\n        }\n        // Don't allow the event to propagate if we've already handled it, or it may\n        // end up reaching other overlays that were opened earlier (see #22694).\n        event.stopPropagation();\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin = 'program') {\n        // Wait for `onStable` to ensure iOS VoiceOver screen reader focuses the first item (#24735).\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            let menuPanel = null;\n            if (this._directDescendantItems.length) {\n                // Because the `mat-menuPanel` is at the DOM insertion point, not inside the overlay, we don't\n                // have a nice way of getting a hold of the menuPanel panel. We can't use a `ViewChild` either\n                // because the panel is inside an `ng-template`. We work around it by starting from one of\n                // the items and walking up the DOM.\n                menuPanel = this._directDescendantItems.first._getHostElement().closest('[role=\"menu\"]');\n            }\n            // If an item in the menuPanel is already focused, avoid overriding the focus.\n            if (!menuPanel || !menuPanel.contains(document.activeElement)) {\n                const manager = this._keyManager;\n                manager.setFocusOrigin(origin).setFirstItemActive();\n                // If there's no active item at this point, it means that all the items are disabled.\n                // Move focus to the menuPanel panel so keyboard events like Escape still work. Also this will\n                // give _some_ feedback to screen readers.\n                if (!manager.activeItem && menuPanel) {\n                    menuPanel.focus();\n                }\n            }\n        });\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n    setElevation(depth) {\n        // The elevation starts at the base and increases by one for each level.\n        // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n        const elevation = Math.min(this._baseElevation + depth, 24);\n        const newElevation = `${this._elevationPrefix}${elevation}`;\n        const customElevation = Object.keys(this._classList).find(className => {\n            return className.startsWith(this._elevationPrefix);\n        });\n        if (!customElevation || customElevation === this._previousElevation) {\n            if (this._previousElevation) {\n                this._classList[this._previousElevation] = false;\n            }\n            this._classList[newElevation] = true;\n            this._previousElevation = newElevation;\n        }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n        var _a;\n        const classes = this._classList;\n        classes['mat-menu-before'] = posX === 'before';\n        classes['mat-menu-after'] = posX === 'after';\n        classes['mat-menu-above'] = posY === 'above';\n        classes['mat-menu-below'] = posY === 'below';\n        // @breaking-change 15.0.0 Remove null check for `_changeDetectorRef`.\n        (_a = this._changeDetectorRef) === null || _a === void 0 ? void 0 : _a.markForCheck();\n    }\n    /** Starts the enter animation. */\n    _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n    }\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n    }\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n    _onAnimationStart(event) {\n        this._isAnimating = true;\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n    _updateDirectDescendants() {\n        this._allItems.changes\n            .pipe(startWith(this._allItems))\n            .subscribe((items) => {\n            this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n            this._directDescendantItems.notifyOnChanges();\n        });\n    }\n}\n_MatMenuBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatMenuBase, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: MAT_MENU_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\n_MatMenuBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: _MatMenuBase, inputs: { backdropClass: \"backdropClass\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], xPosition: \"xPosition\", yPosition: \"yPosition\", overlapTrigger: \"overlapTrigger\", hasBackdrop: \"hasBackdrop\", panelClass: [\"class\", \"panelClass\"], classList: \"classList\" }, outputs: { closed: \"closed\", close: \"close\" }, queries: [{ propertyName: \"lazyContent\", first: true, predicate: MAT_MENU_CONTENT, descendants: true }, { propertyName: \"_allItems\", predicate: MatMenuItem, descendants: true }, { propertyName: \"items\", predicate: MatMenuItem }], viewQueries: [{ propertyName: \"templateRef\", first: true, predicate: TemplateRef, descendants: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatMenuBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_MENU_DEFAULT_OPTIONS]\n                    }] }, { type: i0.ChangeDetectorRef }];\n    }, propDecorators: { _allItems: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: true }]\n            }], backdropClass: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], xPosition: [{\n                type: Input\n            }], yPosition: [{\n                type: Input\n            }], templateRef: [{\n                type: ViewChild,\n                args: [TemplateRef]\n            }], items: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: false }]\n            }], lazyContent: [{\n                type: ContentChild,\n                args: [MAT_MENU_CONTENT]\n            }], overlapTrigger: [{\n                type: Input\n            }], hasBackdrop: [{\n                type: Input\n            }], panelClass: [{\n                type: Input,\n                args: ['class']\n            }], classList: [{\n                type: Input\n            }], closed: [{\n                type: Output\n            }], close: [{\n                type: Output\n            }] } });\n/** @docs-public MatMenu */\nclass MatMenu extends _MatMenuBase {\n    constructor(elementRef, ngZone, defaultOptions, changeDetectorRef) {\n        super(elementRef, ngZone, defaultOptions, changeDetectorRef);\n        this._elevationPrefix = 'mat-elevation-z';\n        this._baseElevation = 4;\n    }\n}\nMatMenu.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatMenu, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: MAT_MENU_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nMatMenu.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatMenu, selector: \"mat-menu\", host: { properties: { \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.aria-describedby\": \"null\" } }, providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], exportAs: [\"matMenu\"], usesInheritance: true, ngImport: i0, template: \"<ng-template>\\n  <div\\n    class=\\\"mat-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px;position:relative}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.mat-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-menu-submenu-icon{fill:CanvasText}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"], dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatMenu, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-menu', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'matMenu', host: {\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.aria-describedby]': 'null',\n                    }, animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], template: \"<ng-template>\\n  <div\\n    class=\\\"mat-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px;position:relative}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.mat-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-menu-submenu-icon{fill:CanvasText}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_MENU_DEFAULT_OPTIONS]\n                    }] }, { type: i0.ChangeDetectorRef }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Default top padding of the menu panel.\n * @deprecated No longer being used. Will be removed.\n * @breaking-change 15.0.0\n */\nconst MENU_PANEL_TOP_PADDING = 8;\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\nclass _MatMenuTriggerBase {\n    constructor(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu, \n    // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n    // tslint:disable-next-line: lightweight-tokens\n    _menuItemInstance, _dir, _focusMonitor, _ngZone) {\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._menuItemInstance = _menuItemInstance;\n        this._dir = _dir;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._overlayRef = null;\n        this._menuOpen = false;\n        this._closingActionsSubscription = Subscription.EMPTY;\n        this._hoverSubscription = Subscription.EMPTY;\n        this._menuCloseSubscription = Subscription.EMPTY;\n        /**\n         * Handles touch start events on the trigger.\n         * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n         */\n        this._handleTouchStart = (event) => {\n            if (!isFakeTouchstartFromScreenReader(event)) {\n                this._openedBy = 'touch';\n            }\n        };\n        // Tracking input type is necessary so it's possible to only auto-focus\n        // the first item of the list when the menu is opened via the keyboard\n        this._openedBy = undefined;\n        /**\n         * Whether focus should be restored when the menu is closed.\n         * Note that disabling this option can have accessibility implications\n         * and it's up to you to manage focus, if you decide to turn it off.\n         */\n        this.restoreFocus = true;\n        /** Event emitted when the associated menu is opened. */\n        this.menuOpened = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is opened.\n         * @deprecated Switch to `menuOpened` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuOpen = this.menuOpened;\n        /** Event emitted when the associated menu is closed. */\n        this.menuClosed = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is closed.\n         * @deprecated Switch to `menuClosed` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuClose = this.menuClosed;\n        this._scrollStrategy = scrollStrategy;\n        this._parentMaterialMenu = parentMenu instanceof _MatMenuBase ? parentMenu : undefined;\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        if (_menuItemInstance) {\n            _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n        }\n    }\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    get _deprecatedMatMenuTriggerFor() {\n        return this.menu;\n    }\n    set _deprecatedMatMenuTriggerFor(v) {\n        this.menu = v;\n    }\n    /** References the menu instance that the trigger is associated with. */\n    get menu() {\n        return this._menu;\n    }\n    set menu(menu) {\n        if (menu === this._menu) {\n            return;\n        }\n        this._menu = menu;\n        this._menuCloseSubscription.unsubscribe();\n        if (menu) {\n            if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatMenuRecursiveError();\n            }\n            this._menuCloseSubscription = menu.close.subscribe((reason) => {\n                this._destroyMenu(reason);\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n                    this._parentMaterialMenu.closed.emit(reason);\n                }\n            });\n        }\n    }\n    ngAfterContentInit() {\n        this._handleHover();\n    }\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        this._menuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n    /** Whether the menu is open. */\n    get menuOpen() {\n        return this._menuOpen;\n    }\n    /** The text direction of the containing app. */\n    get dir() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMaterialMenu);\n    }\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /** Opens the menu. */\n    openMenu() {\n        const menu = this.menu;\n        if (this._menuOpen || !menu) {\n            return;\n        }\n        const overlayRef = this._createOverlay(menu);\n        const overlayConfig = overlayRef.getConfig();\n        const positionStrategy = overlayConfig.positionStrategy;\n        this._setPosition(menu, positionStrategy);\n        overlayConfig.hasBackdrop =\n            menu.hasBackdrop == null ? !this.triggersSubmenu() : menu.hasBackdrop;\n        overlayRef.attach(this._getPortal(menu));\n        if (menu.lazyContent) {\n            menu.lazyContent.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n        this._initMenu(menu);\n        if (menu instanceof _MatMenuBase) {\n            menu._startAnimation();\n            menu._directDescendantItems.changes.pipe(takeUntil(menu.close)).subscribe(() => {\n                // Re-adjust the position without locking when the amount of items\n                // changes so that the overlay is allowed to pick a new optimal position.\n                positionStrategy.withLockedPosition(false).reapplyLastPosition();\n                positionStrategy.withLockedPosition(true);\n            });\n        }\n    }\n    /** Closes the menu. */\n    closeMenu() {\n        var _a;\n        (_a = this.menu) === null || _a === void 0 ? void 0 : _a.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Updates the position of the menu to ensure that it fits all options within the viewport.\n     */\n    updatePosition() {\n        var _a;\n        (_a = this._overlayRef) === null || _a === void 0 ? void 0 : _a.updatePosition();\n    }\n    /** Closes the menu and does the necessary cleanup. */\n    _destroyMenu(reason) {\n        var _a;\n        if (!this._overlayRef || !this.menuOpen) {\n            return;\n        }\n        const menu = this.menu;\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n        // Always restore focus if the user is navigating using the keyboard or the menu was opened\n        // programmatically. We don't restore for non-root triggers, because it can prevent focus\n        // from making it back to the root trigger when closing a long chain of menus by clicking\n        // on the backdrop.\n        if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n            this.focus(this._openedBy);\n        }\n        this._openedBy = undefined;\n        if (menu instanceof _MatMenuBase) {\n            menu._resetAnimation();\n            if (menu.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                menu._animationDone\n                    .pipe(filter(event => event.toState === 'void'), take(1), \n                // Interrupt if the content got re-attached.\n                takeUntil(menu.lazyContent._attached))\n                    .subscribe({\n                    next: () => menu.lazyContent.detach(),\n                    // No matter whether the content got re-attached, reset the menu.\n                    complete: () => this._setIsMenuOpen(false),\n                });\n            }\n            else {\n                this._setIsMenuOpen(false);\n            }\n        }\n        else {\n            this._setIsMenuOpen(false);\n            (_a = menu === null || menu === void 0 ? void 0 : menu.lazyContent) === null || _a === void 0 ? void 0 : _a.detach();\n        }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    _initMenu(menu) {\n        menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n        menu.direction = this.dir;\n        this._setMenuElevation(menu);\n        menu.focusFirstItem(this._openedBy || 'program');\n        this._setIsMenuOpen(true);\n    }\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n    _setMenuElevation(menu) {\n        if (menu.setElevation) {\n            let depth = 0;\n            let parentMenu = menu.parentMenu;\n            while (parentMenu) {\n                depth++;\n                parentMenu = parentMenu.parentMenu;\n            }\n            menu.setElevation(depth);\n        }\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    _setIsMenuOpen(isOpen) {\n        this._menuOpen = isOpen;\n        this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n        if (this.triggersSubmenu()) {\n            this._menuItemInstance._setHighlighted(isOpen);\n        }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    _createOverlay(menu) {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig(menu);\n            this._subscribeToPositions(menu, config.positionStrategy);\n            this._overlayRef = this._overlay.create(config);\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `MatMenuPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n        return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    _getOverlayConfig(menu) {\n        return new OverlayConfig({\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withGrowAfterOpen()\n                .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n            backdropClass: menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            panelClass: menu.overlayPanelClass,\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir,\n        });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    _subscribeToPositions(menu, position) {\n        if (menu.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                // @breaking-change 15.0.0 Remove null check for `ngZone`.\n                // `positionChanges` fires outside of the `ngZone` and `setPositionClasses` might be\n                // updating something in the view so we need to bring it back in.\n                if (this._ngZone) {\n                    this._ngZone.run(() => menu.setPositionClasses(posX, posY));\n                }\n                else {\n                    menu.setPositionClasses(posX, posY);\n                }\n            });\n        }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    _setPosition(menu, positionStrategy) {\n        let [originX, originFallbackX] = menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n        let [overlayY, overlayFallbackY] = menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        let offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            if (this._parentMaterialMenu) {\n                if (this._parentInnerPadding == null) {\n                    const firstItem = this._parentMaterialMenu.items.first;\n                    this._parentInnerPadding = firstItem ? firstItem._getHostElement().offsetTop : 0;\n                }\n                offsetY = overlayY === 'bottom' ? this._parentInnerPadding : -this._parentInnerPadding;\n            }\n        }\n        else if (!menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n        ]);\n    }\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    _menuClosingActions() {\n        const backdrop = this._overlayRef.backdropClick();\n        const detachments = this._overlayRef.detachments();\n        const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n        const hover = this._parentMaterialMenu\n            ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen))\n            : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : undefined;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    }\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Pressing enter on the trigger will trigger the click handler later.\n        if (keyCode === ENTER || keyCode === SPACE) {\n            this._openedBy = 'keyboard';\n        }\n        if (this.triggersSubmenu() &&\n            ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n                (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this._openedBy = 'keyboard';\n            this.openMenu();\n        }\n    }\n    /** Handles click events on the trigger. */\n    _handleClick(event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    }\n    /** Handles the cases where the user hovers over the trigger. */\n    _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n            return;\n        }\n        this._hoverSubscription = this._parentMaterialMenu\n            ._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler))\n            .subscribe(() => {\n            this._openedBy = 'mouse';\n            // If the same menu is used between multiple triggers, it might still be animating\n            // while the new trigger tries to re-open it. Wait for the animation to finish\n            // before doing so. Also interrupt if the user moves to another item.\n            if (this.menu instanceof _MatMenuBase && this.menu._isAnimating) {\n                // We need the `delay(0)` here in order to avoid\n                // 'changed after checked' errors in some cases. See #12194.\n                this.menu._animationDone\n                    .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered()))\n                    .subscribe(() => this.openMenu());\n            }\n            else {\n                this.openMenu();\n            }\n        });\n    }\n    /** Gets the portal that should be attached to the overlay. */\n    _getPortal(menu) {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== menu.templateRef) {\n            this._portal = new TemplatePortal(menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    }\n}\n_MatMenuTriggerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatMenuTriggerBase, deps: [{ token: i1$1.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: MAT_MENU_SCROLL_STRATEGY }, { token: MAT_MENU_PANEL, optional: true }, { token: MatMenuItem, optional: true, self: true }, { token: i3$1.Directionality, optional: true }, { token: i1.FocusMonitor }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\n_MatMenuTriggerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: _MatMenuTriggerBase, inputs: { _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"], menu: [\"matMenuTriggerFor\", \"menu\"], menuData: [\"matMenuTriggerData\", \"menuData\"], restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"] }, outputs: { menuOpened: \"menuOpened\", onMenuOpen: \"onMenuOpen\", menuClosed: \"menuClosed\", onMenuClose: \"onMenuClose\" }, host: { listeners: { \"click\": \"_handleClick($event)\", \"mousedown\": \"_handleMousedown($event)\", \"keydown\": \"_handleKeydown($event)\" }, properties: { \"attr.aria-haspopup\": \"menu ? \\\"menu\\\" : null\", \"attr.aria-expanded\": \"menuOpen || null\", \"attr.aria-controls\": \"menuOpen ? menu.panelId : null\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatMenuTriggerBase, decorators: [{\n            type: Directive,\n            args: [{\n                    host: {\n                        '[attr.aria-haspopup]': 'menu ? \"menu\" : null',\n                        '[attr.aria-expanded]': 'menuOpen || null',\n                        '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n                        '(click)': '_handleClick($event)',\n                        '(mousedown)': '_handleMousedown($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_MENU_SCROLL_STRATEGY]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_MENU_PANEL]\n                    }, {\n                        type: Optional\n                    }] }, { type: MatMenuItem, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Self\n                    }] }, { type: i3$1.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i1.FocusMonitor }, { type: i0.NgZone }];\n    }, propDecorators: { _deprecatedMatMenuTriggerFor: [{\n                type: Input,\n                args: ['mat-menu-trigger-for']\n            }], menu: [{\n                type: Input,\n                args: ['matMenuTriggerFor']\n            }], menuData: [{\n                type: Input,\n                args: ['matMenuTriggerData']\n            }], restoreFocus: [{\n                type: Input,\n                args: ['matMenuTriggerRestoreFocus']\n            }], menuOpened: [{\n                type: Output\n            }], onMenuOpen: [{\n                type: Output\n            }], menuClosed: [{\n                type: Output\n            }], onMenuClose: [{\n                type: Output\n            }] } });\n/** Directive applied to an element that should trigger a `mat-menu`. */\nclass MatMenuTrigger extends _MatMenuTriggerBase {\n}\nMatMenuTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatMenuTrigger, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatMenuTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatMenuTrigger, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", host: { classAttribute: \"mat-menu-trigger\" }, exportAs: [\"matMenuTrigger\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatMenuTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                    host: {\n                        'class': 'mat-menu-trigger',\n                    },\n                    exportAs: 'matMenuTrigger',\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatMenuModule {\n}\nMatMenuModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatMenuModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatMenuModule, declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent], imports: [CommonModule, MatCommonModule, MatRippleModule, OverlayModule], exports: [CdkScrollableModule,\n        MatCommonModule,\n        MatMenu,\n        MatMenuItem,\n        MatMenuTrigger,\n        MatMenuContent] });\nMatMenuModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatMenuModule, providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [CommonModule, MatCommonModule, MatRippleModule, OverlayModule, CdkScrollableModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatMenuModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatCommonModule, MatRippleModule, OverlayModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatCommonModule,\n                        MatMenu,\n                        MatMenuItem,\n                        MatMenuTrigger,\n                        MatMenuContent,\n                    ],\n                    declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n                    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenuBase, _MatMenuContentBase, _MatMenuTriggerBase, fadeInItems, matMenuAnimations, transformMenu };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _inherits from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport * as i3 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Inject, Optional, ViewChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i1 from '@angular/cdk/a11y';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\n\nvar _c0 = [\"input\"];\n\nvar _c1 = function _c1(a0) {\n  return {\n    enterDuration: a0\n  };\n};\n\nvar _c2 = [\"*\"];\nvar MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n  providedIn: 'root',\n  factory: function factory() {\n    return {\n      disableToggleValue: false\n    };\n  }\n}); // Increasing integer for generating unique ids for slide-toggle components.\n\nvar nextUniqueId = 0;\n/** @docs-private */\n\nvar MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatSlideToggle;\n  }),\n  multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\n\nvar MatSlideToggleChange = /*#__PURE__*/_createClass(function MatSlideToggleChange(\n/** The source MatSlideToggle of the event. */\nsource,\n/** The new `checked` value of the MatSlideToggle. */\nchecked) {\n  _classCallCheck(this, MatSlideToggleChange);\n\n  this.source = source;\n  this.checked = checked;\n}); // Boilerplate for applying mixins to MatSlideToggle.\n\n/** @docs-private */\n\n\nvar _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled( /*#__PURE__*/function () {\n  function _class(_elementRef) {\n    _classCallCheck(this, _class);\n\n    this._elementRef = _elementRef;\n  }\n\n  return _createClass(_class);\n}()))));\n\nvar _MatSlideToggleBase = /*#__PURE__*/function (_MatSlideToggleMixinB) {\n  _inherits(_MatSlideToggleBase, _MatSlideToggleMixinB);\n\n  var _super = _createSuper(_MatSlideToggleBase);\n\n  function _MatSlideToggleBase(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, animationMode, idPrefix) {\n    var _this;\n\n    _classCallCheck(this, _MatSlideToggleBase);\n\n    _this = _super.call(this, elementRef);\n    _this._focusMonitor = _focusMonitor;\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this.defaults = defaults;\n\n    _this._onChange = function (_) {};\n\n    _this._onTouched = function () {};\n\n    _this._required = false;\n    _this._checked = false;\n    /** Name value will be applied to the input element if present. */\n\n    _this.name = null;\n    /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n\n    _this.labelPosition = 'after';\n    /** Used to set the aria-label attribute on the underlying input element. */\n\n    _this.ariaLabel = null;\n    /** Used to set the aria-labelledby attribute on the underlying input element. */\n\n    _this.ariaLabelledby = null;\n    /** An event will be dispatched each time the slide-toggle changes its value. */\n\n    _this.change = new EventEmitter();\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\n     * the slide toggle's value has changed.\n     */\n\n    _this.toggleChange = new EventEmitter();\n    _this.tabIndex = parseInt(tabIndex) || 0;\n    _this.color = _this.defaultColor = defaults.color || 'accent';\n    _this._noopAnimations = animationMode === 'NoopAnimations';\n    _this.id = _this._uniqueId = \"\".concat(idPrefix).concat(++nextUniqueId);\n    return _this;\n  }\n  /** Whether the slide-toggle is required. */\n\n\n  _createClass(_MatSlideToggleBase, [{\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    },\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n    }\n    /** Whether the slide-toggle element is checked or not. */\n\n  }, {\n    key: \"checked\",\n    get: function get() {\n      return this._checked;\n    },\n    set: function set(value) {\n      this._checked = coerceBooleanProperty(value);\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Returns the unique id for the visual hidden input. */\n\n  }, {\n    key: \"inputId\",\n    get: function get() {\n      return \"\".concat(this.id || this._uniqueId, \"-input\");\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this2 = this;\n\n      this._focusMonitor.monitor(this._elementRef, true).subscribe(function (focusOrigin) {\n        if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n          _this2._focused = true;\n        } else if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's ng-touched) will cause a changed-after-checked error.\n          // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n          // telling the form control it has been touched until the next tick.\n          Promise.resolve().then(function () {\n            _this2._focused = false;\n\n            _this2._onTouched();\n\n            _this2._changeDetectorRef.markForCheck();\n          });\n        }\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Implemented as part of ControlValueAccessor. */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.checked = !!value;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /** Implemented as a part of ControlValueAccessor. */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Toggles the checked state of the slide-toggle. */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.checked = !this.checked;\n\n      this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      this._onChange(this.checked);\n\n      this.change.emit(this._createChangeEvent(this.checked));\n    }\n  }]);\n\n  return _MatSlideToggleBase;\n}(_MatSlideToggleMixinBase);\n\n_MatSlideToggleBase.ɵfac = function _MatSlideToggleBase_Factory(t) {\n  i0.ɵɵinvalidFactory();\n};\n\n_MatSlideToggleBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatSlideToggleBase,\n  inputs: {\n    name: \"name\",\n    id: \"id\",\n    labelPosition: \"labelPosition\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"],\n    required: \"required\",\n    checked: \"checked\"\n  },\n  outputs: {\n    change: \"change\",\n    toggleChange: \"toggleChange\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatSlideToggleBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.FocusMonitor\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined\n    }, {\n      type: undefined\n    }, {\n      type: undefined\n    }, {\n      type: undefined\n    }];\n  }, {\n    name: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    ariaDescribedby: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    required: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }],\n    toggleChange: [{\n      type: Output\n    }]\n  });\n})();\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n\n\nvar MatSlideToggle = /*#__PURE__*/function (_MatSlideToggleBase2) {\n  _inherits(MatSlideToggle, _MatSlideToggleBase2);\n\n  var _super2 = _createSuper(MatSlideToggle);\n\n  function MatSlideToggle(elementRef, focusMonitor, changeDetectorRef, tabIndex, defaults, animationMode) {\n    _classCallCheck(this, MatSlideToggle);\n\n    return _super2.call(this, elementRef, focusMonitor, changeDetectorRef, tabIndex, defaults, animationMode, 'mat-slide-toggle-');\n  }\n\n  _createClass(MatSlideToggle, [{\n    key: \"_createChangeEvent\",\n    value: function _createChangeEvent(isChecked) {\n      return new MatSlideToggleChange(this, isChecked);\n    }\n    /** Method being called whenever the underlying input emits a change event. */\n\n  }, {\n    key: \"_onChangeEvent\",\n    value: function _onChangeEvent(event) {\n      // We always have to stop propagation on the change event.\n      // Otherwise the change event, from the input element, will bubble up and\n      // emit its event object to the component's `change` output.\n      event.stopPropagation();\n      this.toggleChange.emit(); // When the slide toggle's config disables toggle change event by setting\n      // `disableToggleValue: true`, the slide toggle's value does not change, and the\n      // checked state of the underlying input needs to be changed back.\n\n      if (this.defaults.disableToggleValue) {\n        this._inputElement.nativeElement.checked = this.checked;\n        return;\n      } // Sync the value from the underlying input element with the component instance.\n\n\n      this.checked = this._inputElement.nativeElement.checked; // Emit our custom change event only if the underlying input emitted one. This ensures that\n      // there is no change event, when the checked state changes programmatically.\n\n      this._emitChangeEvent();\n    }\n    /** Method being called whenever the slide-toggle has been clicked. */\n\n  }, {\n    key: \"_onInputClick\",\n    value: function _onInputClick(event) {\n      // We have to stop propagation for click events on the visual hidden input element.\n      // By default, when a user clicks on a label element, a generated click event will be\n      // dispatched on the associated input element. Since we are using a label element as our\n      // root container, the click event on the `slide-toggle` will be executed twice.\n      // The real click event will bubble up, and the generated click event also tries to bubble up.\n      // This will lead to multiple click events.\n      // Preventing bubbling for the second event will solve that issue.\n      event.stopPropagation();\n    }\n    /** Focuses the slide-toggle. */\n\n  }, {\n    key: \"focus\",\n    value: function focus(options, origin) {\n      if (origin) {\n        this._focusMonitor.focusVia(this._inputElement, origin, options);\n      } else {\n        this._inputElement.nativeElement.focus(options);\n      }\n    }\n    /** Method being called whenever the label text changes. */\n\n  }, {\n    key: \"_onLabelTextChange\",\n    value: function _onLabelTextChange() {\n      // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n      // slide-toggle component will be only marked for check, but no actual change detection runs\n      // automatically. Instead of going back into the zone in order to trigger a change detection\n      // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n      // we only trigger an explicit change detection for the slide-toggle view and its children.\n      this._changeDetectorRef.detectChanges();\n    }\n  }]);\n\n  return MatSlideToggle;\n}(_MatSlideToggleBase);\n\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) {\n  return new (t || MatSlideToggle)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n\nMatSlideToggle.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatSlideToggle,\n  selectors: [[\"mat-slide-toggle\"]],\n  viewQuery: function MatSlideToggle_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-slide-toggle\"],\n  hostVars: 13,\n  hostBindings: function MatSlideToggle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx.id);\n      i0.ɵɵattribute(\"tabindex\", null)(\"aria-label\", null)(\"aria-labelledby\", null)(\"name\", null);\n      i0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._noopAnimations);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    color: \"color\",\n    tabIndex: \"tabIndex\"\n  },\n  exportAs: [\"matSlideToggle\"],\n  features: [i0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c2,\n  decls: 14,\n  vars: 20,\n  consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]],\n  template: function MatSlideToggle_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"label\", 0, 1)(2, \"span\", 2)(3, \"input\", 3, 4);\n      i0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_3_listener($event) {\n        return ctx._onChangeEvent($event);\n      })(\"click\", function MatSlideToggle_Template_input_click_3_listener($event) {\n        return ctx._onInputClick($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"span\", 5);\n      i0.ɵɵelement(6, \"span\", 6);\n      i0.ɵɵelementStart(7, \"span\", 7);\n      i0.ɵɵelement(8, \"span\", 8);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(9, \"span\", 9, 10);\n      i0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_9_listener() {\n        return ctx._onLabelTextChange();\n      });\n      i0.ɵɵelementStart(11, \"span\", 11);\n      i0.ɵɵtext(12, \"\\xA0\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵprojection(13);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      var _r0 = i0.ɵɵreference(1);\n\n      var _r2 = i0.ɵɵreference(10);\n\n      i0.ɵɵattribute(\"for\", ctx.inputId);\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r2.textContent || !_r2.textContent.trim());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n      i0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", i0.ɵɵpureFunction1(18, _c1, ctx._noopAnimations ? 0 : 150));\n    }\n  },\n  dependencies: [i2.MatRipple, i3.CdkObserveContent],\n  styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{-webkit-user-select:none;user-select:none;display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%;display:block}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.mat-slide-toggle-input:focus~.mat-slide-toggle-thumb-container .mat-focus-indicator::before{content:\\\"\\\"}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSlideToggle, [{\n    type: Component,\n    args: [{\n      selector: 'mat-slide-toggle',\n      exportAs: 'matSlideToggle',\n      host: {\n        'class': 'mat-slide-toggle',\n        '[id]': 'id',\n        // Needs to be removed since it causes some a11y issues (see #21266).\n        '[attr.tabindex]': 'null',\n        '[attr.aria-label]': 'null',\n        '[attr.aria-labelledby]': 'null',\n        '[attr.name]': 'null',\n        '[class.mat-checked]': 'checked',\n        '[class.mat-disabled]': 'disabled',\n        '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n        '[class._mat-animation-noopable]': '_noopAnimations'\n      },\n      providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n      inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <span class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <span class=\\\"mat-slide-toggle-thumb-container\\\">\\n      <span class=\\\"mat-slide-toggle-thumb\\\"></span>\\n      <span class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: _noopAnimations ? 0 : 150}\\\">\\n\\n        <span class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></span>\\n      </span>\\n    </span>\\n\\n  </span>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n      styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{-webkit-user-select:none;user-select:none;display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%;display:block}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.mat-slide-toggle-input:focus~.mat-slide-toggle-thumb-container .mat-focus-indicator::before{content:\\\"\\\"}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.FocusMonitor\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return MatSlideToggleRequiredValidator;\n  }),\n  multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\n\nvar MatSlideToggleRequiredValidator = /*#__PURE__*/function (_CheckboxRequiredVali) {\n  _inherits(MatSlideToggleRequiredValidator, _CheckboxRequiredVali);\n\n  var _super3 = _createSuper(MatSlideToggleRequiredValidator);\n\n  function MatSlideToggleRequiredValidator() {\n    _classCallCheck(this, MatSlideToggleRequiredValidator);\n\n    return _super3.apply(this, arguments);\n  }\n\n  return _createClass(MatSlideToggleRequiredValidator);\n}(CheckboxRequiredValidator);\n\nMatSlideToggleRequiredValidator.ɵfac = /* @__PURE__ */function () {\n  var ɵMatSlideToggleRequiredValidator_BaseFactory;\n  return function MatSlideToggleRequiredValidator_Factory(t) {\n    return (ɵMatSlideToggleRequiredValidator_BaseFactory || (ɵMatSlideToggleRequiredValidator_BaseFactory = i0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator)))(t || MatSlideToggleRequiredValidator);\n  };\n}();\n\nMatSlideToggleRequiredValidator.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatSlideToggleRequiredValidator,\n  selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n    type: Directive,\n    args: [{\n      selector: \"mat-slide-toggle[required][formControlName],\\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]\",\n      providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** This module is used by both original and MDC-based slide-toggle implementations. */\n\n\nvar _MatSlideToggleRequiredValidatorModule = /*#__PURE__*/_createClass(function _MatSlideToggleRequiredValidatorModule() {\n  _classCallCheck(this, _MatSlideToggleRequiredValidatorModule);\n});\n\n_MatSlideToggleRequiredValidatorModule.ɵfac = function _MatSlideToggleRequiredValidatorModule_Factory(t) {\n  return new (t || _MatSlideToggleRequiredValidatorModule)();\n};\n\n_MatSlideToggleRequiredValidatorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: _MatSlideToggleRequiredValidatorModule\n});\n_MatSlideToggleRequiredValidatorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n    type: NgModule,\n    args: [{\n      exports: [MatSlideToggleRequiredValidator],\n      declarations: [MatSlideToggleRequiredValidator]\n    }]\n  }], null, null);\n})();\n\nvar MatSlideToggleModule = /*#__PURE__*/_createClass(function MatSlideToggleModule() {\n  _classCallCheck(this, MatSlideToggleModule);\n});\n\nMatSlideToggleModule.ɵfac = function MatSlideToggleModule_Factory(t) {\n  return new (t || MatSlideToggleModule)();\n};\n\nMatSlideToggleModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatSlideToggleModule\n});\nMatSlideToggleModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [_MatSlideToggleRequiredValidatorModule, MatRippleModule, MatCommonModule, ObserversModule, _MatSlideToggleRequiredValidatorModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSlideToggleModule, [{\n    type: NgModule,\n    args: [{\n      imports: [_MatSlideToggleRequiredValidatorModule, MatRippleModule, MatCommonModule, ObserversModule],\n      exports: [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule],\n      declarations: [MatSlideToggle]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleBase, _MatSlideToggleRequiredValidatorModule };","map":{"version":3,"names":["i3","ObserversModule","i0","InjectionToken","forwardRef","EventEmitter","Directive","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","Attribute","Inject","Optional","ViewChild","NgModule","i2","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","MatRippleModule","MatCommonModule","coerceBooleanProperty","NG_VALUE_ACCESSOR","NG_VALIDATORS","CheckboxRequiredValidator","ANIMATION_MODULE_TYPE","i1","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","providedIn","factory","disableToggleValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","useExisting","MatSlideToggle","multi","MatSlideToggleChange","source","checked","_MatSlideToggleMixinBase","_elementRef","_MatSlideToggleBase","elementRef","_focusMonitor","_changeDetectorRef","tabIndex","defaults","animationMode","idPrefix","_onChange","_","_onTouched","_required","_checked","name","labelPosition","ariaLabel","ariaLabelledby","change","toggleChange","parseInt","color","defaultColor","_noopAnimations","id","_uniqueId","value","markForCheck","monitor","subscribe","focusOrigin","_focused","Promise","resolve","then","stopMonitoring","fn","isDisabled","disabled","emit","_createChangeEvent","ɵfac","ɵdir","type","ElementRef","FocusMonitor","ChangeDetectorRef","undefined","args","ariaDescribedby","required","focusMonitor","changeDetectorRef","isChecked","event","stopPropagation","_inputElement","nativeElement","_emitChangeEvent","options","origin","focusVia","focus","detectChanges","ɵcmp","MatRipple","CdkObserveContent","selector","exportAs","host","providers","inputs","encapsulation","None","changeDetection","OnPush","template","styles","decorators","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","MatSlideToggleRequiredValidator","_MatSlideToggleRequiredValidatorModule","ɵmod","ɵinj","exports","declarations","MatSlideToggleModule","imports"],"sources":["C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@angular/material/fesm2015/slide-toggle.mjs"],"sourcesContent":["import * as i3 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Inject, Optional, ViewChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i1 from '@angular/cdk/a11y';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({ disableToggleValue: false }),\n});\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n/** @docs-private */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlideToggle),\n    multi: true,\n};\n/** Change event object emitted by a MatSlideToggle. */\nclass MatSlideToggleChange {\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}))));\nclass _MatSlideToggleBase extends _MatSlideToggleMixinBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, animationMode, idPrefix) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.defaults = defaults;\n        this._onChange = (_) => { };\n        this._onTouched = () => { };\n        this._required = false;\n        this._checked = false;\n        /** Name value will be applied to the input element if present. */\n        this.name = null;\n        /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n        this.labelPosition = 'after';\n        /** Used to set the aria-label attribute on the underlying input element. */\n        this.ariaLabel = null;\n        /** Used to set the aria-labelledby attribute on the underlying input element. */\n        this.ariaLabelledby = null;\n        /** An event will be dispatched each time the slide-toggle changes its value. */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        this.toggleChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.color = this.defaultColor = defaults.color || 'accent';\n        this._noopAnimations = animationMode === 'NoopAnimations';\n        this.id = this._uniqueId = `${idPrefix}${++nextUniqueId}`;\n    }\n    /** Whether the slide-toggle is required. */\n    get required() {\n        return this._required;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Whether the slide-toggle element is checked or not. */\n    get checked() {\n        return this._checked;\n    }\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() {\n        return `${this.id || this._uniqueId}-input`;\n    }\n    ngAfterContentInit() {\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                this._focused = true;\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's ng-touched) will cause a changed-after-checked error.\n                // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n                // telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => {\n                    this._focused = false;\n                    this._onTouched();\n                    this._changeDetectorRef.markForCheck();\n                });\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Toggles the checked state of the slide-toggle. */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(this._createChangeEvent(this.checked));\n    }\n}\n_MatSlideToggleBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatSlideToggleBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatSlideToggleBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: _MatSlideToggleBase, inputs: { name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatSlideToggleBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FocusMonitor }, { type: i0.ChangeDetectorRef }, { type: undefined }, { type: undefined }, { type: undefined }, { type: undefined }]; }, propDecorators: { name: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], required: [{\n                type: Input\n            }], checked: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }], toggleChange: [{\n                type: Output\n            }] } });\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nclass MatSlideToggle extends _MatSlideToggleBase {\n    constructor(elementRef, focusMonitor, changeDetectorRef, tabIndex, defaults, animationMode) {\n        super(elementRef, focusMonitor, changeDetectorRef, tabIndex, defaults, animationMode, 'mat-slide-toggle-');\n    }\n    _createChangeEvent(isChecked) {\n        return new MatSlideToggleChange(this, isChecked);\n    }\n    /** Method being called whenever the underlying input emits a change event. */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /** Method being called whenever the slide-toggle has been clicked. */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /** Focuses the slide-toggle. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSlideToggle, deps: [{ token: i0.ElementRef }, { token: i1.FocusMonitor }, { token: i0.ChangeDetectorRef }, { token: 'tabindex', attribute: true }, { token: MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatSlideToggle.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatSlideToggle, selector: \"mat-slide-toggle\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\" }, host: { properties: { \"id\": \"id\", \"attr.tabindex\": \"null\", \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.name\": \"null\", \"class.mat-checked\": \"checked\", \"class.mat-disabled\": \"disabled\", \"class.mat-slide-toggle-label-before\": \"labelPosition == \\\"before\\\"\", \"class._mat-animation-noopable\": \"_noopAnimations\" }, classAttribute: \"mat-slide-toggle\" }, providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR], viewQueries: [{ propertyName: \"_inputElement\", first: true, predicate: [\"input\"], descendants: true }], exportAs: [\"matSlideToggle\"], usesInheritance: true, ngImport: i0, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <span class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <span class=\\\"mat-slide-toggle-thumb-container\\\">\\n      <span class=\\\"mat-slide-toggle-thumb\\\"></span>\\n      <span class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: _noopAnimations ? 0 : 150}\\\">\\n\\n        <span class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></span>\\n      </span>\\n    </span>\\n\\n  </span>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{-webkit-user-select:none;user-select:none;display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%;display:block}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.mat-slide-toggle-input:focus~.mat-slide-toggle-thumb-container .mat-focus-indicator::before{content:\\\"\\\"}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}\"], dependencies: [{ kind: \"directive\", type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { kind: \"directive\", type: i3.CdkObserveContent, selector: \"[cdkObserveContent]\", inputs: [\"cdkObserveContentDisabled\", \"debounce\"], outputs: [\"cdkObserveContent\"], exportAs: [\"cdkObserveContent\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSlideToggle, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-slide-toggle', exportAs: 'matSlideToggle', host: {\n                        'class': 'mat-slide-toggle',\n                        '[id]': 'id',\n                        // Needs to be removed since it causes some a11y issues (see #21266).\n                        '[attr.tabindex]': 'null',\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.name]': 'null',\n                        '[class.mat-checked]': 'checked',\n                        '[class.mat-disabled]': 'disabled',\n                        '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                        '[class._mat-animation-noopable]': '_noopAnimations',\n                    }, providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR], inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <span class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <span class=\\\"mat-slide-toggle-thumb-container\\\">\\n      <span class=\\\"mat-slide-toggle-thumb\\\"></span>\\n      <span class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: _noopAnimations ? 0 : 150}\\\">\\n\\n        <span class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></span>\\n      </span>\\n    </span>\\n\\n  </span>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{-webkit-user-select:none;user-select:none;display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%;display:block}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.mat-slide-toggle-input:focus~.mat-slide-toggle-thumb-container .mat-focus-indicator::before{content:\\\"\\\"}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.FocusMonitor }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { _inputElement: [{\n                type: ViewChild,\n                args: ['input']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n    multi: true,\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSlideToggleRequiredValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatSlideToggleRequiredValidator.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatSlideToggleRequiredValidator, selector: \"mat-slide-toggle[required][formControlName],\\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]\", providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSlideToggleRequiredValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                    providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatSlideToggleRequiredValidatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n_MatSlideToggleRequiredValidatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatSlideToggleRequiredValidatorModule, declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] });\n_MatSlideToggleRequiredValidatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatSlideToggleRequiredValidatorModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatSlideToggleRequiredValidatorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [MatSlideToggleRequiredValidator],\n                    declarations: [MatSlideToggleRequiredValidator],\n                }]\n        }] });\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSlideToggleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSlideToggleModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSlideToggleModule, declarations: [MatSlideToggle], imports: [_MatSlideToggleRequiredValidatorModule, MatRippleModule,\n        MatCommonModule,\n        ObserversModule], exports: [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule] });\nMatSlideToggleModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSlideToggleModule, imports: [_MatSlideToggleRequiredValidatorModule,\n        MatRippleModule,\n        MatCommonModule,\n        ObserversModule, _MatSlideToggleRequiredValidatorModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSlideToggleModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        _MatSlideToggleRequiredValidatorModule,\n                        MatRippleModule,\n                        MatCommonModule,\n                        ObserversModule,\n                    ],\n                    exports: [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule],\n                    declarations: [MatSlideToggle],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleBase, _MatSlideToggleRequiredValidatorModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _inherits from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { CdkDialogContainer, Dialog, DialogConfig, DialogModule } from '@angular/cdk/dialog';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i4 from '@angular/cdk/portal';\nimport { PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, Optional, Inject, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injectable, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Subject, merge, defer } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { trigger, state, style, transition, group, animate, query, animateChild } from '@angular/animations';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Default parameters for the animation for backwards compatibility.\n * @docs-private\n */\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) {}\n\nvar defaultParams = {\n  params: {\n    enterAnimationDuration: '150ms',\n    exitAnimationDuration: '75ms'\n  }\n};\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\n\nvar matDialogAnimations = {\n  /** Animation that is applied on the dialog container by default. */\n  dialogContainer: trigger('dialogContainer', [// Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({\n    opacity: 0,\n    transform: 'scale(0.7)'\n  })), state('enter', style({\n    transform: 'none'\n  })), transition('* => enter', group([animate('{{enterAnimationDuration}} cubic-bezier(0, 0, 0.2, 1)', style({\n    transform: 'none',\n    opacity: 1\n  })), query('@*', animateChild(), {\n    optional: true\n  })]), defaultParams), transition('* => void, * => exit', group([animate('{{exitAnimationDuration}} cubic-bezier(0.4, 0.0, 0.2, 1)', style({\n    opacity: 0\n  })), query('@*', animateChild(), {\n    optional: true\n  })]), defaultParams)])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\n\nvar MatDialogConfig = /*#__PURE__*/_createClass(function MatDialogConfig() {\n  _classCallCheck(this, MatDialogConfig);\n\n  /** The ARIA role of the dialog element. */\n  this.role = 'dialog';\n  /** Custom class for the overlay pane. */\n\n  this.panelClass = '';\n  /** Whether the dialog has a backdrop. */\n\n  this.hasBackdrop = true;\n  /** Custom class for the backdrop. */\n\n  this.backdropClass = '';\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n\n  this.disableClose = false;\n  /** Width of the dialog. */\n\n  this.width = '';\n  /** Height of the dialog. */\n\n  this.height = '';\n  /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n\n  this.maxWidth = '80vw';\n  /** Data being injected into the child component. */\n\n  this.data = null;\n  /** ID of the element that describes the dialog. */\n\n  this.ariaDescribedBy = null;\n  /** ID of the element that labels the dialog. */\n\n  this.ariaLabelledBy = null;\n  /** Aria label to assign to the dialog element. */\n\n  this.ariaLabel = null;\n  /**\n   * Where the dialog should focus on open.\n   * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n   * AutoFocusTarget instead.\n   */\n\n  this.autoFocus = 'first-tabbable';\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n\n  this.restoreFocus = true;\n  /** Whether to wait for the opening animation to finish before trapping focus. */\n\n  this.delayFocusTrap = true;\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n\n  this.closeOnNavigation = true;\n  /** Duration of the enter animation. Has to be a valid CSS value (e.g. 100ms). */\n\n  this.enterAnimationDuration = defaultParams.params.enterAnimationDuration;\n  /** Duration of the exit animation. Has to be a valid CSS value (e.g. 50ms). */\n\n  this.exitAnimationDuration = defaultParams.params.exitAnimationDuration; // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n});\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\n// tslint:disable-next-line:validate-decorators\n\n\nvar _MatDialogContainerBase = /*#__PURE__*/function (_CdkDialogContainer) {\n  _inherits(_MatDialogContainerBase, _CdkDialogContainer);\n\n  var _super = _createSuper(_MatDialogContainerBase);\n\n  function _MatDialogContainerBase(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor) {\n    var _this;\n\n    _classCallCheck(this, _MatDialogContainerBase);\n\n    _this = _super.call(this, elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor);\n    /** Emits when an animation state changes. */\n\n    _this._animationStateChanged = new EventEmitter();\n    return _this;\n  }\n\n  _createClass(_MatDialogContainerBase, [{\n    key: \"_captureInitialFocus\",\n    value: function _captureInitialFocus() {\n      if (!this._config.delayFocusTrap) {\n        this._trapFocus();\n      }\n    }\n    /**\n     * Callback for when the open dialog animation has finished. Intended to\n     * be called by sub-classes that use different animation implementations.\n     */\n\n  }, {\n    key: \"_openAnimationDone\",\n    value: function _openAnimationDone(totalTime) {\n      if (this._config.delayFocusTrap) {\n        this._trapFocus();\n      }\n\n      this._animationStateChanged.next({\n        state: 'opened',\n        totalTime: totalTime\n      });\n    }\n  }]);\n\n  return _MatDialogContainerBase;\n}(CdkDialogContainer);\n\n_MatDialogContainerBase.ɵfac = function _MatDialogContainerBase_Factory(t) {\n  return new (t || _MatDialogContainerBase)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusTrapFactory), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(MatDialogConfig), i0.ɵɵdirectiveInject(i1.InteractivityChecker), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1$1.OverlayRef), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n};\n\n_MatDialogContainerBase.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: _MatDialogContainerBase,\n  selectors: [[\"ng-component\"]],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function _MatDialogContainerBase_Template(rf, ctx) {},\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatDialogContainerBase, [{\n    type: Component,\n    args: [{\n      template: ''\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MatDialogConfig\n    }, {\n      type: i1.InteractivityChecker\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1$1.OverlayRef\n    }, {\n      type: i1.FocusMonitor\n    }];\n  }, null);\n})();\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n\n\nvar MatDialogContainer = /*#__PURE__*/function (_MatDialogContainerBa) {\n  _inherits(MatDialogContainer, _MatDialogContainerBa);\n\n  var _super2 = _createSuper(MatDialogContainer);\n\n  function MatDialogContainer(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, _changeDetectorRef, focusMonitor) {\n    var _this2;\n\n    _classCallCheck(this, MatDialogContainer);\n\n    _this2 = _super2.call(this, elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, focusMonitor);\n    _this2._changeDetectorRef = _changeDetectorRef;\n    /** State of the dialog animation. */\n\n    _this2._state = 'enter';\n    return _this2;\n  }\n  /** Callback, invoked whenever an animation on the host completes. */\n\n\n  _createClass(MatDialogContainer, [{\n    key: \"_onAnimationDone\",\n    value: function _onAnimationDone(_ref2) {\n      var toState = _ref2.toState,\n          totalTime = _ref2.totalTime;\n\n      if (toState === 'enter') {\n        this._openAnimationDone(totalTime);\n      } else if (toState === 'exit') {\n        this._animationStateChanged.next({\n          state: 'closed',\n          totalTime: totalTime\n        });\n      }\n    }\n    /** Callback, invoked when an animation on the host starts. */\n\n  }, {\n    key: \"_onAnimationStart\",\n    value: function _onAnimationStart(_ref3) {\n      var toState = _ref3.toState,\n          totalTime = _ref3.totalTime;\n\n      if (toState === 'enter') {\n        this._animationStateChanged.next({\n          state: 'opening',\n          totalTime: totalTime\n        });\n      } else if (toState === 'exit' || toState === 'void') {\n        this._animationStateChanged.next({\n          state: 'closing',\n          totalTime: totalTime\n        });\n      }\n    }\n    /** Starts the dialog exit animation. */\n\n  }, {\n    key: \"_startExitAnimation\",\n    value: function _startExitAnimation() {\n      this._state = 'exit'; // Mark the container for check so it can react if the\n      // view container is using OnPush change detection.\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }, {\n    key: \"_getAnimationState\",\n    value: function _getAnimationState() {\n      return {\n        value: this._state,\n        params: {\n          'enterAnimationDuration': this._config.enterAnimationDuration || defaultParams.params.enterAnimationDuration,\n          'exitAnimationDuration': this._config.exitAnimationDuration || defaultParams.params.exitAnimationDuration\n        }\n      };\n    }\n  }]);\n\n  return MatDialogContainer;\n}(_MatDialogContainerBase);\n\nMatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) {\n  return new (t || MatDialogContainer)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusTrapFactory), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(MatDialogConfig), i0.ɵɵdirectiveInject(i1.InteractivityChecker), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1$1.OverlayRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n};\n\nMatDialogContainer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatDialogContainer,\n  selectors: [[\"mat-dialog-container\"]],\n  hostAttrs: [\"tabindex\", \"-1\", 1, \"mat-dialog-container\"],\n  hostVars: 7,\n  hostBindings: function MatDialogContainer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) {\n        return ctx._onAnimationStart($event);\n      })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) {\n        return ctx._onAnimationDone($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx._config.id);\n      i0.ɵɵattribute(\"aria-modal\", ctx._config.ariaModal)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n      i0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._getAnimationState());\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkPortalOutlet\", \"\"]],\n  template: function MatDialogContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    }\n  },\n  dependencies: [i4.CdkPortalOutlet],\n  styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions.mat-dialog-actions-align-center,.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions.mat-dialog-actions-align-end,.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matDialogAnimations.dialogContainer]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-dialog-container',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      animations: [matDialogAnimations.dialogContainer],\n      host: {\n        'class': 'mat-dialog-container',\n        'tabindex': '-1',\n        '[attr.aria-modal]': '_config.ariaModal',\n        '[id]': '_config.id',\n        '[attr.role]': '_config.role',\n        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n        '[attr.aria-label]': '_config.ariaLabel',\n        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n        '[@dialogContainer]': \"_getAnimationState()\",\n        '(@dialogContainer.start)': '_onAnimationStart($event)',\n        '(@dialogContainer.done)': '_onAnimationDone($event)'\n      },\n      template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n      styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions.mat-dialog-actions-align-center,.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions.mat-dialog-actions-align-end,.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MatDialogConfig\n    }, {\n      type: i1.InteractivityChecker\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1$1.OverlayRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.FocusMonitor\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\n\n\nvar MatDialogRef = /*#__PURE__*/function () {\n  function MatDialogRef(_ref, config, _containerInstance) {\n    var _this3 = this;\n\n    _classCallCheck(this, MatDialogRef);\n\n    this._ref = _ref;\n    this._containerInstance = _containerInstance;\n    /** Subject for notifying the user that the dialog has finished opening. */\n\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the dialog has started closing. */\n\n    this._beforeClosed = new Subject();\n    /** Current state of the dialog. */\n\n    this._state = 0\n    /* MatDialogState.OPEN */\n    ;\n    this.disableClose = config.disableClose;\n    this.id = _ref.id; // Emit when opening animation completes\n\n    _containerInstance._animationStateChanged.pipe(filter(function (event) {\n      return event.state === 'opened';\n    }), take(1)).subscribe(function () {\n      _this3._afterOpened.next();\n\n      _this3._afterOpened.complete();\n    }); // Dispose overlay when closing animation is complete\n\n\n    _containerInstance._animationStateChanged.pipe(filter(function (event) {\n      return event.state === 'closed';\n    }), take(1)).subscribe(function () {\n      clearTimeout(_this3._closeFallbackTimeout);\n\n      _this3._finishDialogClose();\n    });\n\n    _ref.overlayRef.detachments().subscribe(function () {\n      _this3._beforeClosed.next(_this3._result);\n\n      _this3._beforeClosed.complete();\n\n      _this3._finishDialogClose();\n    });\n\n    merge(this.backdropClick(), this.keydownEvents().pipe(filter(function (event) {\n      return event.keyCode === ESCAPE && !_this3.disableClose && !hasModifierKey(event);\n    }))).subscribe(function (event) {\n      if (!_this3.disableClose) {\n        event.preventDefault();\n\n        _closeDialogVia(_this3, event.type === 'keydown' ? 'keyboard' : 'mouse');\n      }\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n\n\n  _createClass(MatDialogRef, [{\n    key: \"close\",\n    value: function close(dialogResult) {\n      var _this4 = this;\n\n      this._result = dialogResult; // Transition the backdrop in parallel to the dialog.\n\n      this._containerInstance._animationStateChanged.pipe(filter(function (event) {\n        return event.state === 'closing';\n      }), take(1)).subscribe(function (event) {\n        _this4._beforeClosed.next(dialogResult);\n\n        _this4._beforeClosed.complete();\n\n        _this4._ref.overlayRef.detachBackdrop(); // The logic that disposes of the overlay depends on the exit animation completing, however\n        // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n        // timeout which will clean everything up if the animation hasn't fired within the specified\n        // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n        // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n\n\n        _this4._closeFallbackTimeout = setTimeout(function () {\n          return _this4._finishDialogClose();\n        }, event.totalTime + 100);\n      });\n\n      this._state = 1\n      /* MatDialogState.CLOSING */\n      ;\n\n      this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n\n  }, {\n    key: \"afterOpened\",\n    value: function afterOpened() {\n      return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n\n  }, {\n    key: \"afterClosed\",\n    value: function afterClosed() {\n      return this._ref.closed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n\n  }, {\n    key: \"beforeClosed\",\n    value: function beforeClosed() {\n      return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n\n  }, {\n    key: \"backdropClick\",\n    value: function backdropClick() {\n      return this._ref.backdropClick;\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n\n  }, {\n    key: \"keydownEvents\",\n    value: function keydownEvents() {\n      return this._ref.keydownEvents;\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition(position) {\n      var strategy = this._ref.config.positionStrategy;\n\n      if (position && (position.left || position.right)) {\n        position.left ? strategy.left(position.left) : strategy.right(position.right);\n      } else {\n        strategy.centerHorizontally();\n      }\n\n      if (position && (position.top || position.bottom)) {\n        position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n      } else {\n        strategy.centerVertically();\n      }\n\n      this._ref.updatePosition();\n\n      return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n\n  }, {\n    key: \"updateSize\",\n    value: function updateSize() {\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      this._ref.updateSize(width, height);\n\n      return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n\n  }, {\n    key: \"addPanelClass\",\n    value: function addPanelClass(classes) {\n      this._ref.addPanelClass(classes);\n\n      return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n\n  }, {\n    key: \"removePanelClass\",\n    value: function removePanelClass(classes) {\n      this._ref.removePanelClass(classes);\n\n      return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n\n  }, {\n    key: \"_finishDialogClose\",\n    value: function _finishDialogClose() {\n      this._state = 2\n      /* MatDialogState.CLOSED */\n      ;\n\n      this._ref.close(this._result, {\n        focusOrigin: this._closeInteractionType\n      });\n\n      this.componentInstance = null;\n    }\n  }]);\n\n  return MatDialogRef;\n}();\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\n\n\nfunction _closeDialogVia(ref, interactionType, result) {\n  ref._closeInteractionType = interactionType;\n  return ref.close(result);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\n\n\nvar MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\n\nvar MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\n\nvar MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.block();\n  };\n}\n/** @docs-private */\n\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.block();\n  };\n}\n/** @docs-private */\n\n\nvar MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n}; // Counter for unique dialog ids.\n\nvar uniqueId = 0;\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\n\nvar _MatDialogBase = /*#__PURE__*/function () {\n  function _MatDialogBase(_overlay, injector, _defaultOptions, _parentDialog,\n  /**\n   * @deprecated No longer used. To be removed.\n   * @breaking-change 15.0.0\n   */\n  _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken,\n  /**\n   * @deprecated No longer used. To be removed.\n   * @breaking-change 14.0.0\n   */\n  _animationMode) {\n    var _this5 = this;\n\n    _classCallCheck(this, _MatDialogBase);\n\n    this._overlay = _overlay;\n    this._defaultOptions = _defaultOptions;\n    this._parentDialog = _parentDialog;\n    this._dialogRefConstructor = _dialogRefConstructor;\n    this._dialogContainerType = _dialogContainerType;\n    this._dialogDataToken = _dialogDataToken;\n    this._openDialogsAtThisLevel = [];\n    this._afterAllClosedAtThisLevel = new Subject();\n    this._afterOpenedAtThisLevel = new Subject();\n    this._idPrefix = 'mat-dialog-';\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n\n    this.afterAllClosed = defer(function () {\n      return _this5.openDialogs.length ? _this5._getAfterAllClosed() : _this5._getAfterAllClosed().pipe(startWith(undefined));\n    });\n    this._scrollStrategy = scrollStrategy;\n    this._dialog = injector.get(Dialog);\n  }\n  /** Keeps track of the currently-open dialogs. */\n\n\n  _createClass(_MatDialogBase, [{\n    key: \"openDialogs\",\n    get: function get() {\n      return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n\n  }, {\n    key: \"afterOpened\",\n    get: function get() {\n      return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n  }, {\n    key: \"_getAfterAllClosed\",\n    value: function _getAfterAllClosed() {\n      var parent = this._parentDialog;\n      return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n  }, {\n    key: \"open\",\n    value: function open(componentOrTemplateRef, config) {\n      var _this6 = this;\n\n      var dialogRef;\n      config = Object.assign(Object.assign({}, this._defaultOptions || new MatDialogConfig()), config);\n      config.id = config.id || \"\".concat(this._idPrefix).concat(uniqueId++);\n      config.scrollStrategy = config.scrollStrategy || this._scrollStrategy();\n\n      var cdkRef = this._dialog.open(componentOrTemplateRef, Object.assign(Object.assign({}, config), {\n        positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\n        // Disable closing since we need to sync it up to the animation ourselves.\n        disableClose: true,\n        // Disable closing on destroy, because this service cleans up its open dialogs as well.\n        // We want to do the cleanup here, rather than the CDK service, because the CDK destroys\n        // the dialogs immediately whereas we want it to wait for the animations to finish.\n        closeOnDestroy: false,\n        container: {\n          type: this._dialogContainerType,\n          providers: function providers() {\n            return [// Provide our config as the CDK config as well since it has the same interface as the\n            // CDK one, but it contains the actual values passed in by the user for things like\n            // `disableClose` which we disable for the CDK dialog since we handle it ourselves.\n            {\n              provide: MatDialogConfig,\n              useValue: config\n            }, {\n              provide: DialogConfig,\n              useValue: config\n            }];\n          }\n        },\n        templateContext: function templateContext() {\n          return {\n            dialogRef: dialogRef\n          };\n        },\n        providers: function providers(ref, cdkConfig, dialogContainer) {\n          dialogRef = new _this6._dialogRefConstructor(ref, config, dialogContainer);\n          dialogRef.updatePosition(config === null || config === void 0 ? void 0 : config.position);\n          return [{\n            provide: _this6._dialogContainerType,\n            useValue: dialogContainer\n          }, {\n            provide: _this6._dialogDataToken,\n            useValue: cdkConfig.data\n          }, {\n            provide: _this6._dialogRefConstructor,\n            useValue: dialogRef\n          }];\n        }\n      })); // This can't be assigned in the `providers` callback, because\n      // the instance hasn't been assigned to the CDK ref yet.\n\n\n      dialogRef.componentInstance = cdkRef.componentInstance;\n      this.openDialogs.push(dialogRef);\n      this.afterOpened.next(dialogRef);\n      dialogRef.afterClosed().subscribe(function () {\n        var index = _this6.openDialogs.indexOf(dialogRef);\n\n        if (index > -1) {\n          _this6.openDialogs.splice(index, 1);\n\n          if (!_this6.openDialogs.length) {\n            _this6._getAfterAllClosed().next();\n          }\n        }\n      });\n      return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n\n  }, {\n    key: \"closeAll\",\n    value: function closeAll() {\n      this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n\n  }, {\n    key: \"getDialogById\",\n    value: function getDialogById(id) {\n      return this.openDialogs.find(function (dialog) {\n        return dialog.id === id;\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // Only close the dialogs at this level on destroy\n      // since the parent service may still be active.\n      this._closeDialogs(this._openDialogsAtThisLevel);\n\n      this._afterAllClosedAtThisLevel.complete();\n\n      this._afterOpenedAtThisLevel.complete();\n    }\n  }, {\n    key: \"_closeDialogs\",\n    value: function _closeDialogs(dialogs) {\n      var i = dialogs.length;\n\n      while (i--) {\n        dialogs[i].close();\n      }\n    }\n  }]);\n\n  return _MatDialogBase;\n}();\n\n_MatDialogBase.ɵfac = function _MatDialogBase_Factory(t) {\n  i0.ɵɵinvalidFactory();\n};\n\n_MatDialogBase.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _MatDialogBase,\n  factory: _MatDialogBase.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatDialogBase, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i0.Injector\n    }, {\n      type: undefined\n    }, {\n      type: undefined\n    }, {\n      type: i1$1.OverlayContainer\n    }, {\n      type: undefined\n    }, {\n      type: i0.Type\n    }, {\n      type: i0.Type\n    }, {\n      type: i0.InjectionToken\n    }, {\n      type: undefined\n    }];\n  }, null);\n})();\n/**\n * Service to open Material Design modal dialogs.\n */\n\n\nvar MatDialog = /*#__PURE__*/function (_MatDialogBase2) {\n  _inherits(MatDialog, _MatDialogBase2);\n\n  var _super3 = _createSuper(MatDialog);\n\n  function MatDialog(overlay, injector,\n  /**\n   * @deprecated `_location` parameter to be removed.\n   * @breaking-change 10.0.0\n   */\n  _location, defaultOptions, scrollStrategy, parentDialog,\n  /**\n   * @deprecated No longer used. To be removed.\n   * @breaking-change 15.0.0\n   */\n  overlayContainer,\n  /**\n   * @deprecated No longer used. To be removed.\n   * @breaking-change 14.0.0\n   */\n  animationMode) {\n    _classCallCheck(this, MatDialog);\n\n    return _super3.call(this, overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA, animationMode);\n  }\n\n  return _createClass(MatDialog);\n}(_MatDialogBase);\n\nMatDialog.ɵfac = function MatDialog_Factory(t) {\n  return new (t || MatDialog)(i0.ɵɵinject(i1$1.Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i2.Location, 8), i0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), i0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), i0.ɵɵinject(MatDialog, 12), i0.ɵɵinject(i1$1.OverlayContainer), i0.ɵɵinject(ANIMATION_MODULE_TYPE, 8));\n};\n\nMatDialog.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MatDialog,\n  factory: MatDialog.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialog, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i0.Injector\n    }, {\n      type: i2.Location,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: MatDialogConfig,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DIALOG_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DIALOG_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: MatDialog,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: i1$1.OverlayContainer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Counter used to generate unique IDs for dialog elements. */\n\n\nvar dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\n\nvar MatDialogClose = /*#__PURE__*/function () {\n  function MatDialogClose(\n  /**\n   * Reference to the containing dialog.\n   * @deprecated `dialogRef` property to become private.\n   * @breaking-change 13.0.0\n   */\n  // The dialog title directive is always used in combination with a `MatDialogRef`.\n  // tslint:disable-next-line: lightweight-tokens\n  dialogRef, _elementRef, _dialog) {\n    _classCallCheck(this, MatDialogClose);\n\n    this.dialogRef = dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    /** Default to \"button\" to prevents accidental form submits. */\n\n    this.type = 'button';\n  }\n\n  _createClass(MatDialogClose, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (!this.dialogRef) {\n        // When this directive is included in a dialog via TemplateRef (rather than being\n        // in a Component), the DialogRef isn't available via injection because embedded\n        // views cannot be given a custom injector. Instead, we look up the DialogRef by\n        // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n        // be resolved at constructor time.\n        this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n      if (proxiedChange) {\n        this.dialogResult = proxiedChange.currentValue;\n      }\n    }\n  }, {\n    key: \"_onButtonClick\",\n    value: function _onButtonClick(event) {\n      // Determinate the focus origin using the click event, because using the FocusMonitor will\n      // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n      // dialog, and therefore clicking the button won't result in a focus change. This means that\n      // the FocusMonitor won't detect any origin change, and will always output `program`.\n      _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n  }]);\n\n  return MatDialogClose;\n}();\n\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) {\n  return new (t || MatDialogClose)(i0.ɵɵdirectiveInject(MatDialogRef, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MatDialog));\n};\n\nMatDialogClose.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatDialogClose,\n  selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]],\n  hostVars: 2,\n  hostBindings: function MatDialogClose_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler($event) {\n        return ctx._onButtonClick($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    }\n  },\n  inputs: {\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    type: \"type\",\n    dialogResult: [\"mat-dialog-close\", \"dialogResult\"],\n    _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"]\n  },\n  exportAs: [\"matDialogClose\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogClose, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-close], [matDialogClose]',\n      exportAs: 'matDialogClose',\n      host: {\n        '(click)': '_onButtonClick($event)',\n        '[attr.aria-label]': 'ariaLabel || null',\n        '[attr.type]': 'type'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    type: [{\n      type: Input\n    }],\n    dialogResult: [{\n      type: Input,\n      args: ['mat-dialog-close']\n    }],\n    _matDialogClose: [{\n      type: Input,\n      args: ['matDialogClose']\n    }]\n  });\n})();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n\n\nvar MatDialogTitle = /*#__PURE__*/function () {\n  function MatDialogTitle( // The dialog title directive is always used in combination with a `MatDialogRef`.\n  // tslint:disable-next-line: lightweight-tokens\n  _dialogRef, _elementRef, _dialog) {\n    _classCallCheck(this, MatDialogTitle);\n\n    this._dialogRef = _dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n\n    this.id = \"mat-dialog-title-\".concat(dialogElementUid++);\n  }\n\n  _createClass(MatDialogTitle, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this7 = this;\n\n      if (!this._dialogRef) {\n        this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n      }\n\n      if (this._dialogRef) {\n        Promise.resolve().then(function () {\n          var container = _this7._dialogRef._containerInstance;\n\n          if (container && !container._ariaLabelledBy) {\n            container._ariaLabelledBy = _this7.id;\n          }\n        });\n      }\n    }\n  }]);\n\n  return MatDialogTitle;\n}();\n\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) {\n  return new (t || MatDialogTitle)(i0.ɵɵdirectiveInject(MatDialogRef, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MatDialog));\n};\n\nMatDialogTitle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatDialogTitle,\n  selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-title\"],\n  hostVars: 1,\n  hostBindings: function MatDialogTitle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx.id);\n    }\n  },\n  inputs: {\n    id: \"id\"\n  },\n  exportAs: [\"matDialogTitle\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogTitle, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-title], [matDialogTitle]',\n      exportAs: 'matDialogTitle',\n      host: {\n        'class': 'mat-dialog-title',\n        '[id]': 'id'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    id: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Scrollable content container of a dialog.\n */\n\n\nvar MatDialogContent = /*#__PURE__*/_createClass(function MatDialogContent() {\n  _classCallCheck(this, MatDialogContent);\n});\n\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) {\n  return new (t || MatDialogContent)();\n};\n\nMatDialogContent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatDialogContent,\n  selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-content\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogContent, [{\n    type: Directive,\n    args: [{\n      selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\",\n      host: {\n        'class': 'mat-dialog-content'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n\n\nvar MatDialogActions = /*#__PURE__*/_createClass(function MatDialogActions() {\n  _classCallCheck(this, MatDialogActions);\n\n  /**\n   * Horizontal alignment of action buttons.\n   */\n  this.align = 'start';\n});\n\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) {\n  return new (t || MatDialogActions)();\n};\n\nMatDialogActions.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatDialogActions,\n  selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-actions\"],\n  hostVars: 4,\n  hostBindings: function MatDialogActions_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-dialog-actions-align-center\", ctx.align === \"center\")(\"mat-dialog-actions-align-end\", ctx.align === \"end\");\n    }\n  },\n  inputs: {\n    align: \"align\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogActions, [{\n    type: Directive,\n    args: [{\n      selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\",\n      host: {\n        'class': 'mat-dialog-actions',\n        '[class.mat-dialog-actions-align-center]': 'align === \"center\"',\n        '[class.mat-dialog-actions-align-end]': 'align === \"end\"'\n      }\n    }]\n  }], null, {\n    align: [{\n      type: Input\n    }]\n  });\n})(); // TODO(crisbeto): this utility shouldn't be necessary anymore, because the dialog ref is provided\n// both to component and template dialogs through DI. We need to keep it around, because there are\n// some internal wrappers around `MatDialog` that happened to work by accident, because we had this\n// fallback logic in place.\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\n\n\nfunction getClosestDialog(element, openDialogs) {\n  var parent = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(function (dialog) {\n    return dialog.id === parent.id;\n  }) : null;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatDialogModule = /*#__PURE__*/_createClass(function MatDialogModule() {\n  _classCallCheck(this, MatDialogModule);\n});\n\nMatDialogModule.ɵfac = function MatDialogModule_Factory(t) {\n  return new (t || MatDialogModule)();\n};\n\nMatDialogModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatDialogModule\n});\nMatDialogModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n  imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogModule, [{\n    type: NgModule,\n    args: [{\n      imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule],\n      exports: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule],\n      declarations: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent],\n      providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations };","map":{"version":3,"names":["CdkDialogContainer","Dialog","DialogConfig","DialogModule","i1$1","Overlay","OverlayModule","i4","PortalModule","i0","EventEmitter","Component","Optional","Inject","ViewEncapsulation","ChangeDetectionStrategy","InjectionToken","Injectable","SkipSelf","Directive","Input","NgModule","MatCommonModule","Subject","merge","defer","filter","take","startWith","trigger","state","style","transition","group","animate","query","animateChild","i2","DOCUMENT","i1","ESCAPE","hasModifierKey","ANIMATION_MODULE_TYPE","defaultParams","params","enterAnimationDuration","exitAnimationDuration","matDialogAnimations","dialogContainer","opacity","transform","optional","MatDialogConfig","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","delayFocusTrap","closeOnNavigation","_MatDialogContainerBase","elementRef","focusTrapFactory","_document","dialogConfig","interactivityChecker","ngZone","overlayRef","focusMonitor","_animationStateChanged","_config","_trapFocus","totalTime","next","ɵfac","ElementRef","FocusTrapFactory","InteractivityChecker","NgZone","OverlayRef","FocusMonitor","ɵcmp","type","args","template","undefined","decorators","MatDialogContainer","document","checker","_changeDetectorRef","_state","toState","_openAnimationDone","markForCheck","value","ChangeDetectorRef","CdkPortalOutlet","selector","encapsulation","None","changeDetection","Default","animations","host","styles","MatDialogRef","_ref","config","_containerInstance","_afterOpened","_beforeClosed","id","pipe","event","subscribe","complete","clearTimeout","_closeFallbackTimeout","_finishDialogClose","detachments","_result","backdropClick","keydownEvents","keyCode","preventDefault","_closeDialogVia","dialogResult","detachBackdrop","setTimeout","_startExitAnimation","closed","position","strategy","positionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updatePosition","updateSize","classes","addPanelClass","removePanelClass","close","focusOrigin","_closeInteractionType","componentInstance","ref","interactionType","result","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","uniqueId","_MatDialogBase","_overlay","injector","_defaultOptions","_parentDialog","_overlayContainer","scrollStrategy","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","_animationMode","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_idPrefix","afterAllClosed","openDialogs","length","_getAfterAllClosed","_scrollStrategy","_dialog","get","afterOpened","parent","componentOrTemplateRef","dialogRef","Object","assign","cdkRef","open","global","closeOnDestroy","container","providers","useValue","templateContext","cdkConfig","push","afterClosed","index","indexOf","splice","_closeDialogs","find","dialog","dialogs","i","ɵprov","Injector","OverlayContainer","Type","MatDialog","_location","defaultOptions","parentDialog","overlayContainer","animationMode","Location","dialogElementUid","MatDialogClose","_elementRef","getClosestDialog","changes","proxiedChange","currentValue","screenX","screenY","ɵdir","exportAs","_matDialogClose","MatDialogTitle","_dialogRef","Promise","resolve","then","_ariaLabelledBy","MatDialogContent","MatDialogActions","align","element","nativeElement","parentElement","classList","contains","MatDialogModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@angular/material/fesm2015/dialog.mjs"],"sourcesContent":["import { CdkDialogContainer, Dialog, DialogConfig, DialogModule } from '@angular/cdk/dialog';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i4 from '@angular/cdk/portal';\nimport { PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, Optional, Inject, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injectable, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Subject, merge, defer } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { trigger, state, style, transition, group, animate, query, animateChild } from '@angular/animations';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Default parameters for the animation for backwards compatibility.\n * @docs-private\n */\nconst defaultParams = {\n    params: { enterAnimationDuration: '150ms', exitAnimationDuration: '75ms' },\n};\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', group([\n            animate('{{enterAnimationDuration}} cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 })),\n            query('@*', animateChild(), { optional: true }),\n        ]), defaultParams),\n        transition('* => void, * => exit', group([\n            animate('{{exitAnimationDuration}} cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 })),\n            query('@*', animateChild(), { optional: true }),\n        ]), defaultParams),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nclass MatDialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n        this.maxWidth = '80vw';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /**\n         * Where the dialog should focus on open.\n         * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n         * AutoFocusTarget instead.\n         */\n        this.autoFocus = 'first-tabbable';\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /** Whether to wait for the opening animation to finish before trapping focus. */\n        this.delayFocusTrap = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        /** Duration of the enter animation. Has to be a valid CSS value (e.g. 100ms). */\n        this.enterAnimationDuration = defaultParams.params.enterAnimationDuration;\n        /** Duration of the exit animation. Has to be a valid CSS value (e.g. 50ms). */\n        this.exitAnimationDuration = defaultParams.params.exitAnimationDuration;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\n// tslint:disable-next-line:validate-decorators\nclass _MatDialogContainerBase extends CdkDialogContainer {\n    constructor(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor) {\n        super(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor);\n        /** Emits when an animation state changes. */\n        this._animationStateChanged = new EventEmitter();\n    }\n    _captureInitialFocus() {\n        if (!this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Callback for when the open dialog animation has finished. Intended to\n     * be called by sub-classes that use different animation implementations.\n     */\n    _openAnimationDone(totalTime) {\n        if (this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n        this._animationStateChanged.next({ state: 'opened', totalTime });\n    }\n}\n_MatDialogContainerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatDialogContainerBase, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: MatDialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });\n_MatDialogContainerBase.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: _MatDialogContainerBase, selector: \"ng-component\", usesInheritance: true, ngImport: i0, template: '', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatDialogContainerBase, decorators: [{\n            type: Component,\n            args: [{ template: '' }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: MatDialogConfig }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: i1.FocusMonitor }];\n    } });\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\nclass MatDialogContainer extends _MatDialogContainerBase {\n    constructor(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, _changeDetectorRef, focusMonitor) {\n        super(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, focusMonitor);\n        this._changeDetectorRef = _changeDetectorRef;\n        /** State of the dialog animation. */\n        this._state = 'enter';\n    }\n    /** Callback, invoked whenever an animation on the host completes. */\n    _onAnimationDone({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._openAnimationDone(totalTime);\n        }\n        else if (toState === 'exit') {\n            this._animationStateChanged.next({ state: 'closed', totalTime });\n        }\n    }\n    /** Callback, invoked when an animation on the host starts. */\n    _onAnimationStart({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._animationStateChanged.next({ state: 'opening', totalTime });\n        }\n        else if (toState === 'exit' || toState === 'void') {\n            this._animationStateChanged.next({ state: 'closing', totalTime });\n        }\n    }\n    /** Starts the dialog exit animation. */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n    _getAnimationState() {\n        return {\n            value: this._state,\n            params: {\n                'enterAnimationDuration': this._config.enterAnimationDuration || defaultParams.params.enterAnimationDuration,\n                'exitAnimationDuration': this._config.exitAnimationDuration || defaultParams.params.exitAnimationDuration,\n            },\n        };\n    }\n}\nMatDialogContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogContainer, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: MatDialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: i0.ChangeDetectorRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });\nMatDialogContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatDialogContainer, selector: \"mat-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, listeners: { \"@dialogContainer.start\": \"_onAnimationStart($event)\", \"@dialogContainer.done\": \"_onAnimationDone($event)\" }, properties: { \"attr.aria-modal\": \"_config.ariaModal\", \"id\": \"_config.id\", \"attr.role\": \"_config.role\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledBy\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\", \"@dialogContainer\": \"_getAnimationState()\" }, classAttribute: \"mat-dialog-container\" }, usesInheritance: true, ngImport: i0, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions.mat-dialog-actions-align-center,.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions.mat-dialog-actions-align-end,.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"], dependencies: [{ kind: \"directive\", type: i4.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matDialogAnimations.dialogContainer], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, animations: [matDialogAnimations.dialogContainer], host: {\n                        'class': 'mat-dialog-container',\n                        'tabindex': '-1',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[id]': '_config.id',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                        '[@dialogContainer]': `_getAnimationState()`,\n                        '(@dialogContainer.start)': '_onAnimationStart($event)',\n                        '(@dialogContainer.done)': '_onAnimationDone($event)',\n                    }, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions.mat-dialog-actions-align-center,.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions.mat-dialog-actions-align-end,.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: MatDialogConfig }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    constructor(_ref, config, _containerInstance) {\n        this._ref = _ref;\n        this._containerInstance = _containerInstance;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = 0 /* MatDialogState.OPEN */;\n        this.disableClose = config.disableClose;\n        this.id = _ref.id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closed'), take(1))\n            .subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _ref.overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._finishDialogClose();\n        });\n        merge(this.backdropClick(), this.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)))).subscribe(event => {\n            if (!this.disableClose) {\n                event.preventDefault();\n                _closeDialogVia(this, event.type === 'keydown' ? 'keyboard' : 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._ref.overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = 1 /* MatDialogState.CLOSING */;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._ref.closed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._ref.backdropClick;\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._ref.keydownEvents;\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._ref.config.positionStrategy;\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._ref.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._ref.updateSize(width, height);\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._ref.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._ref.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = 2 /* MatDialogState.CLOSED */;\n        this._ref.close(this._result, { focusOrigin: this._closeInteractionType });\n        this.componentInstance = null;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    ref._closeInteractionType = interactionType;\n    return ref.close(result);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\nclass _MatDialogBase {\n    constructor(_overlay, injector, _defaultOptions, _parentDialog, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 15.0.0\n     */\n    _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    _animationMode) {\n        this._overlay = _overlay;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._dialogRefConstructor = _dialogRefConstructor;\n        this._dialogContainerType = _dialogContainerType;\n        this._dialogDataToken = _dialogDataToken;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._idPrefix = 'mat-dialog-';\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length\n            ? this._getAfterAllClosed()\n            : this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n        this._dialog = injector.get(Dialog);\n    }\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    open(componentOrTemplateRef, config) {\n        let dialogRef;\n        config = Object.assign(Object.assign({}, (this._defaultOptions || new MatDialogConfig())), config);\n        config.id = config.id || `${this._idPrefix}${uniqueId++}`;\n        config.scrollStrategy = config.scrollStrategy || this._scrollStrategy();\n        const cdkRef = this._dialog.open(componentOrTemplateRef, Object.assign(Object.assign({}, config), { positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(), \n            // Disable closing since we need to sync it up to the animation ourselves.\n            disableClose: true, \n            // Disable closing on destroy, because this service cleans up its open dialogs as well.\n            // We want to do the cleanup here, rather than the CDK service, because the CDK destroys\n            // the dialogs immediately whereas we want it to wait for the animations to finish.\n            closeOnDestroy: false, container: {\n                type: this._dialogContainerType,\n                providers: () => [\n                    // Provide our config as the CDK config as well since it has the same interface as the\n                    // CDK one, but it contains the actual values passed in by the user for things like\n                    // `disableClose` which we disable for the CDK dialog since we handle it ourselves.\n                    { provide: MatDialogConfig, useValue: config },\n                    { provide: DialogConfig, useValue: config },\n                ],\n            }, templateContext: () => ({ dialogRef }), providers: (ref, cdkConfig, dialogContainer) => {\n                dialogRef = new this._dialogRefConstructor(ref, config, dialogContainer);\n                dialogRef.updatePosition(config === null || config === void 0 ? void 0 : config.position);\n                return [\n                    { provide: this._dialogContainerType, useValue: dialogContainer },\n                    { provide: this._dialogDataToken, useValue: cdkConfig.data },\n                    { provide: this._dialogRefConstructor, useValue: dialogRef },\n                ];\n            } }));\n        // This can't be assigned in the `providers` callback, because\n        // the instance hasn't been assigned to the CDK ref yet.\n        dialogRef.componentInstance = cdkRef.componentInstance;\n        this.openDialogs.push(dialogRef);\n        this.afterOpened.next(dialogRef);\n        dialogRef.afterClosed().subscribe(() => {\n            const index = this.openDialogs.indexOf(dialogRef);\n            if (index > -1) {\n                this.openDialogs.splice(index, 1);\n                if (!this.openDialogs.length) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        });\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            dialogs[i].close();\n        }\n    }\n}\n_MatDialogBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatDialogBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Injectable });\n_MatDialogBase.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatDialogBase });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatDialogBase, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: undefined }, { type: undefined }, { type: i1$1.OverlayContainer }, { type: undefined }, { type: i0.Type }, { type: i0.Type }, { type: i0.InjectionToken }, { type: undefined }]; } });\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog extends _MatDialogBase {\n    constructor(overlay, injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    _location, defaultOptions, scrollStrategy, parentDialog, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 15.0.0\n     */\n    overlayContainer, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    animationMode) {\n        super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA, animationMode);\n    }\n}\nMatDialog.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: i2.Location, optional: true }, { token: MAT_DIALOG_DEFAULT_OPTIONS, optional: true }, { token: MAT_DIALOG_SCROLL_STRATEGY }, { token: MatDialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nMatDialog.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialog });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialog, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: i2.Location, decorators: [{\n                        type: Optional\n                    }] }, { type: MatDialogConfig, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_DIALOG_DEFAULT_OPTIONS]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_DIALOG_SCROLL_STRATEGY]\n                    }] }, { type: MatDialog, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n}\nMatDialogClose.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogClose, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogClose.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatDialogClose, selector: \"[mat-dialog-close], [matDialogClose]\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, host: { listeners: { \"click\": \"_onButtonClick($event)\" }, properties: { \"attr.aria-label\": \"ariaLabel || null\", \"attr.type\": \"type\" } }, exportAs: [\"matDialogClose\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogClose, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-close], [matDialogClose]',\n                    exportAs: 'matDialogClose',\n                    host: {\n                        '(click)': '_onButtonClick($event)',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.type]': 'type',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: MatDialogRef, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.ElementRef }, { type: MatDialog }];\n    }, propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], type: [{\n                type: Input\n            }], dialogResult: [{\n                type: Input,\n                args: ['mat-dialog-close']\n            }], _matDialogClose: [{\n                type: Input,\n                args: ['matDialogClose']\n            }] } });\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            });\n        }\n    }\n}\nMatDialogTitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogTitle, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogTitle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: { id: \"id\" }, host: { properties: { \"id\": \"id\" }, classAttribute: \"mat-dialog-title\" }, exportAs: [\"matDialogTitle\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-title], [matDialogTitle]',\n                    exportAs: 'matDialogTitle',\n                    host: {\n                        'class': 'mat-dialog-title',\n                        '[id]': 'id',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: MatDialogRef, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.ElementRef }, { type: MatDialog }];\n    }, propDecorators: { id: [{\n                type: Input\n            }] } });\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogContent, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\", host: { classAttribute: \"mat-dialog-content\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                    host: { 'class': 'mat-dialog-content' },\n                }]\n        }] });\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n    constructor() {\n        /**\n         * Horizontal alignment of action buttons.\n         */\n        this.align = 'start';\n    }\n}\nMatDialogActions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogActions, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogActions.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\", inputs: { align: \"align\" }, host: { properties: { \"class.mat-dialog-actions-align-center\": \"align === \\\"center\\\"\", \"class.mat-dialog-actions-align-end\": \"align === \\\"end\\\"\" }, classAttribute: \"mat-dialog-actions\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                    host: {\n                        'class': 'mat-dialog-actions',\n                        '[class.mat-dialog-actions-align-center]': 'align === \"center\"',\n                        '[class.mat-dialog-actions-align-end]': 'align === \"end\"',\n                    },\n                }]\n        }], propDecorators: { align: [{\n                type: Input\n            }] } });\n// TODO(crisbeto): this utility shouldn't be necessary anymore, because the dialog ref is provided\n// both to component and template dialogs through DI. We need to keep it around, because there are\n// some internal wrappers around `MatDialog` that happened to work by accident, because we had this\n// fallback logic in place.\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatDialogModule {\n}\nMatDialogModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatDialogModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogModule, declarations: [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogActions,\n        MatDialogContent], imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule], exports: [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogContent,\n        MatDialogActions,\n        MatCommonModule] });\nMatDialogModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogModule, providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER], imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule],\n                    exports: [\n                        MatDialogContainer,\n                        MatDialogClose,\n                        MatDialogTitle,\n                        MatDialogContent,\n                        MatDialogActions,\n                        MatCommonModule,\n                    ],\n                    declarations: [\n                        MatDialogContainer,\n                        MatDialogClose,\n                        MatDialogTitle,\n                        MatDialogActions,\n                        MatDialogContent,\n                    ],\n                    providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
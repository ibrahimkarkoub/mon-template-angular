{"ast":null,"code":"import _inherits from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport * as i0 from '@angular/core';\nimport { Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nvar nextId = 0; // Boilerplate for applying mixins to MatBadge.\n\n/** @docs-private */\n\nvar _MatBadgeBase = mixinDisabled( /*#__PURE__*/function () {\n  function _class() {\n    _classCallCheck(this, _class);\n  }\n\n  return _createClass(_class);\n}());\n\nvar BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\n\nvar MatBadge = /*#__PURE__*/function (_MatBadgeBase2) {\n  _inherits(MatBadge, _MatBadgeBase2);\n\n  var _super = _createSuper(MatBadge);\n\n  function MatBadge(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n    var _this;\n\n    _classCallCheck(this, MatBadge);\n\n    _this = _super.call(this);\n    _this._ngZone = _ngZone;\n    _this._elementRef = _elementRef;\n    _this._ariaDescriber = _ariaDescriber;\n    _this._renderer = _renderer;\n    _this._animationMode = _animationMode;\n    _this._color = 'primary';\n    _this._overlap = true;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n\n    _this.position = 'above after';\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n\n    _this.size = 'medium';\n    /** Unique id for the badge */\n\n    _this._id = nextId++;\n    /** Whether the OnInit lifecycle hook has run yet */\n\n    _this._isInitialized = false;\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      var nativeElement = _elementRef.nativeElement;\n\n      if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n        throw Error('matBadge must be attached to an element node.');\n      }\n    }\n\n    return _this;\n  }\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n\n\n  _createClass(MatBadge, [{\n    key: \"color\",\n    get: function get() {\n      return this._color;\n    },\n    set: function set(value) {\n      this._setColor(value);\n\n      this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n\n  }, {\n    key: \"overlap\",\n    get: function get() {\n      return this._overlap;\n    },\n    set: function set(val) {\n      this._overlap = coerceBooleanProperty(val);\n    }\n    /** The content for the badge */\n\n  }, {\n    key: \"content\",\n    get: function get() {\n      return this._content;\n    },\n    set: function set(newContent) {\n      this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n\n  }, {\n    key: \"description\",\n    get: function get() {\n      return this._description;\n    },\n    set: function set(newDescription) {\n      this._updateHostAriaDescription(newDescription);\n    }\n    /** Whether the badge is hidden. */\n\n  }, {\n    key: \"hidden\",\n    get: function get() {\n      return this._hidden;\n    },\n    set: function set(val) {\n      this._hidden = coerceBooleanProperty(val);\n    }\n    /** Whether the badge is above the host or not */\n\n  }, {\n    key: \"isAbove\",\n    value: function isAbove() {\n      return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n\n  }, {\n    key: \"isAfter\",\n    value: function isAfter() {\n      return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n\n  }, {\n    key: \"getBadgeElement\",\n    value: function getBadgeElement() {\n      return this._badgeElement;\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      // We may have server-side rendered badge that we need to clear.\n      // We need to do this in ngOnInit because the full content of the component\n      // on which the badge is attached won't necessarily be in the DOM until this point.\n      this._clearExistingBadges();\n\n      if (this.content && !this._badgeElement) {\n        this._badgeElement = this._createBadgeElement();\n\n        this._updateRenderedContent(this.content);\n      }\n\n      this._isInitialized = true;\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(this._badgeElement);\n      }\n\n      this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Creates the badge element */\n\n  }, {\n    key: \"_createBadgeElement\",\n    value: function _createBadgeElement() {\n      var badgeElement = this._renderer.createElement('span');\n\n      var activeClass = 'mat-badge-active';\n      badgeElement.setAttribute('id', \"mat-badge-content-\".concat(this._id)); // The badge is aria-hidden because we don't want it to appear in the page's navigation\n      // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n\n      badgeElement.setAttribute('aria-hidden', 'true');\n      badgeElement.classList.add(BADGE_CONTENT_CLASS);\n\n      if (this._animationMode === 'NoopAnimations') {\n        badgeElement.classList.add('_mat-animation-noopable');\n      }\n\n      this._elementRef.nativeElement.appendChild(badgeElement); // animate in after insertion\n\n\n      if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n        this._ngZone.runOutsideAngular(function () {\n          requestAnimationFrame(function () {\n            badgeElement.classList.add(activeClass);\n          });\n        });\n      } else {\n        badgeElement.classList.add(activeClass);\n      }\n\n      return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n\n  }, {\n    key: \"_updateRenderedContent\",\n    value: function _updateRenderedContent(newContent) {\n      var newContentNormalized = \"\".concat(newContent !== null && newContent !== void 0 ? newContent : '').trim(); // Don't create the badge element if the directive isn't initialized because we want to\n      // append the badge element to the *end* of the host element's content for backwards\n      // compatibility.\n\n      if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n        this._badgeElement = this._createBadgeElement();\n      }\n\n      if (this._badgeElement) {\n        this._badgeElement.textContent = newContentNormalized;\n      }\n\n      this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n\n  }, {\n    key: \"_updateHostAriaDescription\",\n    value: function _updateHostAriaDescription(newDescription) {\n      this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n\n      if (newDescription) {\n        this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n      }\n\n      this._description = newDescription;\n    }\n    /** Adds css theme class given the color to the component host */\n\n  }, {\n    key: \"_setColor\",\n    value: function _setColor(colorPalette) {\n      var classList = this._elementRef.nativeElement.classList;\n      classList.remove(\"mat-badge-\".concat(this._color));\n\n      if (colorPalette) {\n        classList.add(\"mat-badge-\".concat(colorPalette));\n      }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n\n  }, {\n    key: \"_clearExistingBadges\",\n    value: function _clearExistingBadges() {\n      // Only check direct children of this host element in order to avoid deleting\n      // any badges that might exist in descendant elements.\n      var badges = this._elementRef.nativeElement.querySelectorAll(\":scope > .\".concat(BADGE_CONTENT_CLASS));\n\n      for (var _i = 0, _Array$from = Array.from(badges); _i < _Array$from.length; _i++) {\n        var badgeElement = _Array$from[_i];\n\n        if (badgeElement !== this._badgeElement) {\n          badgeElement.remove();\n        }\n      }\n    }\n  }]);\n\n  return MatBadge;\n}(_MatBadgeBase);\n\nMatBadge.ɵfac = function MatBadge_Factory(t) {\n  return new (t || MatBadge)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.AriaDescriber), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n\nMatBadge.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatBadge,\n  selectors: [[\"\", \"matBadge\", \"\"]],\n  hostAttrs: [1, \"mat-badge\"],\n  hostVars: 20,\n  hostBindings: function MatBadge_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx.content)(\"mat-badge-disabled\", ctx.disabled);\n    }\n  },\n  inputs: {\n    disabled: [\"matBadgeDisabled\", \"disabled\"],\n    color: [\"matBadgeColor\", \"color\"],\n    overlap: [\"matBadgeOverlap\", \"overlap\"],\n    position: [\"matBadgePosition\", \"position\"],\n    content: [\"matBadge\", \"content\"],\n    description: [\"matBadgeDescription\", \"description\"],\n    size: [\"matBadgeSize\", \"size\"],\n    hidden: [\"matBadgeHidden\", \"hidden\"]\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatBadge, [{\n    type: Directive,\n    args: [{\n      selector: '[matBadge]',\n      inputs: ['disabled: matBadgeDisabled'],\n      host: {\n        'class': 'mat-badge',\n        '[class.mat-badge-overlap]': 'overlap',\n        '[class.mat-badge-above]': 'isAbove()',\n        '[class.mat-badge-below]': '!isAbove()',\n        '[class.mat-badge-before]': '!isAfter()',\n        '[class.mat-badge-after]': 'isAfter()',\n        '[class.mat-badge-small]': 'size === \"small\"',\n        '[class.mat-badge-medium]': 'size === \"medium\"',\n        '[class.mat-badge-large]': 'size === \"large\"',\n        '[class.mat-badge-hidden]': 'hidden || !content',\n        '[class.mat-badge-disabled]': 'disabled'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i1.AriaDescriber\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    color: [{\n      type: Input,\n      args: ['matBadgeColor']\n    }],\n    overlap: [{\n      type: Input,\n      args: ['matBadgeOverlap']\n    }],\n    position: [{\n      type: Input,\n      args: ['matBadgePosition']\n    }],\n    content: [{\n      type: Input,\n      args: ['matBadge']\n    }],\n    description: [{\n      type: Input,\n      args: ['matBadgeDescription']\n    }],\n    size: [{\n      type: Input,\n      args: ['matBadgeSize']\n    }],\n    hidden: [{\n      type: Input,\n      args: ['matBadgeHidden']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatBadgeModule = /*#__PURE__*/_createClass(function MatBadgeModule() {\n  _classCallCheck(this, MatBadgeModule);\n});\n\nMatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) {\n  return new (t || MatBadgeModule)();\n};\n\nMatBadgeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatBadgeModule\n});\nMatBadgeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [A11yModule, MatCommonModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatBadgeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, MatCommonModule],\n      exports: [MatBadge, MatCommonModule],\n      declarations: [MatBadge]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatBadge, MatBadgeModule };","map":{"version":3,"names":["i0","Directive","Optional","Inject","Input","NgModule","mixinDisabled","MatCommonModule","i1","A11yModule","coerceBooleanProperty","ANIMATION_MODULE_TYPE","nextId","_MatBadgeBase","BADGE_CONTENT_CLASS","MatBadge","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","_color","_overlap","position","size","_id","_isInitialized","ngDevMode","nativeElement","nodeType","ELEMENT_NODE","Error","value","_setColor","val","_content","newContent","_updateRenderedContent","_description","newDescription","_updateHostAriaDescription","_hidden","indexOf","_badgeElement","_clearExistingBadges","content","_createBadgeElement","destroyNode","removeDescription","description","badgeElement","createElement","activeClass","setAttribute","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","describe","colorPalette","remove","badges","querySelectorAll","Array","from","ɵfac","NgZone","ElementRef","AriaDescriber","Renderer2","ɵdir","type","args","selector","inputs","host","undefined","decorators","color","overlap","hidden","MatBadgeModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@angular/material/fesm2015/badge.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nconst _MatBadgeBase = mixinDisabled(class {\n});\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\nclass MatBadge extends _MatBadgeBase {\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n        }\n    }\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n    get overlap() {\n        return this._overlap;\n    }\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateHostAriaDescription(newDescription);\n    }\n    /** Whether the badge is hidden. */\n    get hidden() {\n        return this._hidden;\n    }\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent !== null && newContent !== void 0 ? newContent : ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateHostAriaDescription(newDescription) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        if (newDescription) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        this._description = newDescription;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n}\nMatBadge.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatBadge.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatBadge, selector: \"[matBadge]\", inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\"] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    inputs: ['disabled: matBadgeDisabled'],\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: ['matBadgeOverlap']\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: ['matBadgeHidden']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatBadgeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatBadgeModule, declarations: [MatBadge], imports: [A11yModule, MatCommonModule], exports: [MatBadge, MatCommonModule] });\nMatBadgeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, MatCommonModule],\n                    exports: [MatBadge, MatCommonModule],\n                    declarations: [MatBadge],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollable, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, EventEmitter, Optional, Input, Output, ViewChild, QueryList, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, map, mapTo, takeUntil, distinctUntilChanged, take, startWith, debounceTime } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i2 from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/platform';\nimport * as i4 from '@angular/cdk/bidi';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\n\nvar _c0 = [\"*\"];\nvar _c1 = [\"content\"];\n\nfunction MatDrawerContainer_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵlistener(\"click\", function MatDrawerContainer_div_0_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      var ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2._onBackdropClicked());\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n  }\n}\n\nfunction MatDrawerContainer_mat_drawer_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-drawer-content\");\n    i0.ɵɵprojection(1, 2);\n    i0.ɵɵelementEnd();\n  }\n}\n\nvar _c2 = [[[\"mat-drawer\"]], [[\"mat-drawer-content\"]], \"*\"];\nvar _c3 = [\"mat-drawer\", \"mat-drawer-content\", \"*\"];\n\nfunction MatSidenavContainer_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵlistener(\"click\", function MatSidenavContainer_div_0_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      var ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2._onBackdropClicked());\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n  }\n}\n\nfunction MatSidenavContainer_mat_sidenav_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-sidenav-content\");\n    i0.ɵɵprojection(1, 2);\n    i0.ɵɵelementEnd();\n  }\n}\n\nvar _c4 = [[[\"mat-sidenav\"]], [[\"mat-sidenav-content\"]], \"*\"];\nvar _c5 = [\"mat-sidenav\", \"mat-sidenav-content\", \"*\"];\nvar _c6 = \".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\";\nvar matDrawerAnimations = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [// We remove the `transform` here completely, rather than setting it to zero, because:\n  // 1. Having a transform can cause elements with ripples or an animated\n  //    transform to shift around in Chrome with an RTL layout (see #10023).\n  // 2. 3d transforms causes text to appear blurry on IE and Edge.\n  state('open, open-instant', style({\n    'transform': 'none',\n    'visibility': 'visible'\n  })), state('void', style({\n    // Avoids the shadow showing up when closed in SSR.\n    'box-shadow': 'none',\n    'visibility': 'hidden'\n  })), transition('void => open-instant', animate('0ms')), transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))])\n};\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\n\nfunction throwMatDuplicatedDrawerError(position) {\n  throw Error(\"A drawer was already declared for 'position=\\\"\".concat(position, \"\\\"'\"));\n}\n/** Configures whether drawers should use auto sizing by default. */\n\n\nvar MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n  providedIn: 'root',\n  factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\n\nvar MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n/** @docs-private */\n\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n  return false;\n}\n\nvar MatDrawerContent = /*#__PURE__*/function (_CdkScrollable) {\n  _inherits(MatDrawerContent, _CdkScrollable);\n\n  var _super = _createSuper(MatDrawerContent);\n\n  function MatDrawerContent(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n    var _this;\n\n    _classCallCheck(this, MatDrawerContent);\n\n    _this = _super.call(this, elementRef, scrollDispatcher, ngZone);\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._container = _container;\n    return _this;\n  }\n\n  _createClass(MatDrawerContent, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this2 = this;\n\n      this._container._contentMarginChanges.subscribe(function () {\n        _this2._changeDetectorRef.markForCheck();\n      });\n    }\n  }]);\n\n  return MatDrawerContent;\n}(CdkScrollable);\n\nMatDrawerContent.ɵfac = function MatDrawerContent_Factory(t) {\n  return new (t || MatDrawerContent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(forwardRef(function () {\n    return MatDrawerContainer;\n  })), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nMatDrawerContent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatDrawerContent,\n  selectors: [[\"mat-drawer-content\"]],\n  hostAttrs: [1, \"mat-drawer-content\"],\n  hostVars: 4,\n  hostBindings: function MatDrawerContent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n    }\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkScrollable,\n    useExisting: MatDrawerContent\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatDrawerContent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDrawerContent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-drawer-content',\n      template: '<ng-content></ng-content>',\n      host: {\n        'class': 'mat-drawer-content',\n        '[style.margin-left.px]': '_container._contentMargins.left',\n        '[style.margin-right.px]': '_container._contentMargins.right'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [{\n        provide: CdkScrollable,\n        useExisting: MatDrawerContent\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: MatDrawerContainer,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(function () {\n          return MatDrawerContainer;\n        })]\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i1.ScrollDispatcher\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n\n\nvar MatDrawer = /*#__PURE__*/function () {\n  function MatDrawer(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _interactivityChecker, _doc, _container) {\n    var _this3 = this;\n\n    _classCallCheck(this, MatDrawer);\n\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    this._focusMonitor = _focusMonitor;\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._interactivityChecker = _interactivityChecker;\n    this._doc = _doc;\n    this._container = _container;\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    /** Whether the drawer is initialized. Used for disabling the initial animation. */\n\n    this._enableAnimations = false;\n    this._position = 'start';\n    this._mode = 'over';\n    this._disableClose = false;\n    this._opened = false;\n    /** Emits whenever the drawer has started animating. */\n\n    this._animationStarted = new Subject();\n    /** Emits whenever the drawer is done animating. */\n\n    this._animationEnd = new Subject();\n    /** Current state of the sidenav animation. */\n\n    this._animationState = 'void';\n    /** Event emitted when the drawer open state is changed. */\n\n    this.openedChange = // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n    new EventEmitter(\n    /* isAsync */\n    true);\n    /** Event emitted when the drawer has been opened. */\n\n    this._openedStream = this.openedChange.pipe(filter(function (o) {\n      return o;\n    }), map(function () {}));\n    /** Event emitted when the drawer has started opening. */\n\n    this.openedStart = this._animationStarted.pipe(filter(function (e) {\n      return e.fromState !== e.toState && e.toState.indexOf('open') === 0;\n    }), mapTo(undefined));\n    /** Event emitted when the drawer has been closed. */\n\n    this._closedStream = this.openedChange.pipe(filter(function (o) {\n      return !o;\n    }), map(function () {}));\n    /** Event emitted when the drawer has started closing. */\n\n    this.closedStart = this._animationStarted.pipe(filter(function (e) {\n      return e.fromState !== e.toState && e.toState === 'void';\n    }), mapTo(undefined));\n    /** Emits when the component is destroyed. */\n\n    this._destroyed = new Subject();\n    /** Event emitted when the drawer's position changes. */\n    // tslint:disable-next-line:no-output-on-prefix\n\n    this.onPositionChanged = new EventEmitter();\n    /**\n     * An observable that emits when the drawer mode changes. This is used by the drawer container to\n     * to know when to when the mode changes so it can adapt the margins on the content.\n     */\n\n    this._modeChanged = new Subject();\n    this.openedChange.subscribe(function (opened) {\n      if (opened) {\n        if (_this3._doc) {\n          _this3._elementFocusedBeforeDrawerWasOpened = _this3._doc.activeElement;\n        }\n\n        _this3._takeFocus();\n      } else if (_this3._isFocusWithinDrawer()) {\n        _this3._restoreFocus(_this3._openedVia || 'program');\n      }\n    });\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n\n    this._ngZone.runOutsideAngular(function () {\n      fromEvent(_this3._elementRef.nativeElement, 'keydown').pipe(filter(function (event) {\n        return event.keyCode === ESCAPE && !_this3.disableClose && !hasModifierKey(event);\n      }), takeUntil(_this3._destroyed)).subscribe(function (event) {\n        return _this3._ngZone.run(function () {\n          _this3.close();\n\n          event.stopPropagation();\n          event.preventDefault();\n        });\n      });\n    }); // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n\n\n    this._animationEnd.pipe(distinctUntilChanged(function (x, y) {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(function (event) {\n      var fromState = event.fromState,\n          toState = event.toState;\n\n      if (toState.indexOf('open') === 0 && fromState === 'void' || toState === 'void' && fromState.indexOf('open') === 0) {\n        _this3.openedChange.emit(_this3._opened);\n      }\n    });\n  }\n  /** The side that the drawer is attached to. */\n\n\n  _createClass(MatDrawer, [{\n    key: \"position\",\n    get: function get() {\n      return this._position;\n    },\n    set: function set(value) {\n      // Make sure we have a valid value.\n      value = value === 'end' ? 'end' : 'start';\n\n      if (value !== this._position) {\n        // Static inputs in Ivy are set before the element is in the DOM.\n        if (this._isAttached) {\n          this._updatePositionInParent(value);\n        }\n\n        this._position = value;\n        this.onPositionChanged.emit();\n      }\n    }\n    /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n\n  }, {\n    key: \"mode\",\n    get: function get() {\n      return this._mode;\n    },\n    set: function set(value) {\n      this._mode = value;\n\n      this._updateFocusTrapState();\n\n      this._modeChanged.next();\n    }\n    /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n\n  }, {\n    key: \"disableClose\",\n    get: function get() {\n      return this._disableClose;\n    },\n    set: function set(value) {\n      this._disableClose = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer should focus the first focusable element automatically when opened.\n     * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n     * enabled, focus will be moved into the sidenav in `side` mode as well.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or AutoFocusTarget\n     * instead.\n     */\n\n  }, {\n    key: \"autoFocus\",\n    get: function get() {\n      var value = this._autoFocus; // Note that usually we don't allow autoFocus to be set to `first-tabbable` in `side` mode,\n      // because we don't know how the sidenav is being used, but in some cases it still makes\n      // sense to do it. The consumer can explicitly set `autoFocus`.\n\n      if (value == null) {\n        if (this.mode === 'side') {\n          return 'dialog';\n        } else {\n          return 'first-tabbable';\n        }\n      }\n\n      return value;\n    },\n    set: function set(value) {\n      if (value === 'true' || value === 'false' || value == null) {\n        value = coerceBooleanProperty(value);\n      }\n\n      this._autoFocus = value;\n    }\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     */\n\n  }, {\n    key: \"opened\",\n    get: function get() {\n      return this._opened;\n    },\n    set: function set(value) {\n      this.toggle(coerceBooleanProperty(value));\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n\n  }, {\n    key: \"_forceFocus\",\n    value: function _forceFocus(element, options) {\n      if (!this._interactivityChecker.isFocusable(element)) {\n        element.tabIndex = -1; // The tabindex attribute should be removed to avoid navigating to that element again\n\n        this._ngZone.runOutsideAngular(function () {\n          var callback = function callback() {\n            element.removeEventListener('blur', callback);\n            element.removeEventListener('mousedown', callback);\n            element.removeAttribute('tabindex');\n          };\n\n          element.addEventListener('blur', callback);\n          element.addEventListener('mousedown', callback);\n        });\n      }\n\n      element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n\n  }, {\n    key: \"_focusByCssSelector\",\n    value: function _focusByCssSelector(selector, options) {\n      var elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n\n      if (elementToFocus) {\n        this._forceFocus(elementToFocus, options);\n      }\n    }\n    /**\n     * Moves focus into the drawer. Note that this works even if\n     * the focus trap is disabled in `side` mode.\n     */\n\n  }, {\n    key: \"_takeFocus\",\n    value: function _takeFocus() {\n      var _this4 = this;\n\n      if (!this._focusTrap) {\n        return;\n      }\n\n      var element = this._elementRef.nativeElement; // When autoFocus is not on the sidenav, if the element cannot be focused or does\n      // not exist, focus the sidenav itself so the keyboard navigation still works.\n      // We need to check that `focus` is a function due to Universal.\n\n      switch (this.autoFocus) {\n        case false:\n        case 'dialog':\n          return;\n\n        case true:\n        case 'first-tabbable':\n          this._focusTrap.focusInitialElementWhenReady().then(function (hasMovedFocus) {\n            if (!hasMovedFocus && typeof _this4._elementRef.nativeElement.focus === 'function') {\n              element.focus();\n            }\n          });\n\n          break;\n\n        case 'first-heading':\n          this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n\n          break;\n\n        default:\n          this._focusByCssSelector(this.autoFocus);\n\n          break;\n      }\n    }\n    /**\n     * Restores focus to the element that was originally focused when the drawer opened.\n     * If no element was focused at that time, the focus will be restored to the drawer.\n     */\n\n  }, {\n    key: \"_restoreFocus\",\n    value: function _restoreFocus(focusOrigin) {\n      if (this.autoFocus === 'dialog') {\n        return;\n      }\n\n      if (this._elementFocusedBeforeDrawerWasOpened) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, focusOrigin);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n\n      this._elementFocusedBeforeDrawerWasOpened = null;\n    }\n    /** Whether focus is currently within the drawer. */\n\n  }, {\n    key: \"_isFocusWithinDrawer\",\n    value: function _isFocusWithinDrawer() {\n      var activeEl = this._doc.activeElement;\n      return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      this._isAttached = true;\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n\n      this._updateFocusTrapState(); // Only update the DOM position when the sidenav is positioned at\n      // the end since we project the sidenav before the content by default.\n\n\n      if (this._position === 'end') {\n        this._updatePositionInParent('end');\n      }\n    }\n  }, {\n    key: \"ngAfterContentChecked\",\n    value: function ngAfterContentChecked() {\n      // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n      // drawers that are open by default. When we're on the server, we shouldn't enable the\n      // animations, because we don't want the drawer to animate the first time the user sees\n      // the page.\n      if (this._platform.isBrowser) {\n        this._enableAnimations = true;\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _a;\n\n      if (this._focusTrap) {\n        this._focusTrap.destroy();\n      }\n\n      (_a = this._anchor) === null || _a === void 0 ? void 0 : _a.remove();\n      this._anchor = null;\n\n      this._animationStarted.complete();\n\n      this._animationEnd.complete();\n\n      this._modeChanged.complete();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /**\n     * Open the drawer.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n\n  }, {\n    key: \"open\",\n    value: function open(openedVia) {\n      return this.toggle(true, openedVia);\n    }\n    /** Close the drawer. */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.toggle(false);\n    }\n    /** Closes the drawer with context that the backdrop was clicked. */\n\n  }, {\n    key: \"_closeViaBackdropClick\",\n    value: function _closeViaBackdropClick() {\n      // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n      // don't need to check whether focus is currently in the drawer, as clicking on the\n      // backdrop causes blurs the active element.\n      return this._setOpen(\n      /* isOpen */\n      false,\n      /* restoreFocus */\n      true, 'mouse');\n    }\n    /**\n     * Toggle this drawer.\n     * @param isOpen Whether the drawer should be open.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      var isOpen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.opened;\n      var openedVia = arguments.length > 1 ? arguments[1] : undefined;\n\n      // If the focus is currently inside the drawer content and we are closing the drawer,\n      // restore the focus to the initially focused element (when the drawer opened).\n      if (isOpen && openedVia) {\n        this._openedVia = openedVia;\n      }\n\n      var result = this._setOpen(isOpen,\n      /* restoreFocus */\n      !isOpen && this._isFocusWithinDrawer(), this._openedVia || 'program');\n\n      if (!isOpen) {\n        this._openedVia = null;\n      }\n\n      return result;\n    }\n    /**\n     * Toggles the opened state of the drawer.\n     * @param isOpen Whether the drawer should open or close.\n     * @param restoreFocus Whether focus should be restored on close.\n     * @param focusOrigin Origin to use when restoring focus.\n     */\n\n  }, {\n    key: \"_setOpen\",\n    value: function _setOpen(isOpen, restoreFocus, focusOrigin) {\n      var _this5 = this;\n\n      this._opened = isOpen;\n\n      if (isOpen) {\n        this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      } else {\n        this._animationState = 'void';\n\n        if (restoreFocus) {\n          this._restoreFocus(focusOrigin);\n        }\n      }\n\n      this._updateFocusTrapState();\n\n      return new Promise(function (resolve) {\n        _this5.openedChange.pipe(take(1)).subscribe(function (open) {\n          return resolve(open ? 'open' : 'close');\n        });\n      });\n    }\n  }, {\n    key: \"_getWidth\",\n    value: function _getWidth() {\n      return this._elementRef.nativeElement ? this._elementRef.nativeElement.offsetWidth || 0 : 0;\n    }\n    /** Updates the enabled state of the focus trap. */\n\n  }, {\n    key: \"_updateFocusTrapState\",\n    value: function _updateFocusTrapState() {\n      if (this._focusTrap) {\n        // The focus trap is only enabled when the drawer is open in any mode other than side.\n        this._focusTrap.enabled = this.opened && this.mode !== 'side';\n      }\n    }\n    /**\n     * Updates the position of the drawer in the DOM. We need to move the element around ourselves\n     * when it's in the `end` position so that it comes after the content and the visual order\n     * matches the tab order. We also need to be able to move it back to `start` if the sidenav\n     * started off as `end` and was changed to `start`.\n     */\n\n  }, {\n    key: \"_updatePositionInParent\",\n    value: function _updatePositionInParent(newPosition) {\n      var element = this._elementRef.nativeElement;\n      var parent = element.parentNode;\n\n      if (newPosition === 'end') {\n        if (!this._anchor) {\n          this._anchor = this._doc.createComment('mat-drawer-anchor');\n          parent.insertBefore(this._anchor, element);\n        }\n\n        parent.appendChild(element);\n      } else if (this._anchor) {\n        this._anchor.parentNode.insertBefore(element, this._anchor);\n      }\n    }\n  }]);\n\n  return MatDrawer;\n}();\n\nMatDrawer.ɵfac = function MatDrawer_Factory(t) {\n  return new (t || MatDrawer)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.FocusTrapFactory), i0.ɵɵdirectiveInject(i2.FocusMonitor), i0.ɵɵdirectiveInject(i3.Platform), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.InteractivityChecker), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(MAT_DRAWER_CONTAINER, 8));\n};\n\nMatDrawer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatDrawer,\n  selectors: [[\"mat-drawer\"]],\n  viewQuery: function MatDrawer_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c1, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._content = _t.first);\n    }\n  },\n  hostAttrs: [\"tabIndex\", \"-1\", 1, \"mat-drawer\"],\n  hostVars: 12,\n  hostBindings: function MatDrawer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵsyntheticHostListener(\"@transform.start\", function MatDrawer_animation_transform_start_HostBindingHandler($event) {\n        return ctx._animationStarted.next($event);\n      })(\"@transform.done\", function MatDrawer_animation_transform_done_HostBindingHandler($event) {\n        return ctx._animationEnd.next($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"align\", null);\n      i0.ɵɵsyntheticHostProperty(\"@transform\", ctx._animationState);\n      i0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\")(\"mat-drawer-opened\", ctx.opened);\n    }\n  },\n  inputs: {\n    position: \"position\",\n    mode: \"mode\",\n    disableClose: \"disableClose\",\n    autoFocus: \"autoFocus\",\n    opened: \"opened\"\n  },\n  outputs: {\n    openedChange: \"openedChange\",\n    _openedStream: \"opened\",\n    openedStart: \"openedStart\",\n    _closedStream: \"closed\",\n    closedStart: \"closedStart\",\n    onPositionChanged: \"positionChanged\"\n  },\n  exportAs: [\"matDrawer\"],\n  ngContentSelectors: _c0,\n  decls: 3,\n  vars: 0,\n  consts: [[\"cdkScrollable\", \"\", 1, \"mat-drawer-inner-container\"], [\"content\", \"\"]],\n  template: function MatDrawer_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵprojection(2);\n      i0.ɵɵelementEnd();\n    }\n  },\n  dependencies: [i1.CdkScrollable],\n  encapsulation: 2,\n  data: {\n    animation: [matDrawerAnimations.transformDrawer]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDrawer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-drawer',\n      exportAs: 'matDrawer',\n      animations: [matDrawerAnimations.transformDrawer],\n      host: {\n        'class': 'mat-drawer',\n        // must prevent the browser from aligning text based on value\n        '[attr.align]': 'null',\n        '[class.mat-drawer-end]': 'position === \"end\"',\n        '[class.mat-drawer-over]': 'mode === \"over\"',\n        '[class.mat-drawer-push]': 'mode === \"push\"',\n        '[class.mat-drawer-side]': 'mode === \"side\"',\n        '[class.mat-drawer-opened]': 'opened',\n        'tabIndex': '-1',\n        '[@transform]': '_animationState',\n        '(@transform.start)': '_animationStarted.next($event)',\n        '(@transform.done)': '_animationEnd.next($event)'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\"\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i2.FocusTrapFactory\n    }, {\n      type: i2.FocusMonitor\n    }, {\n      type: i3.Platform\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i2.InteractivityChecker\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MatDrawerContainer,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DRAWER_CONTAINER]\n      }]\n    }];\n  }, {\n    position: [{\n      type: Input\n    }],\n    mode: [{\n      type: Input\n    }],\n    disableClose: [{\n      type: Input\n    }],\n    autoFocus: [{\n      type: Input\n    }],\n    opened: [{\n      type: Input\n    }],\n    openedChange: [{\n      type: Output\n    }],\n    _openedStream: [{\n      type: Output,\n      args: ['opened']\n    }],\n    openedStart: [{\n      type: Output\n    }],\n    _closedStream: [{\n      type: Output,\n      args: ['closed']\n    }],\n    closedStart: [{\n      type: Output\n    }],\n    onPositionChanged: [{\n      type: Output,\n      args: ['positionChanged']\n    }],\n    _content: [{\n      type: ViewChild,\n      args: ['content']\n    }]\n  });\n})();\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n\n\nvar MatDrawerContainer = /*#__PURE__*/function () {\n  function MatDrawerContainer(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler) {\n    var _this6 = this;\n\n    var defaultAutosize = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n    var _animationMode = arguments.length > 6 ? arguments[6] : undefined;\n\n    _classCallCheck(this, MatDrawerContainer);\n\n    this._dir = _dir;\n    this._element = _element;\n    this._ngZone = _ngZone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._animationMode = _animationMode;\n    /** Drawers that belong to this container. */\n\n    this._drawers = new QueryList();\n    /** Event emitted when the drawer backdrop is clicked. */\n\n    this.backdropClick = new EventEmitter();\n    /** Emits when the component is destroyed. */\n\n    this._destroyed = new Subject();\n    /** Emits on every ngDoCheck. Used for debouncing reflows. */\n\n    this._doCheckSubject = new Subject();\n    /**\n     * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n     * drawer is open. We use margin rather than transform even for push mode because transform breaks\n     * fixed position elements inside of the transformed element.\n     */\n\n    this._contentMargins = {\n      left: null,\n      right: null\n    };\n    this._contentMarginChanges = new Subject(); // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(function () {\n        _this6._validateDrawers();\n\n        _this6.updateContentMargins();\n      });\n    } // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n\n\n    viewportRuler.change().pipe(takeUntil(this._destroyed)).subscribe(function () {\n      return _this6.updateContentMargins();\n    });\n    this._autosize = defaultAutosize;\n  }\n  /** The drawer child with the `start` position. */\n\n\n  _createClass(MatDrawerContainer, [{\n    key: \"start\",\n    get: function get() {\n      return this._start;\n    }\n    /** The drawer child with the `end` position. */\n\n  }, {\n    key: \"end\",\n    get: function get() {\n      return this._end;\n    }\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     */\n\n  }, {\n    key: \"autosize\",\n    get: function get() {\n      return this._autosize;\n    },\n    set: function set(value) {\n      this._autosize = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     */\n\n  }, {\n    key: \"hasBackdrop\",\n    get: function get() {\n      if (this._backdropOverride == null) {\n        return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n      }\n\n      return this._backdropOverride;\n    },\n    set: function set(value) {\n      this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n    }\n    /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n\n  }, {\n    key: \"scrollable\",\n    get: function get() {\n      return this._userContent || this._content;\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this7 = this;\n\n      this._allDrawers.changes.pipe(startWith(this._allDrawers), takeUntil(this._destroyed)).subscribe(function (drawer) {\n        _this7._drawers.reset(drawer.filter(function (item) {\n          return !item._container || item._container === _this7;\n        }));\n\n        _this7._drawers.notifyOnChanges();\n      });\n\n      this._drawers.changes.pipe(startWith(null)).subscribe(function () {\n        _this7._validateDrawers();\n\n        _this7._drawers.forEach(function (drawer) {\n          _this7._watchDrawerToggle(drawer);\n\n          _this7._watchDrawerPosition(drawer);\n\n          _this7._watchDrawerMode(drawer);\n        });\n\n        if (!_this7._drawers.length || _this7._isDrawerOpen(_this7._start) || _this7._isDrawerOpen(_this7._end)) {\n          _this7.updateContentMargins();\n        }\n\n        _this7._changeDetectorRef.markForCheck();\n      }); // Avoid hitting the NgZone through the debounce timeout.\n\n\n      this._ngZone.runOutsideAngular(function () {\n        _this7._doCheckSubject.pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n        takeUntil(_this7._destroyed)).subscribe(function () {\n          return _this7.updateContentMargins();\n        });\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._contentMarginChanges.complete();\n\n      this._doCheckSubject.complete();\n\n      this._drawers.destroy();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /** Calls `open` of both start and end drawers */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      this._drawers.forEach(function (drawer) {\n        return drawer.open();\n      });\n    }\n    /** Calls `close` of both start and end drawers */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._drawers.forEach(function (drawer) {\n        return drawer.close();\n      });\n    }\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     */\n\n  }, {\n    key: \"updateContentMargins\",\n    value: function updateContentMargins() {\n      var _this8 = this;\n\n      // 1. For drawers in `over` mode, they don't affect the content.\n      // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n      //    left margin (for left drawer) or right margin (for right the drawer).\n      // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n      //    adding to the left or right margin and simultaneously subtracting the same amount of\n      //    margin from the other side.\n      var left = 0;\n      var right = 0;\n\n      if (this._left && this._left.opened) {\n        if (this._left.mode == 'side') {\n          left += this._left._getWidth();\n        } else if (this._left.mode == 'push') {\n          var width = this._left._getWidth();\n\n          left += width;\n          right -= width;\n        }\n      }\n\n      if (this._right && this._right.opened) {\n        if (this._right.mode == 'side') {\n          right += this._right._getWidth();\n        } else if (this._right.mode == 'push') {\n          var _width = this._right._getWidth();\n\n          right += _width;\n          left -= _width;\n        }\n      } // If either `right` or `left` is zero, don't set a style to the element. This\n      // allows users to specify a custom size via CSS class in SSR scenarios where the\n      // measured widths will always be zero. Note that we reset to `null` here, rather\n      // than below, in order to ensure that the types in the `if` below are consistent.\n\n\n      left = left || null;\n      right = right || null;\n\n      if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n        this._contentMargins = {\n          left: left,\n          right: right\n        }; // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n        // to do it only when something changed, otherwise we can end up hitting the zone too often.\n\n        this._ngZone.run(function () {\n          return _this8._contentMarginChanges.next(_this8._contentMargins);\n        });\n      }\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      var _this9 = this;\n\n      // If users opted into autosizing, do a check every change detection cycle.\n      if (this._autosize && this._isPushed()) {\n        // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(function () {\n          return _this9._doCheckSubject.next();\n        });\n      }\n    }\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     */\n\n  }, {\n    key: \"_watchDrawerToggle\",\n    value: function _watchDrawerToggle(drawer) {\n      var _this10 = this;\n\n      drawer._animationStarted.pipe(filter(function (event) {\n        return event.fromState !== event.toState;\n      }), takeUntil(this._drawers.changes)).subscribe(function (event) {\n        // Set the transition class on the container so that the animations occur. This should not\n        // be set initially because animations should only be triggered via a change in state.\n        if (event.toState !== 'open-instant' && _this10._animationMode !== 'NoopAnimations') {\n          _this10._element.nativeElement.classList.add('mat-drawer-transition');\n        }\n\n        _this10.updateContentMargins();\n\n        _this10._changeDetectorRef.markForCheck();\n      });\n\n      if (drawer.mode !== 'side') {\n        drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(function () {\n          return _this10._setContainerClass(drawer.opened);\n        });\n      }\n    }\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     */\n\n  }, {\n    key: \"_watchDrawerPosition\",\n    value: function _watchDrawerPosition(drawer) {\n      var _this11 = this;\n\n      if (!drawer) {\n        return;\n      } // NOTE: We need to wait for the microtask queue to be empty before validating,\n      // since both drawers may be swapping positions at the same time.\n\n\n      drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(function () {\n        _this11._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(function () {\n          _this11._validateDrawers();\n        });\n      });\n    }\n    /** Subscribes to changes in drawer mode so we can run change detection. */\n\n  }, {\n    key: \"_watchDrawerMode\",\n    value: function _watchDrawerMode(drawer) {\n      var _this12 = this;\n\n      if (drawer) {\n        drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed))).subscribe(function () {\n          _this12.updateContentMargins();\n\n          _this12._changeDetectorRef.markForCheck();\n        });\n      }\n    }\n    /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n\n  }, {\n    key: \"_setContainerClass\",\n    value: function _setContainerClass(isAdd) {\n      var classList = this._element.nativeElement.classList;\n      var className = 'mat-drawer-container-has-open';\n\n      if (isAdd) {\n        classList.add(className);\n      } else {\n        classList.remove(className);\n      }\n    }\n    /** Validate the state of the drawer children components. */\n\n  }, {\n    key: \"_validateDrawers\",\n    value: function _validateDrawers() {\n      var _this13 = this;\n\n      this._start = this._end = null; // Ensure that we have at most one start and one end drawer.\n\n      this._drawers.forEach(function (drawer) {\n        if (drawer.position == 'end') {\n          if (_this13._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDuplicatedDrawerError('end');\n          }\n\n          _this13._end = drawer;\n        } else {\n          if (_this13._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDuplicatedDrawerError('start');\n          }\n\n          _this13._start = drawer;\n        }\n      });\n\n      this._right = this._left = null; // Detect if we're LTR or RTL.\n\n      if (this._dir && this._dir.value === 'rtl') {\n        this._left = this._end;\n        this._right = this._start;\n      } else {\n        this._left = this._start;\n        this._right = this._end;\n      }\n    }\n    /** Whether the container is being pushed to the side by one of the drawers. */\n\n  }, {\n    key: \"_isPushed\",\n    value: function _isPushed() {\n      return this._isDrawerOpen(this._start) && this._start.mode != 'over' || this._isDrawerOpen(this._end) && this._end.mode != 'over';\n    }\n  }, {\n    key: \"_onBackdropClicked\",\n    value: function _onBackdropClicked() {\n      this.backdropClick.emit();\n\n      this._closeModalDrawersViaBackdrop();\n    }\n  }, {\n    key: \"_closeModalDrawersViaBackdrop\",\n    value: function _closeModalDrawersViaBackdrop() {\n      var _this14 = this;\n\n      // Close all open drawers where closing is not disabled and the mode is not `side`.\n      [this._start, this._end].filter(function (drawer) {\n        return drawer && !drawer.disableClose && _this14._canHaveBackdrop(drawer);\n      }).forEach(function (drawer) {\n        return drawer._closeViaBackdropClick();\n      });\n    }\n  }, {\n    key: \"_isShowingBackdrop\",\n    value: function _isShowingBackdrop() {\n      return this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start) || this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end);\n    }\n  }, {\n    key: \"_canHaveBackdrop\",\n    value: function _canHaveBackdrop(drawer) {\n      return drawer.mode !== 'side' || !!this._backdropOverride;\n    }\n  }, {\n    key: \"_isDrawerOpen\",\n    value: function _isDrawerOpen(drawer) {\n      return drawer != null && drawer.opened;\n    }\n  }]);\n\n  return MatDrawerContainer;\n}();\n\nMatDrawerContainer.ɵfac = function MatDrawerContainer_Factory(t) {\n  return new (t || MatDrawerContainer)(i0.ɵɵdirectiveInject(i4.Directionality, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.ViewportRuler), i0.ɵɵdirectiveInject(MAT_DRAWER_DEFAULT_AUTOSIZE), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n\nMatDrawerContainer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatDrawerContainer,\n  selectors: [[\"mat-drawer-container\"]],\n  contentQueries: function MatDrawerContainer_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatDrawerContent, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatDrawer, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._content = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._allDrawers = _t);\n    }\n  },\n  viewQuery: function MatDrawerContainer_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(MatDrawerContent, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._userContent = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-drawer-container\"],\n  hostVars: 2,\n  hostBindings: function MatDrawerContainer_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n    }\n  },\n  inputs: {\n    autosize: \"autosize\",\n    hasBackdrop: \"hasBackdrop\"\n  },\n  outputs: {\n    backdropClick: \"backdropClick\"\n  },\n  exportAs: [\"matDrawerContainer\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_DRAWER_CONTAINER,\n    useExisting: MatDrawerContainer\n  }])],\n  ngContentSelectors: _c3,\n  decls: 4,\n  vars: 2,\n  consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"]],\n  template: function MatDrawerContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c2);\n      i0.ɵɵtemplate(0, MatDrawerContainer_div_0_Template, 1, 2, \"div\", 0);\n      i0.ɵɵprojection(1);\n      i0.ɵɵprojection(2, 1);\n      i0.ɵɵtemplate(3, MatDrawerContainer_mat_drawer_content_3_Template, 2, 0, \"mat-drawer-content\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", !ctx._content);\n    }\n  },\n  dependencies: [i5.NgIf, MatDrawerContent],\n  styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDrawerContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-drawer-container',\n      exportAs: 'matDrawerContainer',\n      host: {\n        'class': 'mat-drawer-container',\n        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [{\n        provide: MAT_DRAWER_CONTAINER,\n        useExisting: MatDrawerContainer\n      }],\n      template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n<mat-drawer-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-drawer-content>\\n\",\n      styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"]\n    }]\n  }], function () {\n    return [{\n      type: i4.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DRAWER_DEFAULT_AUTOSIZE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    _allDrawers: [{\n      type: ContentChildren,\n      args: [MatDrawer, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }],\n    _content: [{\n      type: ContentChild,\n      args: [MatDrawerContent]\n    }],\n    _userContent: [{\n      type: ViewChild,\n      args: [MatDrawerContent]\n    }],\n    autosize: [{\n      type: Input\n    }],\n    hasBackdrop: [{\n      type: Input\n    }],\n    backdropClick: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatSidenavContent = /*#__PURE__*/function (_MatDrawerContent) {\n  _inherits(MatSidenavContent, _MatDrawerContent);\n\n  var _super2 = _createSuper(MatSidenavContent);\n\n  function MatSidenavContent(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n    _classCallCheck(this, MatSidenavContent);\n\n    return _super2.call(this, changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n\n  return _createClass(MatSidenavContent);\n}(MatDrawerContent);\n\nMatSidenavContent.ɵfac = function MatSidenavContent_Factory(t) {\n  return new (t || MatSidenavContent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(forwardRef(function () {\n    return MatSidenavContainer;\n  })), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nMatSidenavContent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatSidenavContent,\n  selectors: [[\"mat-sidenav-content\"]],\n  hostAttrs: [1, \"mat-drawer-content\", \"mat-sidenav-content\"],\n  hostVars: 4,\n  hostBindings: function MatSidenavContent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n    }\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkScrollable,\n    useExisting: MatSidenavContent\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatSidenavContent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSidenavContent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-sidenav-content',\n      template: '<ng-content></ng-content>',\n      host: {\n        'class': 'mat-drawer-content mat-sidenav-content',\n        '[style.margin-left.px]': '_container._contentMargins.left',\n        '[style.margin-right.px]': '_container._contentMargins.right'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [{\n        provide: CdkScrollable,\n        useExisting: MatSidenavContent\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: MatSidenavContainer,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(function () {\n          return MatSidenavContainer;\n        })]\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i1.ScrollDispatcher\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n\nvar MatSidenav = /*#__PURE__*/function (_MatDrawer) {\n  _inherits(MatSidenav, _MatDrawer);\n\n  var _super3 = _createSuper(MatSidenav);\n\n  function MatSidenav() {\n    var _this15;\n\n    _classCallCheck(this, MatSidenav);\n\n    _this15 = _super3.apply(this, arguments);\n    _this15._fixedInViewport = false;\n    _this15._fixedTopGap = 0;\n    _this15._fixedBottomGap = 0;\n    return _this15;\n  }\n  /** Whether the sidenav is fixed in the viewport. */\n\n\n  _createClass(MatSidenav, [{\n    key: \"fixedInViewport\",\n    get: function get() {\n      return this._fixedInViewport;\n    },\n    set: function set(value) {\n      this._fixedInViewport = coerceBooleanProperty(value);\n    }\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     */\n\n  }, {\n    key: \"fixedTopGap\",\n    get: function get() {\n      return this._fixedTopGap;\n    },\n    set: function set(value) {\n      this._fixedTopGap = coerceNumberProperty(value);\n    }\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     */\n\n  }, {\n    key: \"fixedBottomGap\",\n    get: function get() {\n      return this._fixedBottomGap;\n    },\n    set: function set(value) {\n      this._fixedBottomGap = coerceNumberProperty(value);\n    }\n  }]);\n\n  return MatSidenav;\n}(MatDrawer);\n\nMatSidenav.ɵfac = /* @__PURE__ */function () {\n  var ɵMatSidenav_BaseFactory;\n  return function MatSidenav_Factory(t) {\n    return (ɵMatSidenav_BaseFactory || (ɵMatSidenav_BaseFactory = i0.ɵɵgetInheritedFactory(MatSidenav)))(t || MatSidenav);\n  };\n}();\n\nMatSidenav.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatSidenav,\n  selectors: [[\"mat-sidenav\"]],\n  hostAttrs: [\"tabIndex\", \"-1\", 1, \"mat-drawer\", \"mat-sidenav\"],\n  hostVars: 17,\n  hostBindings: function MatSidenav_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"align\", null);\n      i0.ɵɵstyleProp(\"top\", ctx.fixedInViewport ? ctx.fixedTopGap : null, \"px\")(\"bottom\", ctx.fixedInViewport ? ctx.fixedBottomGap : null, \"px\");\n      i0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\")(\"mat-drawer-opened\", ctx.opened)(\"mat-sidenav-fixed\", ctx.fixedInViewport);\n    }\n  },\n  inputs: {\n    fixedInViewport: \"fixedInViewport\",\n    fixedTopGap: \"fixedTopGap\",\n    fixedBottomGap: \"fixedBottomGap\"\n  },\n  exportAs: [\"matSidenav\"],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 3,\n  vars: 0,\n  consts: [[\"cdkScrollable\", \"\", 1, \"mat-drawer-inner-container\"], [\"content\", \"\"]],\n  template: function MatSidenav_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵprojection(2);\n      i0.ɵɵelementEnd();\n    }\n  },\n  dependencies: [i1.CdkScrollable],\n  encapsulation: 2,\n  data: {\n    animation: [matDrawerAnimations.transformDrawer]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSidenav, [{\n    type: Component,\n    args: [{\n      selector: 'mat-sidenav',\n      exportAs: 'matSidenav',\n      animations: [matDrawerAnimations.transformDrawer],\n      host: {\n        'class': 'mat-drawer mat-sidenav',\n        'tabIndex': '-1',\n        // must prevent the browser from aligning text based on value\n        '[attr.align]': 'null',\n        '[class.mat-drawer-end]': 'position === \"end\"',\n        '[class.mat-drawer-over]': 'mode === \"over\"',\n        '[class.mat-drawer-push]': 'mode === \"push\"',\n        '[class.mat-drawer-side]': 'mode === \"side\"',\n        '[class.mat-drawer-opened]': 'opened',\n        '[class.mat-sidenav-fixed]': 'fixedInViewport',\n        '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n        '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\"\n    }]\n  }], null, {\n    fixedInViewport: [{\n      type: Input\n    }],\n    fixedTopGap: [{\n      type: Input\n    }],\n    fixedBottomGap: [{\n      type: Input\n    }]\n  });\n})();\n\nvar MatSidenavContainer = /*#__PURE__*/function (_MatDrawerContainer) {\n  _inherits(MatSidenavContainer, _MatDrawerContainer);\n\n  var _super4 = _createSuper(MatSidenavContainer);\n\n  function MatSidenavContainer() {\n    _classCallCheck(this, MatSidenavContainer);\n\n    return _super4.apply(this, arguments);\n  }\n\n  return _createClass(MatSidenavContainer);\n}(MatDrawerContainer);\n\nMatSidenavContainer.ɵfac = /* @__PURE__ */function () {\n  var ɵMatSidenavContainer_BaseFactory;\n  return function MatSidenavContainer_Factory(t) {\n    return (ɵMatSidenavContainer_BaseFactory || (ɵMatSidenavContainer_BaseFactory = i0.ɵɵgetInheritedFactory(MatSidenavContainer)))(t || MatSidenavContainer);\n  };\n}();\n\nMatSidenavContainer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatSidenavContainer,\n  selectors: [[\"mat-sidenav-container\"]],\n  contentQueries: function MatSidenavContainer_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatSidenavContent, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatSidenav, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._content = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._allDrawers = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-drawer-container\", \"mat-sidenav-container\"],\n  hostVars: 2,\n  hostBindings: function MatSidenavContainer_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n    }\n  },\n  exportAs: [\"matSidenavContainer\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_DRAWER_CONTAINER,\n    useExisting: MatSidenavContainer\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c5,\n  decls: 4,\n  vars: 2,\n  consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"]],\n  template: function MatSidenavContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c4);\n      i0.ɵɵtemplate(0, MatSidenavContainer_div_0_Template, 1, 2, \"div\", 0);\n      i0.ɵɵprojection(1);\n      i0.ɵɵprojection(2, 1);\n      i0.ɵɵtemplate(3, MatSidenavContainer_mat_sidenav_content_3_Template, 2, 0, \"mat-sidenav-content\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", !ctx._content);\n    }\n  },\n  dependencies: [i5.NgIf, MatSidenavContent],\n  styles: [_c6],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSidenavContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-sidenav-container',\n      exportAs: 'matSidenavContainer',\n      host: {\n        'class': 'mat-drawer-container mat-sidenav-container',\n        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [{\n        provide: MAT_DRAWER_CONTAINER,\n        useExisting: MatSidenavContainer\n      }],\n      template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n<mat-sidenav-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-sidenav-content>\\n\",\n      styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"]\n    }]\n  }], null, {\n    _allDrawers: [{\n      type: ContentChildren,\n      args: [MatSidenav, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }],\n    _content: [{\n      type: ContentChild,\n      args: [MatSidenavContent]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatSidenavModule = /*#__PURE__*/_createClass(function MatSidenavModule() {\n  _classCallCheck(this, MatSidenavModule);\n});\n\nMatSidenavModule.ɵfac = function MatSidenavModule_Factory(t) {\n  return new (t || MatSidenavModule)();\n};\n\nMatSidenavModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatSidenavModule\n});\nMatSidenavModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule, MatCommonModule, CdkScrollableModule, CdkScrollableModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSidenavModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatCommonModule, CdkScrollableModule],\n      exports: [CdkScrollableModule, MatCommonModule, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent],\n      declarations: [MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError };","map":{"version":3,"names":["i1","CdkScrollable","CdkScrollableModule","i5","DOCUMENT","CommonModule","i0","InjectionToken","forwardRef","Component","ChangeDetectionStrategy","ViewEncapsulation","Inject","EventEmitter","Optional","Input","Output","ViewChild","QueryList","ContentChildren","ContentChild","NgModule","MatCommonModule","coerceBooleanProperty","coerceNumberProperty","ESCAPE","hasModifierKey","Subject","fromEvent","merge","filter","map","mapTo","takeUntil","distinctUntilChanged","take","startWith","debounceTime","trigger","state","style","transition","animate","ANIMATION_MODULE_TYPE","i2","i3","i4","matDrawerAnimations","transformDrawer","throwMatDuplicatedDrawerError","position","Error","MAT_DRAWER_DEFAULT_AUTOSIZE","providedIn","factory","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","MAT_DRAWER_CONTAINER","MatDrawerContent","_changeDetectorRef","_container","elementRef","scrollDispatcher","ngZone","_contentMarginChanges","subscribe","markForCheck","ɵfac","ChangeDetectorRef","MatDrawerContainer","ElementRef","ScrollDispatcher","NgZone","ɵcmp","provide","useExisting","type","args","selector","template","host","changeDetection","OnPush","encapsulation","None","providers","decorators","MatDrawer","_elementRef","_focusTrapFactory","_focusMonitor","_platform","_ngZone","_interactivityChecker","_doc","_elementFocusedBeforeDrawerWasOpened","_enableAnimations","_position","_mode","_disableClose","_opened","_animationStarted","_animationEnd","_animationState","openedChange","_openedStream","pipe","o","openedStart","e","fromState","toState","indexOf","undefined","_closedStream","closedStart","_destroyed","onPositionChanged","_modeChanged","opened","activeElement","_takeFocus","_isFocusWithinDrawer","_restoreFocus","_openedVia","runOutsideAngular","nativeElement","event","keyCode","disableClose","run","close","stopPropagation","preventDefault","x","y","emit","value","_isAttached","_updatePositionInParent","_updateFocusTrapState","next","_autoFocus","mode","toggle","element","options","isFocusable","tabIndex","callback","removeEventListener","removeAttribute","addEventListener","focus","elementToFocus","querySelector","_forceFocus","_focusTrap","autoFocus","focusInitialElementWhenReady","then","hasMovedFocus","_focusByCssSelector","focusOrigin","focusVia","blur","activeEl","contains","create","isBrowser","_a","destroy","_anchor","remove","complete","openedVia","_setOpen","isOpen","result","restoreFocus","Promise","resolve","open","offsetWidth","enabled","newPosition","parent","parentNode","createComment","insertBefore","appendChild","FocusTrapFactory","FocusMonitor","Platform","InteractivityChecker","exportAs","animations","_content","_dir","_element","viewportRuler","defaultAutosize","_animationMode","_drawers","backdropClick","_doCheckSubject","_contentMargins","left","right","change","_validateDrawers","updateContentMargins","_autosize","_start","_end","_backdropOverride","_userContent","_allDrawers","changes","drawer","reset","item","notifyOnChanges","forEach","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","length","_isDrawerOpen","_left","_getWidth","width","_right","_isPushed","classList","add","_setContainerClass","onMicrotaskEmpty","isAdd","className","ngDevMode","_closeModalDrawersViaBackdrop","_canHaveBackdrop","_closeViaBackdropClick","Directionality","ViewportRuler","NgIf","styles","descendants","autosize","hasBackdrop","MatSidenavContent","changeDetectorRef","container","MatSidenavContainer","MatSidenav","arguments","_fixedInViewport","_fixedTopGap","_fixedBottomGap","fixedInViewport","fixedTopGap","fixedBottomGap","MatSidenavModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@angular/material/fesm2015/sidenav.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollable, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, EventEmitter, Optional, Input, Output, ViewChild, QueryList, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, map, mapTo, takeUntil, distinctUntilChanged, take, startWith, debounceTime } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i2 from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/platform';\nimport * as i4 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nconst matDrawerAnimations = {\n    /** Animation that slides a drawer in and out. */\n    transformDrawer: trigger('transform', [\n        // We remove the `transform` here completely, rather than setting it to zero, because:\n        // 1. Having a transform can cause elements with ripples or an animated\n        //    transform to shift around in Chrome with an RTL layout (see #10023).\n        // 2. 3d transforms causes text to appear blurry on IE and Edge.\n        state('open, open-instant', style({\n            'transform': 'none',\n            'visibility': 'visible',\n        })),\n        state('void', style({\n            // Avoids the shadow showing up when closed in SSR.\n            'box-shadow': 'none',\n            'visibility': 'hidden',\n        })),\n        transition('void => open-instant', animate('0ms')),\n        transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ]),\n};\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nfunction throwMatDuplicatedDrawerError(position) {\n    throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/** Configures whether drawers should use auto sizing by default. */\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n    providedIn: 'root',\n    factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\nconst MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n/** @docs-private */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n    return false;\n}\nclass MatDrawerContent extends CdkScrollable {\n    constructor(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n        super(elementRef, scrollDispatcher, ngZone);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._container = _container;\n    }\n    ngAfterContentInit() {\n        this._container._contentMarginChanges.subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n}\nMatDrawerContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDrawerContent, deps: [{ token: i0.ChangeDetectorRef }, { token: forwardRef(() => MatDrawerContainer) }, { token: i0.ElementRef }, { token: i1.ScrollDispatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nMatDrawerContent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatDrawerContent, selector: \"mat-drawer-content\", host: { properties: { \"style.margin-left.px\": \"_container._contentMargins.left\", \"style.margin-right.px\": \"_container._contentMargins.right\" }, classAttribute: \"mat-drawer-content\" }, providers: [\n        {\n            provide: CdkScrollable,\n            useExisting: MatDrawerContent,\n        },\n    ], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDrawerContent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-drawer-content',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        'class': 'mat-drawer-content',\n                        '[style.margin-left.px]': '_container._contentMargins.left',\n                        '[style.margin-right.px]': '_container._contentMargins.right',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: MatDrawerContent,\n                        },\n                    ],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ChangeDetectorRef }, { type: MatDrawerContainer, decorators: [{\n                        type: Inject,\n                        args: [forwardRef(() => MatDrawerContainer)]\n                    }] }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.NgZone }];\n    } });\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nclass MatDrawer {\n    constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _interactivityChecker, _doc, _container) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._focusMonitor = _focusMonitor;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._interactivityChecker = _interactivityChecker;\n        this._doc = _doc;\n        this._container = _container;\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        /** Whether the drawer is initialized. Used for disabling the initial animation. */\n        this._enableAnimations = false;\n        this._position = 'start';\n        this._mode = 'over';\n        this._disableClose = false;\n        this._opened = false;\n        /** Emits whenever the drawer has started animating. */\n        this._animationStarted = new Subject();\n        /** Emits whenever the drawer is done animating. */\n        this._animationEnd = new Subject();\n        /** Current state of the sidenav animation. */\n        this._animationState = 'void';\n        /** Event emitted when the drawer open state is changed. */\n        this.openedChange =\n            // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n            new EventEmitter(/* isAsync */ true);\n        /** Event emitted when the drawer has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the drawer has started opening. */\n        this.openedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0), mapTo(undefined));\n        /** Event emitted when the drawer has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the drawer has started closing. */\n        this.closedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState === 'void'), mapTo(undefined));\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Event emitted when the drawer's position changes. */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onPositionChanged = new EventEmitter();\n        /**\n         * An observable that emits when the drawer mode changes. This is used by the drawer container to\n         * to know when to when the mode changes so it can adapt the margins on the content.\n         */\n        this._modeChanged = new Subject();\n        this.openedChange.subscribe((opened) => {\n            if (opened) {\n                if (this._doc) {\n                    this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement;\n                }\n                this._takeFocus();\n            }\n            else if (this._isFocusWithinDrawer()) {\n                this._restoreFocus(this._openedVia || 'program');\n            }\n        });\n        /**\n         * Listen to `keydown` events outside the zone so that change detection is not run every\n         * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n         * and we don't have close disabled.\n         */\n        this._ngZone.runOutsideAngular(() => {\n            fromEvent(this._elementRef.nativeElement, 'keydown')\n                .pipe(filter(event => {\n                return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }), takeUntil(this._destroyed))\n                .subscribe(event => this._ngZone.run(() => {\n                this.close();\n                event.stopPropagation();\n                event.preventDefault();\n            }));\n        });\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._animationEnd\n            .pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))\n            .subscribe((event) => {\n            const { fromState, toState } = event;\n            if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n                (toState === 'void' && fromState.indexOf('open') === 0)) {\n                this.openedChange.emit(this._opened);\n            }\n        });\n    }\n    /** The side that the drawer is attached to. */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        // Make sure we have a valid value.\n        value = value === 'end' ? 'end' : 'start';\n        if (value !== this._position) {\n            // Static inputs in Ivy are set before the element is in the DOM.\n            if (this._isAttached) {\n                this._updatePositionInParent(value);\n            }\n            this._position = value;\n            this.onPositionChanged.emit();\n        }\n    }\n    /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n    get mode() {\n        return this._mode;\n    }\n    set mode(value) {\n        this._mode = value;\n        this._updateFocusTrapState();\n        this._modeChanged.next();\n    }\n    /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n    get disableClose() {\n        return this._disableClose;\n    }\n    set disableClose(value) {\n        this._disableClose = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer should focus the first focusable element automatically when opened.\n     * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n     * enabled, focus will be moved into the sidenav in `side` mode as well.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or AutoFocusTarget\n     * instead.\n     */\n    get autoFocus() {\n        const value = this._autoFocus;\n        // Note that usually we don't allow autoFocus to be set to `first-tabbable` in `side` mode,\n        // because we don't know how the sidenav is being used, but in some cases it still makes\n        // sense to do it. The consumer can explicitly set `autoFocus`.\n        if (value == null) {\n            if (this.mode === 'side') {\n                return 'dialog';\n            }\n            else {\n                return 'first-tabbable';\n            }\n        }\n        return value;\n    }\n    set autoFocus(value) {\n        if (value === 'true' || value === 'false' || value == null) {\n            value = coerceBooleanProperty(value);\n        }\n        this._autoFocus = value;\n    }\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     */\n    get opened() {\n        return this._opened;\n    }\n    set opened(value) {\n        this.toggle(coerceBooleanProperty(value));\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    element.removeEventListener('blur', callback);\n                    element.removeEventListener('mousedown', callback);\n                    element.removeAttribute('tabindex');\n                };\n                element.addEventListener('blur', callback);\n                element.addEventListener('mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves focus into the drawer. Note that this works even if\n     * the focus trap is disabled in `side` mode.\n     */\n    _takeFocus() {\n        if (!this._focusTrap) {\n            return;\n        }\n        const element = this._elementRef.nativeElement;\n        // When autoFocus is not on the sidenav, if the element cannot be focused or does\n        // not exist, focus the sidenav itself so the keyboard navigation still works.\n        // We need to check that `focus` is a function due to Universal.\n        switch (this.autoFocus) {\n            case false:\n            case 'dialog':\n                return;\n            case true:\n            case 'first-tabbable':\n                this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n                    if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n                        element.focus();\n                    }\n                });\n                break;\n            case 'first-heading':\n                this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                break;\n            default:\n                this._focusByCssSelector(this.autoFocus);\n                break;\n        }\n    }\n    /**\n     * Restores focus to the element that was originally focused when the drawer opened.\n     * If no element was focused at that time, the focus will be restored to the drawer.\n     */\n    _restoreFocus(focusOrigin) {\n        if (this.autoFocus === 'dialog') {\n            return;\n        }\n        if (this._elementFocusedBeforeDrawerWasOpened) {\n            this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, focusOrigin);\n        }\n        else {\n            this._elementRef.nativeElement.blur();\n        }\n        this._elementFocusedBeforeDrawerWasOpened = null;\n    }\n    /** Whether focus is currently within the drawer. */\n    _isFocusWithinDrawer() {\n        const activeEl = this._doc.activeElement;\n        return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n    }\n    ngAfterViewInit() {\n        this._isAttached = true;\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        this._updateFocusTrapState();\n        // Only update the DOM position when the sidenav is positioned at\n        // the end since we project the sidenav before the content by default.\n        if (this._position === 'end') {\n            this._updatePositionInParent('end');\n        }\n    }\n    ngAfterContentChecked() {\n        // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n        // drawers that are open by default. When we're on the server, we shouldn't enable the\n        // animations, because we don't want the drawer to animate the first time the user sees\n        // the page.\n        if (this._platform.isBrowser) {\n            this._enableAnimations = true;\n        }\n    }\n    ngOnDestroy() {\n        var _a;\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n        (_a = this._anchor) === null || _a === void 0 ? void 0 : _a.remove();\n        this._anchor = null;\n        this._animationStarted.complete();\n        this._animationEnd.complete();\n        this._modeChanged.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Open the drawer.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    open(openedVia) {\n        return this.toggle(true, openedVia);\n    }\n    /** Close the drawer. */\n    close() {\n        return this.toggle(false);\n    }\n    /** Closes the drawer with context that the backdrop was clicked. */\n    _closeViaBackdropClick() {\n        // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n        // don't need to check whether focus is currently in the drawer, as clicking on the\n        // backdrop causes blurs the active element.\n        return this._setOpen(/* isOpen */ false, /* restoreFocus */ true, 'mouse');\n    }\n    /**\n     * Toggle this drawer.\n     * @param isOpen Whether the drawer should be open.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    toggle(isOpen = !this.opened, openedVia) {\n        // If the focus is currently inside the drawer content and we are closing the drawer,\n        // restore the focus to the initially focused element (when the drawer opened).\n        if (isOpen && openedVia) {\n            this._openedVia = openedVia;\n        }\n        const result = this._setOpen(isOpen, \n        /* restoreFocus */ !isOpen && this._isFocusWithinDrawer(), this._openedVia || 'program');\n        if (!isOpen) {\n            this._openedVia = null;\n        }\n        return result;\n    }\n    /**\n     * Toggles the opened state of the drawer.\n     * @param isOpen Whether the drawer should open or close.\n     * @param restoreFocus Whether focus should be restored on close.\n     * @param focusOrigin Origin to use when restoring focus.\n     */\n    _setOpen(isOpen, restoreFocus, focusOrigin) {\n        this._opened = isOpen;\n        if (isOpen) {\n            this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n        }\n        else {\n            this._animationState = 'void';\n            if (restoreFocus) {\n                this._restoreFocus(focusOrigin);\n            }\n        }\n        this._updateFocusTrapState();\n        return new Promise(resolve => {\n            this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n        });\n    }\n    _getWidth() {\n        return this._elementRef.nativeElement ? this._elementRef.nativeElement.offsetWidth || 0 : 0;\n    }\n    /** Updates the enabled state of the focus trap. */\n    _updateFocusTrapState() {\n        if (this._focusTrap) {\n            // The focus trap is only enabled when the drawer is open in any mode other than side.\n            this._focusTrap.enabled = this.opened && this.mode !== 'side';\n        }\n    }\n    /**\n     * Updates the position of the drawer in the DOM. We need to move the element around ourselves\n     * when it's in the `end` position so that it comes after the content and the visual order\n     * matches the tab order. We also need to be able to move it back to `start` if the sidenav\n     * started off as `end` and was changed to `start`.\n     */\n    _updatePositionInParent(newPosition) {\n        const element = this._elementRef.nativeElement;\n        const parent = element.parentNode;\n        if (newPosition === 'end') {\n            if (!this._anchor) {\n                this._anchor = this._doc.createComment('mat-drawer-anchor');\n                parent.insertBefore(this._anchor, element);\n            }\n            parent.appendChild(element);\n        }\n        else if (this._anchor) {\n            this._anchor.parentNode.insertBefore(element, this._anchor);\n        }\n    }\n}\nMatDrawer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDrawer, deps: [{ token: i0.ElementRef }, { token: i2.FocusTrapFactory }, { token: i2.FocusMonitor }, { token: i3.Platform }, { token: i0.NgZone }, { token: i2.InteractivityChecker }, { token: DOCUMENT, optional: true }, { token: MAT_DRAWER_CONTAINER, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatDrawer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatDrawer, selector: \"mat-drawer\", inputs: { position: \"position\", mode: \"mode\", disableClose: \"disableClose\", autoFocus: \"autoFocus\", opened: \"opened\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", openedStart: \"openedStart\", _closedStream: \"closed\", closedStart: \"closedStart\", onPositionChanged: \"positionChanged\" }, host: { attributes: { \"tabIndex\": \"-1\" }, listeners: { \"@transform.start\": \"_animationStarted.next($event)\", \"@transform.done\": \"_animationEnd.next($event)\" }, properties: { \"attr.align\": \"null\", \"class.mat-drawer-end\": \"position === \\\"end\\\"\", \"class.mat-drawer-over\": \"mode === \\\"over\\\"\", \"class.mat-drawer-push\": \"mode === \\\"push\\\"\", \"class.mat-drawer-side\": \"mode === \\\"side\\\"\", \"class.mat-drawer-opened\": \"opened\", \"@transform\": \"_animationState\" }, classAttribute: \"mat-drawer\" }, viewQueries: [{ propertyName: \"_content\", first: true, predicate: [\"content\"], descendants: true }], exportAs: [\"matDrawer\"], ngImport: i0, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\", dependencies: [{ kind: \"directive\", type: i1.CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\" }], animations: [matDrawerAnimations.transformDrawer], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDrawer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-drawer', exportAs: 'matDrawer', animations: [matDrawerAnimations.transformDrawer], host: {\n                        'class': 'mat-drawer',\n                        // must prevent the browser from aligning text based on value\n                        '[attr.align]': 'null',\n                        '[class.mat-drawer-end]': 'position === \"end\"',\n                        '[class.mat-drawer-over]': 'mode === \"over\"',\n                        '[class.mat-drawer-push]': 'mode === \"push\"',\n                        '[class.mat-drawer-side]': 'mode === \"side\"',\n                        '[class.mat-drawer-opened]': 'opened',\n                        'tabIndex': '-1',\n                        '[@transform]': '_animationState',\n                        '(@transform.start)': '_animationStarted.next($event)',\n                        '(@transform.done)': '_animationEnd.next($event)',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\" }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i2.FocusTrapFactory }, { type: i2.FocusMonitor }, { type: i3.Platform }, { type: i0.NgZone }, { type: i2.InteractivityChecker }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: MatDrawerContainer, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_DRAWER_CONTAINER]\n                    }] }];\n    }, propDecorators: { position: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], disableClose: [{\n                type: Input\n            }], autoFocus: [{\n                type: Input\n            }], opened: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], openedStart: [{\n                type: Output\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], closedStart: [{\n                type: Output\n            }], onPositionChanged: [{\n                type: Output,\n                args: ['positionChanged']\n            }], _content: [{\n                type: ViewChild,\n                args: ['content']\n            }] } });\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nclass MatDrawerContainer {\n    constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {\n        this._dir = _dir;\n        this._element = _element;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        /** Drawers that belong to this container. */\n        this._drawers = new QueryList();\n        /** Event emitted when the drawer backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Emits on every ngDoCheck. Used for debouncing reflows. */\n        this._doCheckSubject = new Subject();\n        /**\n         * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n         * drawer is open. We use margin rather than transform even for push mode because transform breaks\n         * fixed position elements inside of the transformed element.\n         */\n        this._contentMargins = { left: null, right: null };\n        this._contentMarginChanges = new Subject();\n        // If a `Dir` directive exists up the tree, listen direction changes\n        // and update the left/right properties to point to the proper start/end.\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._validateDrawers();\n                this.updateContentMargins();\n            });\n        }\n        // Since the minimum width of the sidenav depends on the viewport width,\n        // we need to recompute the margins if the viewport changes.\n        viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateContentMargins());\n        this._autosize = defaultAutosize;\n    }\n    /** The drawer child with the `start` position. */\n    get start() {\n        return this._start;\n    }\n    /** The drawer child with the `end` position. */\n    get end() {\n        return this._end;\n    }\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     */\n    get autosize() {\n        return this._autosize;\n    }\n    set autosize(value) {\n        this._autosize = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     */\n    get hasBackdrop() {\n        if (this._backdropOverride == null) {\n            return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n        }\n        return this._backdropOverride;\n    }\n    set hasBackdrop(value) {\n        this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n    }\n    /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n    get scrollable() {\n        return this._userContent || this._content;\n    }\n    ngAfterContentInit() {\n        this._allDrawers.changes\n            .pipe(startWith(this._allDrawers), takeUntil(this._destroyed))\n            .subscribe((drawer) => {\n            this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n            this._drawers.notifyOnChanges();\n        });\n        this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n            this._validateDrawers();\n            this._drawers.forEach((drawer) => {\n                this._watchDrawerToggle(drawer);\n                this._watchDrawerPosition(drawer);\n                this._watchDrawerMode(drawer);\n            });\n            if (!this._drawers.length ||\n                this._isDrawerOpen(this._start) ||\n                this._isDrawerOpen(this._end)) {\n                this.updateContentMargins();\n            }\n            this._changeDetectorRef.markForCheck();\n        });\n        // Avoid hitting the NgZone through the debounce timeout.\n        this._ngZone.runOutsideAngular(() => {\n            this._doCheckSubject\n                .pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n            takeUntil(this._destroyed))\n                .subscribe(() => this.updateContentMargins());\n        });\n    }\n    ngOnDestroy() {\n        this._contentMarginChanges.complete();\n        this._doCheckSubject.complete();\n        this._drawers.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Calls `open` of both start and end drawers */\n    open() {\n        this._drawers.forEach(drawer => drawer.open());\n    }\n    /** Calls `close` of both start and end drawers */\n    close() {\n        this._drawers.forEach(drawer => drawer.close());\n    }\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     */\n    updateContentMargins() {\n        // 1. For drawers in `over` mode, they don't affect the content.\n        // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n        //    left margin (for left drawer) or right margin (for right the drawer).\n        // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n        //    adding to the left or right margin and simultaneously subtracting the same amount of\n        //    margin from the other side.\n        let left = 0;\n        let right = 0;\n        if (this._left && this._left.opened) {\n            if (this._left.mode == 'side') {\n                left += this._left._getWidth();\n            }\n            else if (this._left.mode == 'push') {\n                const width = this._left._getWidth();\n                left += width;\n                right -= width;\n            }\n        }\n        if (this._right && this._right.opened) {\n            if (this._right.mode == 'side') {\n                right += this._right._getWidth();\n            }\n            else if (this._right.mode == 'push') {\n                const width = this._right._getWidth();\n                right += width;\n                left -= width;\n            }\n        }\n        // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero. Note that we reset to `null` here, rather\n        // than below, in order to ensure that the types in the `if` below are consistent.\n        left = left || null;\n        right = right || null;\n        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n            this._contentMargins = { left, right };\n            // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n            // to do it only when something changed, otherwise we can end up hitting the zone too often.\n            this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n        }\n    }\n    ngDoCheck() {\n        // If users opted into autosizing, do a check every change detection cycle.\n        if (this._autosize && this._isPushed()) {\n            // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n            this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n        }\n    }\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     */\n    _watchDrawerToggle(drawer) {\n        drawer._animationStarted\n            .pipe(filter((event) => event.fromState !== event.toState), takeUntil(this._drawers.changes))\n            .subscribe((event) => {\n            // Set the transition class on the container so that the animations occur. This should not\n            // be set initially because animations should only be triggered via a change in state.\n            if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n                this._element.nativeElement.classList.add('mat-drawer-transition');\n            }\n            this.updateContentMargins();\n            this._changeDetectorRef.markForCheck();\n        });\n        if (drawer.mode !== 'side') {\n            drawer.openedChange\n                .pipe(takeUntil(this._drawers.changes))\n                .subscribe(() => this._setContainerClass(drawer.opened));\n        }\n    }\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     */\n    _watchDrawerPosition(drawer) {\n        if (!drawer) {\n            return;\n        }\n        // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping positions at the same time.\n        drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n            this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n                this._validateDrawers();\n            });\n        });\n    }\n    /** Subscribes to changes in drawer mode so we can run change detection. */\n    _watchDrawerMode(drawer) {\n        if (drawer) {\n            drawer._modeChanged\n                .pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n                .subscribe(() => {\n                this.updateContentMargins();\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n    _setContainerClass(isAdd) {\n        const classList = this._element.nativeElement.classList;\n        const className = 'mat-drawer-container-has-open';\n        if (isAdd) {\n            classList.add(className);\n        }\n        else {\n            classList.remove(className);\n        }\n    }\n    /** Validate the state of the drawer children components. */\n    _validateDrawers() {\n        this._start = this._end = null;\n        // Ensure that we have at most one start and one end drawer.\n        this._drawers.forEach(drawer => {\n            if (drawer.position == 'end') {\n                if (this._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('end');\n                }\n                this._end = drawer;\n            }\n            else {\n                if (this._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('start');\n                }\n                this._start = drawer;\n            }\n        });\n        this._right = this._left = null;\n        // Detect if we're LTR or RTL.\n        if (this._dir && this._dir.value === 'rtl') {\n            this._left = this._end;\n            this._right = this._start;\n        }\n        else {\n            this._left = this._start;\n            this._right = this._end;\n        }\n    }\n    /** Whether the container is being pushed to the side by one of the drawers. */\n    _isPushed() {\n        return ((this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n            (this._isDrawerOpen(this._end) && this._end.mode != 'over'));\n    }\n    _onBackdropClicked() {\n        this.backdropClick.emit();\n        this._closeModalDrawersViaBackdrop();\n    }\n    _closeModalDrawersViaBackdrop() {\n        // Close all open drawers where closing is not disabled and the mode is not `side`.\n        [this._start, this._end]\n            .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n            .forEach(drawer => drawer._closeViaBackdropClick());\n    }\n    _isShowingBackdrop() {\n        return ((this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n            (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end)));\n    }\n    _canHaveBackdrop(drawer) {\n        return drawer.mode !== 'side' || !!this._backdropOverride;\n    }\n    _isDrawerOpen(drawer) {\n        return drawer != null && drawer.opened;\n    }\n}\nMatDrawerContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDrawerContainer, deps: [{ token: i4.Directionality, optional: true }, { token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: i1.ViewportRuler }, { token: MAT_DRAWER_DEFAULT_AUTOSIZE }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatDrawerContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatDrawerContainer, selector: \"mat-drawer-container\", inputs: { autosize: \"autosize\", hasBackdrop: \"hasBackdrop\" }, outputs: { backdropClick: \"backdropClick\" }, host: { properties: { \"class.mat-drawer-container-explicit-backdrop\": \"_backdropOverride\" }, classAttribute: \"mat-drawer-container\" }, providers: [\n        {\n            provide: MAT_DRAWER_CONTAINER,\n            useExisting: MatDrawerContainer,\n        },\n    ], queries: [{ propertyName: \"_content\", first: true, predicate: MatDrawerContent, descendants: true }, { propertyName: \"_allDrawers\", predicate: MatDrawer, descendants: true }], viewQueries: [{ propertyName: \"_userContent\", first: true, predicate: MatDrawerContent, descendants: true }], exportAs: [\"matDrawerContainer\"], ngImport: i0, template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n<mat-drawer-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-drawer-content>\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"], dependencies: [{ kind: \"directive\", type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: MatDrawerContent, selector: \"mat-drawer-content\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatDrawerContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-drawer-container', exportAs: 'matDrawerContainer', host: {\n                        'class': 'mat-drawer-container',\n                        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [\n                        {\n                            provide: MAT_DRAWER_CONTAINER,\n                            useExisting: MatDrawerContainer,\n                        },\n                    ], template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n<mat-drawer-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-drawer-content>\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i4.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_DRAWER_DEFAULT_AUTOSIZE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { _allDrawers: [{\n                type: ContentChildren,\n                args: [MatDrawer, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }], _content: [{\n                type: ContentChild,\n                args: [MatDrawerContent]\n            }], _userContent: [{\n                type: ViewChild,\n                args: [MatDrawerContent]\n            }], autosize: [{\n                type: Input\n            }], hasBackdrop: [{\n                type: Input\n            }], backdropClick: [{\n                type: Output\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSidenavContent extends MatDrawerContent {\n    constructor(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n        super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n    }\n}\nMatSidenavContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSidenavContent, deps: [{ token: i0.ChangeDetectorRef }, { token: forwardRef(() => MatSidenavContainer) }, { token: i0.ElementRef }, { token: i1.ScrollDispatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nMatSidenavContent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatSidenavContent, selector: \"mat-sidenav-content\", host: { properties: { \"style.margin-left.px\": \"_container._contentMargins.left\", \"style.margin-right.px\": \"_container._contentMargins.right\" }, classAttribute: \"mat-drawer-content mat-sidenav-content\" }, providers: [\n        {\n            provide: CdkScrollable,\n            useExisting: MatSidenavContent,\n        },\n    ], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSidenavContent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-sidenav-content',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        'class': 'mat-drawer-content mat-sidenav-content',\n                        '[style.margin-left.px]': '_container._contentMargins.left',\n                        '[style.margin-right.px]': '_container._contentMargins.right',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: MatSidenavContent,\n                        },\n                    ],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ChangeDetectorRef }, { type: MatSidenavContainer, decorators: [{\n                        type: Inject,\n                        args: [forwardRef(() => MatSidenavContainer)]\n                    }] }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.NgZone }];\n    } });\nclass MatSidenav extends MatDrawer {\n    constructor() {\n        super(...arguments);\n        this._fixedInViewport = false;\n        this._fixedTopGap = 0;\n        this._fixedBottomGap = 0;\n    }\n    /** Whether the sidenav is fixed in the viewport. */\n    get fixedInViewport() {\n        return this._fixedInViewport;\n    }\n    set fixedInViewport(value) {\n        this._fixedInViewport = coerceBooleanProperty(value);\n    }\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     */\n    get fixedTopGap() {\n        return this._fixedTopGap;\n    }\n    set fixedTopGap(value) {\n        this._fixedTopGap = coerceNumberProperty(value);\n    }\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     */\n    get fixedBottomGap() {\n        return this._fixedBottomGap;\n    }\n    set fixedBottomGap(value) {\n        this._fixedBottomGap = coerceNumberProperty(value);\n    }\n}\nMatSidenav.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSidenav, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSidenav.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatSidenav, selector: \"mat-sidenav\", inputs: { fixedInViewport: \"fixedInViewport\", fixedTopGap: \"fixedTopGap\", fixedBottomGap: \"fixedBottomGap\" }, host: { attributes: { \"tabIndex\": \"-1\" }, properties: { \"attr.align\": \"null\", \"class.mat-drawer-end\": \"position === \\\"end\\\"\", \"class.mat-drawer-over\": \"mode === \\\"over\\\"\", \"class.mat-drawer-push\": \"mode === \\\"push\\\"\", \"class.mat-drawer-side\": \"mode === \\\"side\\\"\", \"class.mat-drawer-opened\": \"opened\", \"class.mat-sidenav-fixed\": \"fixedInViewport\", \"style.top.px\": \"fixedInViewport ? fixedTopGap : null\", \"style.bottom.px\": \"fixedInViewport ? fixedBottomGap : null\" }, classAttribute: \"mat-drawer mat-sidenav\" }, exportAs: [\"matSidenav\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\", dependencies: [{ kind: \"directive\", type: i1.CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\" }], animations: [matDrawerAnimations.transformDrawer], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSidenav, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-sidenav', exportAs: 'matSidenav', animations: [matDrawerAnimations.transformDrawer], host: {\n                        'class': 'mat-drawer mat-sidenav',\n                        'tabIndex': '-1',\n                        // must prevent the browser from aligning text based on value\n                        '[attr.align]': 'null',\n                        '[class.mat-drawer-end]': 'position === \"end\"',\n                        '[class.mat-drawer-over]': 'mode === \"over\"',\n                        '[class.mat-drawer-push]': 'mode === \"push\"',\n                        '[class.mat-drawer-side]': 'mode === \"side\"',\n                        '[class.mat-drawer-opened]': 'opened',\n                        '[class.mat-sidenav-fixed]': 'fixedInViewport',\n                        '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n                        '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\" }]\n        }], propDecorators: { fixedInViewport: [{\n                type: Input\n            }], fixedTopGap: [{\n                type: Input\n            }], fixedBottomGap: [{\n                type: Input\n            }] } });\nclass MatSidenavContainer extends MatDrawerContainer {\n}\nMatSidenavContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSidenavContainer, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSidenavContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatSidenavContainer, selector: \"mat-sidenav-container\", host: { properties: { \"class.mat-drawer-container-explicit-backdrop\": \"_backdropOverride\" }, classAttribute: \"mat-drawer-container mat-sidenav-container\" }, providers: [\n        {\n            provide: MAT_DRAWER_CONTAINER,\n            useExisting: MatSidenavContainer,\n        },\n    ], queries: [{ propertyName: \"_content\", first: true, predicate: MatSidenavContent, descendants: true }, { propertyName: \"_allDrawers\", predicate: MatSidenav, descendants: true }], exportAs: [\"matSidenavContainer\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n<mat-sidenav-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-sidenav-content>\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"], dependencies: [{ kind: \"directive\", type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: MatSidenavContent, selector: \"mat-sidenav-content\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSidenavContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-sidenav-container', exportAs: 'matSidenavContainer', host: {\n                        'class': 'mat-drawer-container mat-sidenav-container',\n                        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [\n                        {\n                            provide: MAT_DRAWER_CONTAINER,\n                            useExisting: MatSidenavContainer,\n                        },\n                    ], template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n<mat-sidenav-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-sidenav-content>\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"] }]\n        }], propDecorators: { _allDrawers: [{\n                type: ContentChildren,\n                args: [MatSidenav, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }], _content: [{\n                type: ContentChild,\n                args: [MatSidenavContent]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSidenavModule {\n}\nMatSidenavModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSidenavModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSidenavModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSidenavModule, declarations: [MatDrawer,\n        MatDrawerContainer,\n        MatDrawerContent,\n        MatSidenav,\n        MatSidenavContainer,\n        MatSidenavContent], imports: [CommonModule, MatCommonModule, CdkScrollableModule], exports: [CdkScrollableModule,\n        MatCommonModule,\n        MatDrawer,\n        MatDrawerContainer,\n        MatDrawerContent,\n        MatSidenav,\n        MatSidenavContainer,\n        MatSidenavContent] });\nMatSidenavModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSidenavModule, imports: [CommonModule, MatCommonModule, CdkScrollableModule, CdkScrollableModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSidenavModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatCommonModule, CdkScrollableModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatCommonModule,\n                        MatDrawer,\n                        MatDrawerContainer,\n                        MatDrawerContent,\n                        MatSidenav,\n                        MatSidenavContainer,\n                        MatSidenavContent,\n                    ],\n                    declarations: [\n                        MatDrawer,\n                        MatDrawerContainer,\n                        MatDrawerContent,\n                        MatSidenav,\n                        MatSidenavContainer,\n                        MatSidenavContent,\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _get from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _createForOfIteratorHelper from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, isDataSource, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Optional, Input, ContentChild, Injectable, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, EventEmitter, NgZone, Attribute, SkipSelf, Output, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { Subject, from, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/bidi';\nimport * as i2 from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\n\nvar _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\nvar _c1 = [\"caption\", \"colgroup, col\"];\n\nfunction CdkTextColumn_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n  }\n}\n\nfunction CdkTextColumn_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var data_r2 = ctx.$implicit;\n    var ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\n  }\n}\n\nfunction mixinHasStickyInput(base) {\n  return /*#__PURE__*/function (_base) {\n    _inherits(_class, _base);\n\n    var _super = _createSuper(_class);\n\n    function _class() {\n      var _this;\n\n      _classCallCheck(this, _class);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n      _this._sticky = false;\n      /** Whether the sticky input has changed since it was last checked. */\n\n      _this._hasStickyChanged = false;\n      return _this;\n    }\n    /** Whether sticky positioning should be applied. */\n\n\n    _createClass(_class, [{\n      key: \"sticky\",\n      get: function get() {\n        return this._sticky;\n      },\n      set: function set(v) {\n        var prevValue = this._sticky;\n        this._sticky = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._sticky;\n      }\n      /** Whether the sticky value has changed since this was last called. */\n\n    }, {\n      key: \"hasStickyChanged\",\n      value: function hasStickyChanged() {\n        var hasStickyChanged = this._hasStickyChanged;\n        this._hasStickyChanged = false;\n        return hasStickyChanged;\n      }\n      /** Resets the dirty check for cases where the sticky state has been used without checking. */\n\n    }, {\n      key: \"resetStickyChanged\",\n      value: function resetStickyChanged() {\n        this._hasStickyChanged = false;\n      }\n    }]);\n\n    return _class;\n  }(base);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\n\n\nvar CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\n\nvar TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n\nvar CdkCellDef = /*#__PURE__*/_createClass(function CdkCellDef(\n/** @docs-private */\ntemplate) {\n  _classCallCheck(this, CdkCellDef);\n\n  this.template = template;\n});\n\nCdkCellDef.ɵfac = function CdkCellDef_Factory(t) {\n  return new (t || CdkCellDef)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nCdkCellDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkCellDef,\n  selectors: [[\"\", \"cdkCellDef\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n\n\nvar CdkHeaderCellDef = /*#__PURE__*/_createClass(function CdkHeaderCellDef(\n/** @docs-private */\ntemplate) {\n  _classCallCheck(this, CdkHeaderCellDef);\n\n  this.template = template;\n});\n\nCdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) {\n  return new (t || CdkHeaderCellDef)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nCdkHeaderCellDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkHeaderCellDef,\n  selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkHeaderCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkHeaderCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n\n\nvar CdkFooterCellDef = /*#__PURE__*/_createClass(function CdkFooterCellDef(\n/** @docs-private */\ntemplate) {\n  _classCallCheck(this, CdkFooterCellDef);\n\n  this.template = template;\n});\n\nCdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) {\n  return new (t || CdkFooterCellDef)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nCdkFooterCellDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkFooterCellDef,\n  selectors: [[\"\", \"cdkFooterCellDef\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkFooterCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkFooterCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})(); // Boilerplate for applying mixins to CdkColumnDef.\n\n/** @docs-private */\n\n\nvar CdkColumnDefBase = /*#__PURE__*/_createClass(function CdkColumnDefBase() {\n  _classCallCheck(this, CdkColumnDefBase);\n});\n\nvar _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\n\n\nvar CdkColumnDef = /*#__PURE__*/function (_CdkColumnDefBase2) {\n  _inherits(CdkColumnDef, _CdkColumnDefBase2);\n\n  var _super2 = _createSuper(CdkColumnDef);\n\n  function CdkColumnDef(_table) {\n    var _this2;\n\n    _classCallCheck(this, CdkColumnDef);\n\n    _this2 = _super2.call(this);\n    _this2._table = _table;\n    _this2._stickyEnd = false;\n    return _this2;\n  }\n  /** Unique name for this column. */\n\n\n  _createClass(CdkColumnDef, [{\n    key: \"name\",\n    get: function get() {\n      return this._name;\n    },\n    set: function set(name) {\n      this._setNameInput(name);\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n\n  }, {\n    key: \"stickyEnd\",\n    get: function get() {\n      return this._stickyEnd;\n    },\n    set: function set(v) {\n      var prevValue = this._stickyEnd;\n      this._stickyEnd = coerceBooleanProperty(v);\n      this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n\n  }, {\n    key: \"_updateColumnCssClassName\",\n    value: function _updateColumnCssClassName() {\n      this._columnCssClassName = [\"cdk-column-\".concat(this.cssClassFriendlyName)];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n\n  }, {\n    key: \"_setNameInput\",\n    value: function _setNameInput(value) {\n      // If the directive is set without a name (updated programmatically), then this setter will\n      // trigger with an empty string and should not overwrite the programmatically set value.\n      if (value) {\n        this._name = value;\n        this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');\n\n        this._updateColumnCssClassName();\n      }\n    }\n  }]);\n\n  return CdkColumnDef;\n}(_CdkColumnDefBase);\n\nCdkColumnDef.ɵfac = function CdkColumnDef_Factory(t) {\n  return new (t || CdkColumnDef)(i0.ɵɵdirectiveInject(CDK_TABLE, 8));\n};\n\nCdkColumnDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkColumnDef,\n  selectors: [[\"\", \"cdkColumnDef\", \"\"]],\n  contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, CdkCellDef, 5);\n      i0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, 5);\n      i0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n    }\n  },\n  inputs: {\n    sticky: \"sticky\",\n    name: [\"cdkColumnDef\", \"name\"],\n    stickyEnd: \"stickyEnd\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n    useExisting: CdkColumnDef\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkColumnDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkColumnDef]',\n      inputs: ['sticky'],\n      providers: [{\n        provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n        useExisting: CdkColumnDef\n      }]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TABLE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    name: [{\n      type: Input,\n      args: ['cdkColumnDef']\n    }],\n    stickyEnd: [{\n      type: Input,\n      args: ['stickyEnd']\n    }],\n    cell: [{\n      type: ContentChild,\n      args: [CdkCellDef]\n    }],\n    headerCell: [{\n      type: ContentChild,\n      args: [CdkHeaderCellDef]\n    }],\n    footerCell: [{\n      type: ContentChild,\n      args: [CdkFooterCellDef]\n    }]\n  });\n})();\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\n\n\nvar BaseCdkCell = /*#__PURE__*/_createClass(function BaseCdkCell(columnDef, elementRef) {\n  var _elementRef$nativeEle;\n\n  _classCallCheck(this, BaseCdkCell);\n\n  (_elementRef$nativeEle = elementRef.nativeElement.classList).add.apply(_elementRef$nativeEle, _toConsumableArray(columnDef._columnCssClassName));\n});\n/** Header cell template container that adds the right classes and role. */\n\n\nvar CdkHeaderCell = /*#__PURE__*/function (_BaseCdkCell) {\n  _inherits(CdkHeaderCell, _BaseCdkCell);\n\n  var _super3 = _createSuper(CdkHeaderCell);\n\n  function CdkHeaderCell(columnDef, elementRef) {\n    _classCallCheck(this, CdkHeaderCell);\n\n    return _super3.call(this, columnDef, elementRef);\n  }\n\n  return _createClass(CdkHeaderCell);\n}(BaseCdkCell);\n\nCdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) {\n  return new (t || CdkHeaderCell)(i0.ɵɵdirectiveInject(CdkColumnDef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nCdkHeaderCell.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkHeaderCell,\n  selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]],\n  hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkHeaderCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-header-cell, th[cdk-header-cell]',\n      host: {\n        'class': 'cdk-header-cell',\n        'role': 'columnheader'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/** Footer cell template container that adds the right classes and role. */\n\n\nvar CdkFooterCell = /*#__PURE__*/function (_BaseCdkCell2) {\n  _inherits(CdkFooterCell, _BaseCdkCell2);\n\n  var _super4 = _createSuper(CdkFooterCell);\n\n  function CdkFooterCell(columnDef, elementRef) {\n    var _this3;\n\n    _classCallCheck(this, CdkFooterCell);\n\n    var _a;\n\n    _this3 = _super4.call(this, columnDef, elementRef);\n\n    if (((_a = columnDef._table) === null || _a === void 0 ? void 0 : _a._elementRef.nativeElement.nodeType) === 1) {\n      var tableRole = columnDef._table._elementRef.nativeElement.getAttribute('role');\n\n      var role = tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n      elementRef.nativeElement.setAttribute('role', role);\n    }\n\n    return _this3;\n  }\n\n  return _createClass(CdkFooterCell);\n}(BaseCdkCell);\n\nCdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) {\n  return new (t || CdkFooterCell)(i0.ɵɵdirectiveInject(CdkColumnDef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nCdkFooterCell.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkFooterCell,\n  selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]],\n  hostAttrs: [1, \"cdk-footer-cell\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkFooterCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n      host: {\n        'class': 'cdk-footer-cell'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/** Cell template container that adds the right classes and role. */\n\n\nvar CdkCell = /*#__PURE__*/function (_BaseCdkCell3) {\n  _inherits(CdkCell, _BaseCdkCell3);\n\n  var _super5 = _createSuper(CdkCell);\n\n  function CdkCell(columnDef, elementRef) {\n    var _this4;\n\n    _classCallCheck(this, CdkCell);\n\n    var _a;\n\n    _this4 = _super5.call(this, columnDef, elementRef);\n\n    if (((_a = columnDef._table) === null || _a === void 0 ? void 0 : _a._elementRef.nativeElement.nodeType) === 1) {\n      var tableRole = columnDef._table._elementRef.nativeElement.getAttribute('role');\n\n      var role = tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n      elementRef.nativeElement.setAttribute('role', role);\n    }\n\n    return _this4;\n  }\n\n  return _createClass(CdkCell);\n}(BaseCdkCell);\n\nCdkCell.ɵfac = function CdkCell_Factory(t) {\n  return new (t || CdkCell)(i0.ɵɵdirectiveInject(CdkColumnDef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nCdkCell.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkCell,\n  selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]],\n  hostAttrs: [1, \"cdk-cell\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-cell, td[cdk-cell]',\n      host: {\n        'class': 'cdk-cell'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @docs-private\n */\n\n\nvar _Schedule = /*#__PURE__*/_createClass(function _Schedule() {\n  _classCallCheck(this, _Schedule);\n\n  this.tasks = [];\n  this.endTasks = [];\n});\n/** Injection token used to provide a coalesced style scheduler. */\n\n\nvar _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\n\n\nvar _CoalescedStyleScheduler = /*#__PURE__*/function () {\n  function _CoalescedStyleScheduler(_ngZone) {\n    _classCallCheck(this, _CoalescedStyleScheduler);\n\n    this._ngZone = _ngZone;\n    this._currentSchedule = null;\n    this._destroyed = new Subject();\n  }\n  /**\n   * Schedules the specified task to run at the end of the current VM turn.\n   */\n\n\n  _createClass(_CoalescedStyleScheduler, [{\n    key: \"schedule\",\n    value: function schedule(task) {\n      this._createScheduleIfNeeded();\n\n      this._currentSchedule.tasks.push(task);\n    }\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n\n  }, {\n    key: \"scheduleEnd\",\n    value: function scheduleEnd(task) {\n      this._createScheduleIfNeeded();\n\n      this._currentSchedule.endTasks.push(task);\n    }\n    /** Prevent any further tasks from running. */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n  }, {\n    key: \"_createScheduleIfNeeded\",\n    value: function _createScheduleIfNeeded() {\n      var _this5 = this;\n\n      if (this._currentSchedule) {\n        return;\n      }\n\n      this._currentSchedule = new _Schedule();\n\n      this._getScheduleObservable().pipe(takeUntil(this._destroyed)).subscribe(function () {\n        while (_this5._currentSchedule.tasks.length || _this5._currentSchedule.endTasks.length) {\n          var schedule = _this5._currentSchedule; // Capture new tasks scheduled by the current set of tasks.\n\n          _this5._currentSchedule = new _Schedule();\n\n          var _iterator = _createForOfIteratorHelper(schedule.tasks),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var task = _step.value;\n              task();\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          var _iterator2 = _createForOfIteratorHelper(schedule.endTasks),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _task = _step2.value;\n\n              _task();\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n\n        _this5._currentSchedule = null;\n      });\n    }\n  }, {\n    key: \"_getScheduleObservable\",\n    value: function _getScheduleObservable() {\n      // Use onStable when in the context of an ongoing change detection cycle so that we\n      // do not accidentally trigger additional cycles.\n      return this._ngZone.isStable ? from(Promise.resolve(undefined)) : this._ngZone.onStable.pipe(take(1));\n    }\n  }]);\n\n  return _CoalescedStyleScheduler;\n}();\n\n_CoalescedStyleScheduler.ɵfac = function _CoalescedStyleScheduler_Factory(t) {\n  return new (t || _CoalescedStyleScheduler)(i0.ɵɵinject(i0.NgZone));\n};\n\n_CoalescedStyleScheduler.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _CoalescedStyleScheduler,\n  factory: _CoalescedStyleScheduler.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_CoalescedStyleScheduler, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\n\n\nvar CDK_ROW_TEMPLATE = \"<ng-container cdkCellOutlet></ng-container>\";\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\n\nvar BaseRowDef = /*#__PURE__*/function () {\n  function BaseRowDef(\n  /** @docs-private */\n  template, _differs) {\n    _classCallCheck(this, BaseRowDef);\n\n    this.template = template;\n    this._differs = _differs;\n  }\n\n  _createClass(BaseRowDef, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n      // of the columns property or an empty array if none is provided.\n      if (!this._columnsDiffer) {\n        var columns = changes['columns'] && changes['columns'].currentValue || [];\n        this._columnsDiffer = this._differs.find(columns).create();\n\n        this._columnsDiffer.diff(columns);\n      }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n\n  }, {\n    key: \"getColumnsDiff\",\n    value: function getColumnsDiff() {\n      return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n\n  }, {\n    key: \"extractCellTemplate\",\n    value: function extractCellTemplate(column) {\n      if (this instanceof CdkHeaderRowDef) {\n        return column.headerCell.template;\n      }\n\n      if (this instanceof CdkFooterRowDef) {\n        return column.footerCell.template;\n      } else {\n        return column.cell.template;\n      }\n    }\n  }]);\n\n  return BaseRowDef;\n}();\n\nBaseRowDef.ɵfac = function BaseRowDef_Factory(t) {\n  return new (t || BaseRowDef)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.IterableDiffers));\n};\n\nBaseRowDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: BaseRowDef,\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseRowDef, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }, {\n      type: i0.IterableDiffers\n    }];\n  }, null);\n})(); // Boilerplate for applying mixins to CdkHeaderRowDef.\n\n/** @docs-private */\n\n\nvar CdkHeaderRowDefBase = /*#__PURE__*/function (_BaseRowDef) {\n  _inherits(CdkHeaderRowDefBase, _BaseRowDef);\n\n  var _super6 = _createSuper(CdkHeaderRowDefBase);\n\n  function CdkHeaderRowDefBase() {\n    _classCallCheck(this, CdkHeaderRowDefBase);\n\n    return _super6.apply(this, arguments);\n  }\n\n  return _createClass(CdkHeaderRowDefBase);\n}(BaseRowDef);\n\nvar _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n\n\nvar CdkHeaderRowDef = /*#__PURE__*/function (_CdkHeaderRowDefBase2) {\n  _inherits(CdkHeaderRowDef, _CdkHeaderRowDefBase2);\n\n  var _super7 = _createSuper(CdkHeaderRowDef);\n\n  function CdkHeaderRowDef(template, _differs, _table) {\n    var _this6;\n\n    _classCallCheck(this, CdkHeaderRowDef);\n\n    _this6 = _super7.call(this, template, _differs);\n    _this6._table = _table;\n    return _this6;\n  } // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n\n\n  _createClass(CdkHeaderRowDef, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      _get(_getPrototypeOf(CdkHeaderRowDef.prototype), \"ngOnChanges\", this).call(this, changes);\n    }\n  }]);\n\n  return CdkHeaderRowDef;\n}(_CdkHeaderRowDefBase);\n\nCdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) {\n  return new (t || CdkHeaderRowDef)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(CDK_TABLE, 8));\n};\n\nCdkHeaderRowDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkHeaderRowDef,\n  selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkHeaderRowDef\", \"columns\"],\n    sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"]\n  },\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkHeaderRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkHeaderRowDef]',\n      inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky']\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }, {\n      type: i0.IterableDiffers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TABLE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})(); // Boilerplate for applying mixins to CdkFooterRowDef.\n\n/** @docs-private */\n\n\nvar CdkFooterRowDefBase = /*#__PURE__*/function (_BaseRowDef2) {\n  _inherits(CdkFooterRowDefBase, _BaseRowDef2);\n\n  var _super8 = _createSuper(CdkFooterRowDefBase);\n\n  function CdkFooterRowDefBase() {\n    _classCallCheck(this, CdkFooterRowDefBase);\n\n    return _super8.apply(this, arguments);\n  }\n\n  return _createClass(CdkFooterRowDefBase);\n}(BaseRowDef);\n\nvar _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n\n\nvar CdkFooterRowDef = /*#__PURE__*/function (_CdkFooterRowDefBase2) {\n  _inherits(CdkFooterRowDef, _CdkFooterRowDefBase2);\n\n  var _super9 = _createSuper(CdkFooterRowDef);\n\n  function CdkFooterRowDef(template, _differs, _table) {\n    var _this7;\n\n    _classCallCheck(this, CdkFooterRowDef);\n\n    _this7 = _super9.call(this, template, _differs);\n    _this7._table = _table;\n    return _this7;\n  } // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n\n\n  _createClass(CdkFooterRowDef, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      _get(_getPrototypeOf(CdkFooterRowDef.prototype), \"ngOnChanges\", this).call(this, changes);\n    }\n  }]);\n\n  return CdkFooterRowDef;\n}(_CdkFooterRowDefBase);\n\nCdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) {\n  return new (t || CdkFooterRowDef)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(CDK_TABLE, 8));\n};\n\nCdkFooterRowDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkFooterRowDef,\n  selectors: [[\"\", \"cdkFooterRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkFooterRowDef\", \"columns\"],\n    sticky: [\"cdkFooterRowDefSticky\", \"sticky\"]\n  },\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkFooterRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkFooterRowDef]',\n      inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky']\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }, {\n      type: i0.IterableDiffers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TABLE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n\n\nvar CdkRowDef = /*#__PURE__*/function (_BaseRowDef3) {\n  _inherits(CdkRowDef, _BaseRowDef3);\n\n  var _super10 = _createSuper(CdkRowDef);\n\n  // TODO(andrewseguin): Add an input for providing a switch function to determine\n  //   if this template should be used.\n  function CdkRowDef(template, _differs, _table) {\n    var _this8;\n\n    _classCallCheck(this, CdkRowDef);\n\n    _this8 = _super10.call(this, template, _differs);\n    _this8._table = _table;\n    return _this8;\n  }\n\n  return _createClass(CdkRowDef);\n}(BaseRowDef);\n\nCdkRowDef.ɵfac = function CdkRowDef_Factory(t) {\n  return new (t || CdkRowDef)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(CDK_TABLE, 8));\n};\n\nCdkRowDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkRowDef,\n  selectors: [[\"\", \"cdkRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkRowDefColumns\", \"columns\"],\n    when: [\"cdkRowDefWhen\", \"when\"]\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkRowDef]',\n      inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen']\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }, {\n      type: i0.IterableDiffers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TABLE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\n\n\nvar CdkCellOutlet = /*#__PURE__*/function () {\n  function CdkCellOutlet(_viewContainer) {\n    _classCallCheck(this, CdkCellOutlet);\n\n    this._viewContainer = _viewContainer;\n    CdkCellOutlet.mostRecentCellOutlet = this;\n  }\n\n  _createClass(CdkCellOutlet, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // If this was the last outlet being rendered in the view, remove the reference\n      // from the static property after it has been destroyed to avoid leaking memory.\n      if (CdkCellOutlet.mostRecentCellOutlet === this) {\n        CdkCellOutlet.mostRecentCellOutlet = null;\n      }\n    }\n  }]);\n\n  return CdkCellOutlet;\n}();\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\n\n\nCdkCellOutlet.mostRecentCellOutlet = null;\n\nCdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) {\n  return new (t || CdkCellOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n};\n\nCdkCellOutlet.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkCellOutlet,\n  selectors: [[\"\", \"cdkCellOutlet\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkCellOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkCellOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }];\n  }, null);\n})();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n\n\nvar CdkHeaderRow = /*#__PURE__*/_createClass(function CdkHeaderRow() {\n  _classCallCheck(this, CdkHeaderRow);\n});\n\nCdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) {\n  return new (t || CdkHeaderRow)();\n};\n\nCdkHeaderRow.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CdkHeaderRow,\n  selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkHeaderRow_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [CdkCellOutlet],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkHeaderRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-header-row, tr[cdk-header-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-header-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n\n\nvar CdkFooterRow = /*#__PURE__*/_createClass(function CdkFooterRow() {\n  _classCallCheck(this, CdkFooterRow);\n});\n\nCdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) {\n  return new (t || CdkFooterRow)();\n};\n\nCdkFooterRow.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CdkFooterRow,\n  selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkFooterRow_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [CdkCellOutlet],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkFooterRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-footer-row, tr[cdk-footer-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-footer-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n\n\nvar CdkRow = /*#__PURE__*/_createClass(function CdkRow() {\n  _classCallCheck(this, CdkRow);\n});\n\nCdkRow.ɵfac = function CdkRow_Factory(t) {\n  return new (t || CdkRow)();\n};\n\nCdkRow.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CdkRow,\n  selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkRow_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [CdkCellOutlet],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-row, tr[cdk-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/** Row that can be used to display a message when no data is shown in the table. */\n\n\nvar CdkNoDataRow = /*#__PURE__*/_createClass(function CdkNoDataRow(templateRef) {\n  _classCallCheck(this, CdkNoDataRow);\n\n  this.templateRef = templateRef;\n  this._contentClassName = 'cdk-no-data-row';\n});\n\nCdkNoDataRow.ɵfac = function CdkNoDataRow_Factory(t) {\n  return new (t || CdkNoDataRow)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nCdkNoDataRow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkNoDataRow,\n  selectors: [[\"ng-template\", \"cdkNoDataRow\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkNoDataRow, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[cdkNoDataRow]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\n\n\nvar STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\n\nvar StickyStyler = /*#__PURE__*/function () {\n  /**\n   * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n   *     that uses the native `<table>` element.\n   * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n   *     sticky positioning applied.\n   * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n   *     by reversing left/right positions.\n   * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n   * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n   *     using inline styles. If false, it is assumed that position: sticky is included in\n   *     the component stylesheet for _stickCellCss.\n   * @param _positionListener A listener that is notified of changes to sticky rows/columns\n   *     and their dimensions.\n   */\n  function StickyStyler(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler) {\n    var _isBrowser = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n\n    var _needsPositionStickyOnElement = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n\n    var _positionListener = arguments.length > 6 ? arguments[6] : undefined;\n\n    _classCallCheck(this, StickyStyler);\n\n    this._isNativeHtmlTable = _isNativeHtmlTable;\n    this._stickCellCss = _stickCellCss;\n    this.direction = direction;\n    this._coalescedStyleScheduler = _coalescedStyleScheduler;\n    this._isBrowser = _isBrowser;\n    this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n    this._positionListener = _positionListener;\n    this._cachedCellWidths = [];\n    this._borderCellCss = {\n      'top': \"\".concat(_stickCellCss, \"-border-elem-top\"),\n      'bottom': \"\".concat(_stickCellCss, \"-border-elem-bottom\"),\n      'left': \"\".concat(_stickCellCss, \"-border-elem-left\"),\n      'right': \"\".concat(_stickCellCss, \"-border-elem-right\")\n    };\n  }\n  /**\n   * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n   * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n   * @param rows The list of rows that should be cleared from sticking in the provided directions\n   * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n   */\n\n\n  _createClass(StickyStyler, [{\n    key: \"clearStickyPositioning\",\n    value: function clearStickyPositioning(rows, stickyDirections) {\n      var _this9 = this;\n\n      var elementsToClear = [];\n\n      var _iterator3 = _createForOfIteratorHelper(rows),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var row = _step3.value;\n\n          // If the row isn't an element (e.g. if it's an `ng-container`),\n          // it won't have inline styles or `children` so we skip it.\n          if (row.nodeType !== row.ELEMENT_NODE) {\n            continue;\n          }\n\n          elementsToClear.push(row);\n\n          for (var i = 0; i < row.children.length; i++) {\n            elementsToClear.push(row.children[i]);\n          }\n        } // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      this._coalescedStyleScheduler.schedule(function () {\n        var _iterator4 = _createForOfIteratorHelper(elementsToClear),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var element = _step4.value;\n\n            _this9._removeStickyStyle(element, stickyDirections);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n     *     column cell. If `false` cached widths will be used instead.\n     */\n\n  }, {\n    key: \"updateStickyColumns\",\n    value: function updateStickyColumns(rows, stickyStartStates, stickyEndStates) {\n      var _this10 = this;\n\n      var recalculateCellWidths = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n      if (!rows.length || !this._isBrowser || !(stickyStartStates.some(function (state) {\n        return state;\n      }) || stickyEndStates.some(function (state) {\n        return state;\n      }))) {\n        if (this._positionListener) {\n          this._positionListener.stickyColumnsUpdated({\n            sizes: []\n          });\n\n          this._positionListener.stickyEndColumnsUpdated({\n            sizes: []\n          });\n        }\n\n        return;\n      }\n\n      var firstRow = rows[0];\n      var numCells = firstRow.children.length;\n\n      var cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n\n      var startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n\n      var endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n\n      var lastStickyStart = stickyStartStates.lastIndexOf(true);\n      var firstStickyEnd = stickyEndStates.indexOf(true); // Coalesce with sticky row updates (and potentially other changes like column resize).\n\n      this._coalescedStyleScheduler.schedule(function () {\n        var isRtl = _this10.direction === 'rtl';\n        var start = isRtl ? 'right' : 'left';\n        var end = isRtl ? 'left' : 'right';\n\n        var _iterator5 = _createForOfIteratorHelper(rows),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var row = _step5.value;\n\n            for (var i = 0; i < numCells; i++) {\n              var cell = row.children[i];\n\n              if (stickyStartStates[i]) {\n                _this10._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n              }\n\n              if (stickyEndStates[i]) {\n                _this10._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n              }\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n\n        if (_this10._positionListener) {\n          _this10._positionListener.stickyColumnsUpdated({\n            sizes: lastStickyStart === -1 ? [] : cellWidths.slice(0, lastStickyStart + 1).map(function (width, index) {\n              return stickyStartStates[index] ? width : null;\n            })\n          });\n\n          _this10._positionListener.stickyEndColumnsUpdated({\n            sizes: firstStickyEnd === -1 ? [] : cellWidths.slice(firstStickyEnd).map(function (width, index) {\n              return stickyEndStates[index + firstStickyEnd] ? width : null;\n            }).reverse()\n          });\n        }\n      });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n\n  }, {\n    key: \"stickRows\",\n    value: function stickRows(rowsToStick, stickyStates, position) {\n      var _this11 = this;\n\n      // Since we can't measure the rows on the server, we can't stick the rows properly.\n      if (!this._isBrowser) {\n        return;\n      } // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n      // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n      // sticky states need to be reversed as well.\n\n\n      var rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n      var states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates; // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n\n      var stickyOffsets = [];\n      var stickyCellHeights = [];\n      var elementsToStick = [];\n\n      for (var rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n        if (!states[rowIndex]) {\n          continue;\n        }\n\n        stickyOffsets[rowIndex] = stickyOffset;\n        var row = rows[rowIndex];\n        elementsToStick[rowIndex] = this._isNativeHtmlTable ? Array.from(row.children) : [row];\n        var height = row.getBoundingClientRect().height;\n        stickyOffset += height;\n        stickyCellHeights[rowIndex] = height;\n      }\n\n      var borderedRowIndex = states.lastIndexOf(true); // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n      // (and potentially other changes like column resize).\n\n      this._coalescedStyleScheduler.schedule(function () {\n        var _a, _b;\n\n        for (var _rowIndex = 0; _rowIndex < rows.length; _rowIndex++) {\n          if (!states[_rowIndex]) {\n            continue;\n          }\n\n          var offset = stickyOffsets[_rowIndex];\n          var isBorderedRowIndex = _rowIndex === borderedRowIndex;\n\n          var _iterator6 = _createForOfIteratorHelper(elementsToStick[_rowIndex]),\n              _step6;\n\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var element = _step6.value;\n\n              _this11._addStickyStyle(element, position, offset, isBorderedRowIndex);\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n        }\n\n        if (position === 'top') {\n          (_a = _this11._positionListener) === null || _a === void 0 ? void 0 : _a.stickyHeaderRowsUpdated({\n            sizes: stickyCellHeights,\n            offsets: stickyOffsets,\n            elements: elementsToStick\n          });\n        } else {\n          (_b = _this11._positionListener) === null || _b === void 0 ? void 0 : _b.stickyFooterRowsUpdated({\n            sizes: stickyCellHeights,\n            offsets: stickyOffsets,\n            elements: elementsToStick\n          });\n        }\n      });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n\n  }, {\n    key: \"updateStickyFooterContainer\",\n    value: function updateStickyFooterContainer(tableElement, stickyStates) {\n      var _this12 = this;\n\n      if (!this._isNativeHtmlTable) {\n        return;\n      }\n\n      var tfoot = tableElement.querySelector('tfoot'); // Coalesce with other sticky updates (and potentially other changes like column resize).\n\n      this._coalescedStyleScheduler.schedule(function () {\n        if (stickyStates.some(function (state) {\n          return !state;\n        })) {\n          _this12._removeStickyStyle(tfoot, ['bottom']);\n        } else {\n          _this12._addStickyStyle(tfoot, 'bottom', 0, false);\n        }\n      });\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n\n  }, {\n    key: \"_removeStickyStyle\",\n    value: function _removeStickyStyle(element, stickyDirections) {\n      var _iterator7 = _createForOfIteratorHelper(stickyDirections),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var dir = _step7.value;\n          element.style[dir] = '';\n          element.classList.remove(this._borderCellCss[dir]);\n        } // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        // Short-circuit checking element.style[dir] for stickyDirections as they\n        // were already removed above.\n\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      var hasDirection = STICKY_DIRECTIONS.some(function (dir) {\n        return stickyDirections.indexOf(dir) === -1 && element.style[dir];\n      });\n\n      if (hasDirection) {\n        element.style.zIndex = this._getCalculatedZIndex(element);\n      } else {\n        // When not hasDirection, _getCalculatedZIndex will always return ''.\n        element.style.zIndex = '';\n\n        if (this._needsPositionStickyOnElement) {\n          element.style.position = '';\n        }\n\n        element.classList.remove(this._stickCellCss);\n      }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n\n  }, {\n    key: \"_addStickyStyle\",\n    value: function _addStickyStyle(element, dir, dirValue, isBorderElement) {\n      element.classList.add(this._stickCellCss);\n\n      if (isBorderElement) {\n        element.classList.add(this._borderCellCss[dir]);\n      }\n\n      element.style[dir] = \"\".concat(dirValue, \"px\");\n      element.style.zIndex = this._getCalculatedZIndex(element);\n\n      if (this._needsPositionStickyOnElement) {\n        element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n      }\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n\n  }, {\n    key: \"_getCalculatedZIndex\",\n    value: function _getCalculatedZIndex(element) {\n      var zIndexIncrements = {\n        top: 100,\n        bottom: 10,\n        left: 1,\n        right: 1\n      };\n      var zIndex = 0; // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n      // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n      // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n\n      var _iterator8 = _createForOfIteratorHelper(STICKY_DIRECTIONS),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var dir = _step8.value;\n\n          if (element.style[dir]) {\n            zIndex += zIndexIncrements[dir];\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      return zIndex ? \"\".concat(zIndex) : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n\n  }, {\n    key: \"_getCellWidths\",\n    value: function _getCellWidths(row) {\n      var recalculateCellWidths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (!recalculateCellWidths && this._cachedCellWidths.length) {\n        return this._cachedCellWidths;\n      }\n\n      var cellWidths = [];\n      var firstRowCells = row.children;\n\n      for (var i = 0; i < firstRowCells.length; i++) {\n        var cell = firstRowCells[i];\n        cellWidths.push(cell.getBoundingClientRect().width);\n      }\n\n      this._cachedCellWidths = cellWidths;\n      return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n\n  }, {\n    key: \"_getStickyStartColumnPositions\",\n    value: function _getStickyStartColumnPositions(widths, stickyStates) {\n      var positions = [];\n      var nextPosition = 0;\n\n      for (var i = 0; i < widths.length; i++) {\n        if (stickyStates[i]) {\n          positions[i] = nextPosition;\n          nextPosition += widths[i];\n        }\n      }\n\n      return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n\n  }, {\n    key: \"_getStickyEndColumnPositions\",\n    value: function _getStickyEndColumnPositions(widths, stickyStates) {\n      var positions = [];\n      var nextPosition = 0;\n\n      for (var i = widths.length; i > 0; i--) {\n        if (stickyStates[i]) {\n          positions[i] = nextPosition;\n          nextPosition += widths[i];\n        }\n      }\n\n      return positions;\n    }\n  }]);\n\n  return StickyStyler;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when attempting to find an nonexistent column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\n\n\nfunction getTableUnknownColumnError(id) {\n  return Error(\"Could not find column with id \\\"\".concat(id, \"\\\".\"));\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\n\n\nfunction getTableDuplicateColumnNameError(name) {\n  return Error(\"Duplicate column definition name provided: \\\"\".concat(name, \"\\\".\"));\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\n\n\nfunction getTableMultipleDefaultRowDefsError() {\n  return Error(\"There can only be one default row without a when predicate function.\");\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\n\n\nfunction getTableMissingMatchingRowDefError(data) {\n  return Error(\"Could not find a matching row definition for the\" + \"provided row data: \".concat(JSON.stringify(data)));\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\n\n\nfunction getTableMissingRowDefsError() {\n  return Error('Missing definitions for header, footer, and row; ' + 'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\n\n\nfunction getTableUnknownDataSourceError() {\n  return Error(\"Provided data source did not match an array, Observable, or DataSource\");\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\n\n\nfunction getTableTextColumnMissingParentTableError() {\n  return Error(\"Text column could not find a parent table for registration.\");\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\n\n\nfunction getTableTextColumnMissingNameError() {\n  return Error(\"Table text column must have a name.\");\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The injection token used to specify the StickyPositioningListener. */\n\n\nvar STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\n\nvar CdkRecycleRows = /*#__PURE__*/_createClass(function CdkRecycleRows() {\n  _classCallCheck(this, CdkRecycleRows);\n});\n\nCdkRecycleRows.ɵfac = function CdkRecycleRows_Factory(t) {\n  return new (t || CdkRecycleRows)();\n};\n\nCdkRecycleRows.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkRecycleRows,\n  selectors: [[\"cdk-table\", \"recycleRows\", \"\"], [\"table\", \"cdk-table\", \"\", \"recycleRows\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: _VIEW_REPEATER_STRATEGY,\n    useClass: _RecycleViewRepeaterStrategy\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkRecycleRows, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n      providers: [{\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _RecycleViewRepeaterStrategy\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\n\n\nvar DataRowOutlet = /*#__PURE__*/_createClass(function DataRowOutlet(viewContainer, elementRef) {\n  _classCallCheck(this, DataRowOutlet);\n\n  this.viewContainer = viewContainer;\n  this.elementRef = elementRef;\n});\n\nDataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) {\n  return new (t || DataRowOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nDataRowOutlet.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: DataRowOutlet,\n  selectors: [[\"\", \"rowOutlet\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[rowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\n\n\nvar HeaderRowOutlet = /*#__PURE__*/_createClass(function HeaderRowOutlet(viewContainer, elementRef) {\n  _classCallCheck(this, HeaderRowOutlet);\n\n  this.viewContainer = viewContainer;\n  this.elementRef = elementRef;\n});\n\nHeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) {\n  return new (t || HeaderRowOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nHeaderRowOutlet.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: HeaderRowOutlet,\n  selectors: [[\"\", \"headerRowOutlet\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeaderRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[headerRowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\n\n\nvar FooterRowOutlet = /*#__PURE__*/_createClass(function FooterRowOutlet(viewContainer, elementRef) {\n  _classCallCheck(this, FooterRowOutlet);\n\n  this.viewContainer = viewContainer;\n  this.elementRef = elementRef;\n});\n\nFooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) {\n  return new (t || FooterRowOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nFooterRowOutlet.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: FooterRowOutlet,\n  selectors: [[\"\", \"footerRowOutlet\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FooterRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[footerRowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\n\n\nvar NoDataRowOutlet = /*#__PURE__*/_createClass(function NoDataRowOutlet(viewContainer, elementRef) {\n  _classCallCheck(this, NoDataRowOutlet);\n\n  this.viewContainer = viewContainer;\n  this.elementRef = elementRef;\n});\n\nNoDataRowOutlet.ɵfac = function NoDataRowOutlet_Factory(t) {\n  return new (t || NoDataRowOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nNoDataRowOutlet.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NoDataRowOutlet,\n  selectors: [[\"\", \"noDataRowOutlet\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NoDataRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[noDataRowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\n\n\nvar CDK_TABLE_TEMPLATE = // Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n\"\\n  <ng-content select=\\\"caption\\\"></ng-content>\\n  <ng-content select=\\\"colgroup, col\\\"></ng-content>\\n  <ng-container headerRowOutlet></ng-container>\\n  <ng-container rowOutlet></ng-container>\\n  <ng-container noDataRowOutlet></ng-container>\\n  <ng-container footerRowOutlet></ng-container>\\n\";\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\n\nvar RowViewRef = /*#__PURE__*/function (_EmbeddedViewRef) {\n  _inherits(RowViewRef, _EmbeddedViewRef);\n\n  var _super11 = _createSuper(RowViewRef);\n\n  function RowViewRef() {\n    _classCallCheck(this, RowViewRef);\n\n    return _super11.apply(this, arguments);\n  }\n\n  return _createClass(RowViewRef);\n}(EmbeddedViewRef);\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\n\n\nvar CdkTable = /*#__PURE__*/function () {\n  function CdkTable(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, _viewRepeater, _coalescedStyleScheduler, _viewportRuler,\n  /**\n   * @deprecated `_stickyPositioningListener` parameter to become required.\n   * @breaking-change 13.0.0\n   */\n  _stickyPositioningListener,\n  /**\n   * @deprecated `_ngZone` parameter to become required.\n   * @breaking-change 14.0.0\n   */\n  _ngZone) {\n    _classCallCheck(this, CdkTable);\n\n    this._differs = _differs;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._dir = _dir;\n    this._platform = _platform;\n    this._viewRepeater = _viewRepeater;\n    this._coalescedStyleScheduler = _coalescedStyleScheduler;\n    this._viewportRuler = _viewportRuler;\n    this._stickyPositioningListener = _stickyPositioningListener;\n    this._ngZone = _ngZone;\n    /** Subject that emits when the component has been destroyed. */\n\n    this._onDestroy = new Subject();\n    /**\n     * Map of all the user's defined columns (header, data, and footer cell template) identified by\n     * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n     * any custom column definitions added to `_customColumnDefs`.\n     */\n\n    this._columnDefsByName = new Map();\n    /**\n     * Column definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * column definitions as *its* content child.\n     */\n\n    this._customColumnDefs = new Set();\n    /**\n     * Data row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in data rows as *its* content child.\n     */\n\n    this._customRowDefs = new Set();\n    /**\n     * Header row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in header rows as *its* content child.\n     */\n\n    this._customHeaderRowDefs = new Set();\n    /**\n     * Footer row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n     * built-in footer row as *its* content child.\n     */\n\n    this._customFooterRowDefs = new Set();\n    /**\n     * Whether the header row definition has been changed. Triggers an update to the header row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n\n    this._headerRowDefChanged = true;\n    /**\n     * Whether the footer row definition has been changed. Triggers an update to the footer row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n\n    this._footerRowDefChanged = true;\n    /**\n     * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n     * change.\n     */\n\n    this._stickyColumnStylesNeedReset = true;\n    /**\n     * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n     * `false`, cached values will be used instead. This is only applicable to tables with\n     * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n     */\n\n    this._forceRecalculateCellWidths = true;\n    /**\n     * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n     * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n     * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n     * and row template matches, which allows the `IterableDiffer` to check rows by reference\n     * and understand which rows are added/moved/removed.\n     *\n     * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n     * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n     * contains an array of created pairs. The array is necessary to handle cases where the data\n     * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n     * stored.\n     */\n\n    this._cachedRenderRowsMap = new Map();\n    /**\n     * CSS class added to any row or cell that has sticky positioning applied. May be overridden by\n     * table subclasses.\n     */\n\n    this.stickyCssClass = 'cdk-table-sticky';\n    /**\n     * Whether to manually add position: sticky to all sticky cell elements. Not needed if\n     * the position is set in a selector associated with the value of stickyCssClass. May be\n     * overridden by table subclasses\n     */\n\n    this.needsPositionStickyOnElement = true;\n    /** Whether the no data row is currently showing anything. */\n\n    this._isShowingNoDataRow = false;\n    this._multiTemplateDataRows = false;\n    this._fixedLayout = false;\n    /**\n     * Emits when the table completes rendering a set of data rows based on the latest data from the\n     * data source, even if the set of rows is empty.\n     */\n\n    this.contentChanged = new EventEmitter(); // TODO(andrewseguin): Remove max value as the end index\n    //   and instead calculate the view on init and scroll.\n\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     *\n     * @docs-private\n     */\n\n    this.viewChange = new BehaviorSubject({\n      start: 0,\n      end: Number.MAX_VALUE\n    });\n\n    if (!role) {\n      this._elementRef.nativeElement.setAttribute('role', 'table');\n    }\n\n    this._document = _document;\n    this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n  }\n  /**\n   * Tracking function that will be used to check the differences in data changes. Used similarly\n   * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n   * relative to the function to know if a row should be added/removed/moved.\n   * Accepts a function that takes two parameters, `index` and `item`.\n   */\n\n\n  _createClass(CdkTable, [{\n    key: \"trackBy\",\n    get: function get() {\n      return this._trackByFn;\n    },\n    set: function set(fn) {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n        console.warn(\"trackBy must be a function, but received \".concat(JSON.stringify(fn), \".\"));\n      }\n\n      this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n\n  }, {\n    key: \"dataSource\",\n    get: function get() {\n      return this._dataSource;\n    },\n    set: function set(dataSource) {\n      if (this._dataSource !== dataSource) {\n        this._switchDataSource(dataSource);\n      }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n\n  }, {\n    key: \"multiTemplateDataRows\",\n    get: function get() {\n      return this._multiTemplateDataRows;\n    },\n    set: function set(v) {\n      this._multiTemplateDataRows = coerceBooleanProperty(v); // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n      // this setter will be invoked before the row outlet has been defined hence the null check.\n\n      if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n        this._forceRenderDataRows();\n\n        this.updateStickyColumnStyles();\n      }\n    }\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n\n  }, {\n    key: \"fixedLayout\",\n    get: function get() {\n      return this._fixedLayout;\n    },\n    set: function set(v) {\n      this._fixedLayout = coerceBooleanProperty(v); // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n\n      this._forceRecalculateCellWidths = true;\n      this._stickyColumnStylesNeedReset = true;\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this13 = this;\n\n      this._setupStickyStyler();\n\n      if (this._isNativeHtmlTable) {\n        this._applyNativeTableSections();\n      } // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n      // the user has provided a custom trackBy, return the result of that function as evaluated\n      // with the values of the `RenderRow`'s data and index.\n\n\n      this._dataDiffer = this._differs.find([]).create(function (_i, dataRow) {\n        return _this13.trackBy ? _this13.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n      });\n\n      this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(function () {\n        _this13._forceRecalculateCellWidths = true;\n      });\n    }\n  }, {\n    key: \"ngAfterContentChecked\",\n    value: function ngAfterContentChecked() {\n      // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n      this._cacheRowDefs();\n\n      this._cacheColumnDefs(); // Make sure that the user has at least added header, footer, or data row def.\n\n\n      if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableMissingRowDefsError();\n      } // Render updates if the list of columns have been changed for the header, row, or footer defs.\n\n\n      var columnsChanged = this._renderUpdatedColumns();\n\n      var rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged; // Ensure sticky column styles are reset if set to `true` elsewhere.\n\n      this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n      this._forceRecalculateCellWidths = rowDefsChanged; // If the header row definition has been changed, trigger a render to the header row.\n\n      if (this._headerRowDefChanged) {\n        this._forceRenderHeaderRows();\n\n        this._headerRowDefChanged = false;\n      } // If the footer row definition has been changed, trigger a render to the footer row.\n\n\n      if (this._footerRowDefChanged) {\n        this._forceRenderFooterRows();\n\n        this._footerRowDefChanged = false;\n      } // If there is a data source and row definitions, connect to the data source unless a\n      // connection has already been made.\n\n\n      if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n        this._observeRenderChanges();\n      } else if (this._stickyColumnStylesNeedReset) {\n        // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n        // called when it row data arrives. Otherwise, we need to call it proactively.\n        this.updateStickyColumnStyles();\n      }\n\n      this._checkStickyStates();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      [this._rowOutlet.viewContainer, this._headerRowOutlet.viewContainer, this._footerRowOutlet.viewContainer, this._cachedRenderRowsMap, this._customColumnDefs, this._customRowDefs, this._customHeaderRowDefs, this._customFooterRowDefs, this._columnDefsByName].forEach(function (def) {\n        def.clear();\n      });\n      this._headerRowDefs = [];\n      this._footerRowDefs = [];\n      this._defaultRowDef = null;\n\n      this._onDestroy.next();\n\n      this._onDestroy.complete();\n\n      if (isDataSource(this.dataSource)) {\n        this.dataSource.disconnect(this);\n      }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n\n  }, {\n    key: \"renderRows\",\n    value: function renderRows() {\n      var _this14 = this;\n\n      this._renderRows = this._getAllRenderRows();\n\n      var changes = this._dataDiffer.diff(this._renderRows);\n\n      if (!changes) {\n        this._updateNoDataRow();\n\n        this.contentChanged.next();\n        return;\n      }\n\n      var viewContainer = this._rowOutlet.viewContainer;\n\n      this._viewRepeater.applyChanges(changes, viewContainer, function (record, _adjustedPreviousIndex, currentIndex) {\n        return _this14._getEmbeddedViewArgs(record.item, currentIndex);\n      }, function (record) {\n        return record.item.data;\n      }, function (change) {\n        if (change.operation === 1\n        /* _ViewRepeaterOperation.INSERTED */\n        && change.context) {\n          _this14._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n        }\n      }); // Update the meta context of a row's context data (index, count, first, last, ...)\n\n\n      this._updateRowIndexContext(); // Update rows that did not get added/removed/moved but may have had their identity changed,\n      // e.g. if trackBy matched data on some property but the actual data reference changed.\n\n\n      changes.forEachIdentityChange(function (record) {\n        var rowView = viewContainer.get(record.currentIndex);\n        rowView.context.$implicit = record.item.data;\n      });\n\n      this._updateNoDataRow(); // Allow the new row data to render before measuring it.\n      // @breaking-change 14.0.0 Remove undefined check once _ngZone is required.\n\n\n      if (this._ngZone && NgZone.isInAngularZone()) {\n        this._ngZone.onStable.pipe(take(1), takeUntil(this._onDestroy)).subscribe(function () {\n          _this14.updateStickyColumnStyles();\n        });\n      } else {\n        this.updateStickyColumnStyles();\n      }\n\n      this.contentChanged.next();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n\n  }, {\n    key: \"addColumnDef\",\n    value: function addColumnDef(columnDef) {\n      this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n\n  }, {\n    key: \"removeColumnDef\",\n    value: function removeColumnDef(columnDef) {\n      this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n\n  }, {\n    key: \"addRowDef\",\n    value: function addRowDef(rowDef) {\n      this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n\n  }, {\n    key: \"removeRowDef\",\n    value: function removeRowDef(rowDef) {\n      this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n\n  }, {\n    key: \"addHeaderRowDef\",\n    value: function addHeaderRowDef(headerRowDef) {\n      this._customHeaderRowDefs.add(headerRowDef);\n\n      this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n\n  }, {\n    key: \"removeHeaderRowDef\",\n    value: function removeHeaderRowDef(headerRowDef) {\n      this._customHeaderRowDefs.delete(headerRowDef);\n\n      this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n\n  }, {\n    key: \"addFooterRowDef\",\n    value: function addFooterRowDef(footerRowDef) {\n      this._customFooterRowDefs.add(footerRowDef);\n\n      this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n\n  }, {\n    key: \"removeFooterRowDef\",\n    value: function removeFooterRowDef(footerRowDef) {\n      this._customFooterRowDefs.delete(footerRowDef);\n\n      this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n\n  }, {\n    key: \"setNoDataRow\",\n    value: function setNoDataRow(noDataRow) {\n      this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n\n  }, {\n    key: \"updateStickyHeaderRowStyles\",\n    value: function updateStickyHeaderRowStyles() {\n      var headerRows = this._getRenderedRows(this._headerRowOutlet);\n\n      var tableElement = this._elementRef.nativeElement; // Hide the thead element if there are no header rows. This is necessary to satisfy\n      // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n      // required child `row`.\n\n      var thead = tableElement.querySelector('thead');\n\n      if (thead) {\n        thead.style.display = headerRows.length ? '' : 'none';\n      }\n\n      var stickyStates = this._headerRowDefs.map(function (def) {\n        return def.sticky;\n      });\n\n      this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n\n      this._stickyStyler.stickRows(headerRows, stickyStates, 'top'); // Reset the dirty state of the sticky input change since it has been used.\n\n\n      this._headerRowDefs.forEach(function (def) {\n        return def.resetStickyChanged();\n      });\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n\n  }, {\n    key: \"updateStickyFooterRowStyles\",\n    value: function updateStickyFooterRowStyles() {\n      var footerRows = this._getRenderedRows(this._footerRowOutlet);\n\n      var tableElement = this._elementRef.nativeElement; // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n      // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n      // required child `row`.\n\n      var tfoot = tableElement.querySelector('tfoot');\n\n      if (tfoot) {\n        tfoot.style.display = footerRows.length ? '' : 'none';\n      }\n\n      var stickyStates = this._footerRowDefs.map(function (def) {\n        return def.sticky;\n      });\n\n      this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n\n      this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n\n      this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates); // Reset the dirty state of the sticky input change since it has been used.\n\n\n      this._footerRowDefs.forEach(function (def) {\n        return def.resetStickyChanged();\n      });\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n\n  }, {\n    key: \"updateStickyColumnStyles\",\n    value: function updateStickyColumnStyles() {\n      var _this15 = this;\n\n      var headerRows = this._getRenderedRows(this._headerRowOutlet);\n\n      var dataRows = this._getRenderedRows(this._rowOutlet);\n\n      var footerRows = this._getRenderedRows(this._footerRowOutlet); // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n      // In a table using a fixed layout, row content won't affect column width, so sticky styles\n      // don't need to be cleared unless either the sticky column config changes or one of the row\n      // defs change.\n\n\n      if (this._isNativeHtmlTable && !this._fixedLayout || this._stickyColumnStylesNeedReset) {\n        // Clear the left and right positioning from all columns in the table across all rows since\n        // sticky columns span across all table sections (header, data, footer)\n        this._stickyStyler.clearStickyPositioning([].concat(_toConsumableArray(headerRows), _toConsumableArray(dataRows), _toConsumableArray(footerRows)), ['left', 'right']);\n\n        this._stickyColumnStylesNeedReset = false;\n      } // Update the sticky styles for each header row depending on the def's sticky state\n\n\n      headerRows.forEach(function (headerRow, i) {\n        _this15._addStickyColumnStyles([headerRow], _this15._headerRowDefs[i]);\n      }); // Update the sticky styles for each data row depending on its def's sticky state\n\n      this._rowDefs.forEach(function (rowDef) {\n        // Collect all the rows rendered with this row definition.\n        var rows = [];\n\n        for (var i = 0; i < dataRows.length; i++) {\n          if (_this15._renderRows[i].rowDef === rowDef) {\n            rows.push(dataRows[i]);\n          }\n        }\n\n        _this15._addStickyColumnStyles(rows, rowDef);\n      }); // Update the sticky styles for each footer row depending on the def's sticky state\n\n\n      footerRows.forEach(function (footerRow, i) {\n        _this15._addStickyColumnStyles([footerRow], _this15._footerRowDefs[i]);\n      }); // Reset the dirty state of the sticky input change since it has been used.\n\n      Array.from(this._columnDefsByName.values()).forEach(function (def) {\n        return def.resetStickyChanged();\n      });\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n\n  }, {\n    key: \"_getAllRenderRows\",\n    value: function _getAllRenderRows() {\n      var renderRows = []; // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n      // new cache while unused ones can be picked up by garbage collection.\n\n      var prevCachedRenderRows = this._cachedRenderRowsMap;\n      this._cachedRenderRowsMap = new Map(); // For each data object, get the list of rows that should be rendered, represented by the\n      // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n\n      for (var i = 0; i < this._data.length; i++) {\n        var data = this._data[i];\n\n        var renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n\n        if (!this._cachedRenderRowsMap.has(data)) {\n          this._cachedRenderRowsMap.set(data, new WeakMap());\n        }\n\n        for (var j = 0; j < renderRowsForData.length; j++) {\n          var renderRow = renderRowsForData[j];\n\n          var cache = this._cachedRenderRowsMap.get(renderRow.data);\n\n          if (cache.has(renderRow.rowDef)) {\n            cache.get(renderRow.rowDef).push(renderRow);\n          } else {\n            cache.set(renderRow.rowDef, [renderRow]);\n          }\n\n          renderRows.push(renderRow);\n        }\n      }\n\n      return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n\n  }, {\n    key: \"_getRenderRowsForData\",\n    value: function _getRenderRowsForData(data, dataIndex, cache) {\n      var rowDefs = this._getRowDefs(data, dataIndex);\n\n      return rowDefs.map(function (rowDef) {\n        var cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n\n        if (cachedRenderRows.length) {\n          var dataRow = cachedRenderRows.shift();\n          dataRow.dataIndex = dataIndex;\n          return dataRow;\n        } else {\n          return {\n            data: data,\n            rowDef: rowDef,\n            dataIndex: dataIndex\n          };\n        }\n      });\n    }\n    /** Update the map containing the content's column definitions. */\n\n  }, {\n    key: \"_cacheColumnDefs\",\n    value: function _cacheColumnDefs() {\n      var _this16 = this;\n\n      this._columnDefsByName.clear();\n\n      var columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n      columnDefs.forEach(function (columnDef) {\n        if (_this16._columnDefsByName.has(columnDef.name) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTableDuplicateColumnNameError(columnDef.name);\n        }\n\n        _this16._columnDefsByName.set(columnDef.name, columnDef);\n      });\n    }\n    /** Update the list of all available row definitions that can be used. */\n\n  }, {\n    key: \"_cacheRowDefs\",\n    value: function _cacheRowDefs() {\n      this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n      this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n      this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs); // After all row definitions are determined, find the row definition to be considered default.\n\n      var defaultRowDefs = this._rowDefs.filter(function (def) {\n        return !def.when;\n      });\n\n      if (!this.multiTemplateDataRows && defaultRowDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableMultipleDefaultRowDefsError();\n      }\n\n      this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n\n  }, {\n    key: \"_renderUpdatedColumns\",\n    value: function _renderUpdatedColumns() {\n      var columnsDiffReducer = function columnsDiffReducer(acc, def) {\n        return acc || !!def.getColumnsDiff();\n      }; // Force re-render data rows if the list of column definitions have changed.\n\n\n      var dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n\n      if (dataColumnsChanged) {\n        this._forceRenderDataRows();\n      } // Force re-render header/footer rows if the list of column definitions have changed.\n\n\n      var headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n\n      if (headerColumnsChanged) {\n        this._forceRenderHeaderRows();\n      }\n\n      var footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n\n      if (footerColumnsChanged) {\n        this._forceRenderFooterRows();\n      }\n\n      return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n\n  }, {\n    key: \"_switchDataSource\",\n    value: function _switchDataSource(dataSource) {\n      this._data = [];\n\n      if (isDataSource(this.dataSource)) {\n        this.dataSource.disconnect(this);\n      } // Stop listening for data from the previous data source.\n\n\n      if (this._renderChangeSubscription) {\n        this._renderChangeSubscription.unsubscribe();\n\n        this._renderChangeSubscription = null;\n      }\n\n      if (!dataSource) {\n        if (this._dataDiffer) {\n          this._dataDiffer.diff([]);\n        }\n\n        this._rowOutlet.viewContainer.clear();\n      }\n\n      this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n\n  }, {\n    key: \"_observeRenderChanges\",\n    value: function _observeRenderChanges() {\n      var _this17 = this;\n\n      // If no data source has been set, there is nothing to observe for changes.\n      if (!this.dataSource) {\n        return;\n      }\n\n      var dataStream;\n\n      if (isDataSource(this.dataSource)) {\n        dataStream = this.dataSource.connect(this);\n      } else if (isObservable(this.dataSource)) {\n        dataStream = this.dataSource;\n      } else if (Array.isArray(this.dataSource)) {\n        dataStream = of(this.dataSource);\n      }\n\n      if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableUnknownDataSourceError();\n      }\n\n      this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(function (data) {\n        _this17._data = data || [];\n\n        _this17.renderRows();\n      });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n\n  }, {\n    key: \"_forceRenderHeaderRows\",\n    value: function _forceRenderHeaderRows() {\n      var _this18 = this;\n\n      // Clear the header row outlet if any content exists.\n      if (this._headerRowOutlet.viewContainer.length > 0) {\n        this._headerRowOutlet.viewContainer.clear();\n      }\n\n      this._headerRowDefs.forEach(function (def, i) {\n        return _this18._renderRow(_this18._headerRowOutlet, def, i);\n      });\n\n      this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n\n  }, {\n    key: \"_forceRenderFooterRows\",\n    value: function _forceRenderFooterRows() {\n      var _this19 = this;\n\n      // Clear the footer row outlet if any content exists.\n      if (this._footerRowOutlet.viewContainer.length > 0) {\n        this._footerRowOutlet.viewContainer.clear();\n      }\n\n      this._footerRowDefs.forEach(function (def, i) {\n        return _this19._renderRow(_this19._footerRowOutlet, def, i);\n      });\n\n      this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n\n  }, {\n    key: \"_addStickyColumnStyles\",\n    value: function _addStickyColumnStyles(rows, rowDef) {\n      var _this20 = this;\n\n      var columnDefs = Array.from(rowDef.columns || []).map(function (columnName) {\n        var columnDef = _this20._columnDefsByName.get(columnName);\n\n        if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTableUnknownColumnError(columnName);\n        }\n\n        return columnDef;\n      });\n      var stickyStartStates = columnDefs.map(function (columnDef) {\n        return columnDef.sticky;\n      });\n      var stickyEndStates = columnDefs.map(function (columnDef) {\n        return columnDef.stickyEnd;\n      });\n\n      this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n\n  }, {\n    key: \"_getRenderedRows\",\n    value: function _getRenderedRows(rowOutlet) {\n      var renderedRows = [];\n\n      for (var i = 0; i < rowOutlet.viewContainer.length; i++) {\n        var viewRef = rowOutlet.viewContainer.get(i);\n        renderedRows.push(viewRef.rootNodes[0]);\n      }\n\n      return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n\n  }, {\n    key: \"_getRowDefs\",\n    value: function _getRowDefs(data, dataIndex) {\n      if (this._rowDefs.length == 1) {\n        return [this._rowDefs[0]];\n      }\n\n      var rowDefs = [];\n\n      if (this.multiTemplateDataRows) {\n        rowDefs = this._rowDefs.filter(function (def) {\n          return !def.when || def.when(dataIndex, data);\n        });\n      } else {\n        var rowDef = this._rowDefs.find(function (def) {\n          return def.when && def.when(dataIndex, data);\n        }) || this._defaultRowDef;\n\n        if (rowDef) {\n          rowDefs.push(rowDef);\n        }\n      }\n\n      if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableMissingMatchingRowDefError(data);\n      }\n\n      return rowDefs;\n    }\n  }, {\n    key: \"_getEmbeddedViewArgs\",\n    value: function _getEmbeddedViewArgs(renderRow, index) {\n      var rowDef = renderRow.rowDef;\n      var context = {\n        $implicit: renderRow.data\n      };\n      return {\n        templateRef: rowDef.template,\n        context: context,\n        index: index\n      };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n\n  }, {\n    key: \"_renderRow\",\n    value: function _renderRow(outlet, rowDef, index) {\n      var context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n      var view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n\n      this._renderCellTemplateForItem(rowDef, context);\n\n      return view;\n    }\n  }, {\n    key: \"_renderCellTemplateForItem\",\n    value: function _renderCellTemplateForItem(rowDef, context) {\n      var _iterator9 = _createForOfIteratorHelper(this._getCellTemplates(rowDef)),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var cellTemplate = _step9.value;\n\n          if (CdkCellOutlet.mostRecentCellOutlet) {\n            CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n\n  }, {\n    key: \"_updateRowIndexContext\",\n    value: function _updateRowIndexContext() {\n      var viewContainer = this._rowOutlet.viewContainer;\n\n      for (var renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n        var viewRef = viewContainer.get(renderIndex);\n        var context = viewRef.context;\n        context.count = count;\n        context.first = renderIndex === 0;\n        context.last = renderIndex === count - 1;\n        context.even = renderIndex % 2 === 0;\n        context.odd = !context.even;\n\n        if (this.multiTemplateDataRows) {\n          context.dataIndex = this._renderRows[renderIndex].dataIndex;\n          context.renderIndex = renderIndex;\n        } else {\n          context.index = this._renderRows[renderIndex].dataIndex;\n        }\n      }\n    }\n    /** Gets the column definitions for the provided row def. */\n\n  }, {\n    key: \"_getCellTemplates\",\n    value: function _getCellTemplates(rowDef) {\n      var _this21 = this;\n\n      if (!rowDef || !rowDef.columns) {\n        return [];\n      }\n\n      return Array.from(rowDef.columns, function (columnId) {\n        var column = _this21._columnDefsByName.get(columnId);\n\n        if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTableUnknownColumnError(columnId);\n        }\n\n        return rowDef.extractCellTemplate(column);\n      });\n    }\n    /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n\n  }, {\n    key: \"_applyNativeTableSections\",\n    value: function _applyNativeTableSections() {\n      var documentFragment = this._document.createDocumentFragment();\n\n      var sections = [{\n        tag: 'thead',\n        outlets: [this._headerRowOutlet]\n      }, {\n        tag: 'tbody',\n        outlets: [this._rowOutlet, this._noDataRowOutlet]\n      }, {\n        tag: 'tfoot',\n        outlets: [this._footerRowOutlet]\n      }];\n\n      for (var _i2 = 0, _sections = sections; _i2 < _sections.length; _i2++) {\n        var section = _sections[_i2];\n\n        var element = this._document.createElement(section.tag);\n\n        element.setAttribute('role', 'rowgroup');\n\n        var _iterator10 = _createForOfIteratorHelper(section.outlets),\n            _step10;\n\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var outlet = _step10.value;\n            element.appendChild(outlet.elementRef.nativeElement);\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n\n        documentFragment.appendChild(element);\n      } // Use a DocumentFragment so we don't hit the DOM on each iteration.\n\n\n      this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n\n  }, {\n    key: \"_forceRenderDataRows\",\n    value: function _forceRenderDataRows() {\n      this._dataDiffer.diff([]);\n\n      this._rowOutlet.viewContainer.clear();\n\n      this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n\n  }, {\n    key: \"_checkStickyStates\",\n    value: function _checkStickyStates() {\n      var stickyCheckReducer = function stickyCheckReducer(acc, d) {\n        return acc || d.hasStickyChanged();\n      }; // Note that the check needs to occur for every definition since it notifies the definition\n      // that it can reset its dirty state. Using another operator like `some` may short-circuit\n      // remaining definitions and leave them in an unchecked state.\n\n\n      if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n        this.updateStickyHeaderRowStyles();\n      }\n\n      if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n        this.updateStickyFooterRowStyles();\n      }\n\n      if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n        this._stickyColumnStylesNeedReset = true;\n        this.updateStickyColumnStyles();\n      }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n\n  }, {\n    key: \"_setupStickyStyler\",\n    value: function _setupStickyStyler() {\n      var _this22 = this;\n\n      var direction = this._dir ? this._dir.value : 'ltr';\n      this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n      (this._dir ? this._dir.change : of()).pipe(takeUntil(this._onDestroy)).subscribe(function (value) {\n        _this22._stickyStyler.direction = value;\n\n        _this22.updateStickyColumnStyles();\n      });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n\n  }, {\n    key: \"_getOwnDefs\",\n    value: function _getOwnDefs(items) {\n      var _this23 = this;\n\n      return items.filter(function (item) {\n        return !item._table || item._table === _this23;\n      });\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n\n  }, {\n    key: \"_updateNoDataRow\",\n    value: function _updateNoDataRow() {\n      var noDataRow = this._customNoDataRow || this._noDataRow;\n\n      if (!noDataRow) {\n        return;\n      }\n\n      var shouldShow = this._rowOutlet.viewContainer.length === 0;\n\n      if (shouldShow === this._isShowingNoDataRow) {\n        return;\n      }\n\n      var container = this._noDataRowOutlet.viewContainer;\n\n      if (shouldShow) {\n        var view = container.createEmbeddedView(noDataRow.templateRef);\n        var rootNode = view.rootNodes[0]; // Only add the attributes if we have a single root node since it's hard\n        // to figure out which one to add it to when there are multiple.\n\n        if (view.rootNodes.length === 1 && (rootNode === null || rootNode === void 0 ? void 0 : rootNode.nodeType) === this._document.ELEMENT_NODE) {\n          rootNode.setAttribute('role', 'row');\n          rootNode.classList.add(noDataRow._contentClassName);\n        }\n      } else {\n        container.clear();\n      }\n\n      this._isShowingNoDataRow = shouldShow;\n    }\n  }]);\n\n  return CdkTable;\n}();\n\nCdkTable.ɵfac = function CdkTable_Factory(t) {\n  return new (t || CdkTable)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵinjectAttribute('role'), i0.ɵɵdirectiveInject(i1.Directionality, 8), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i2.Platform), i0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY), i0.ɵɵdirectiveInject(_COALESCED_STYLE_SCHEDULER), i0.ɵɵdirectiveInject(i3.ViewportRuler), i0.ɵɵdirectiveInject(STICKY_POSITIONING_LISTENER, 12), i0.ɵɵdirectiveInject(i0.NgZone, 8));\n};\n\nCdkTable.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CdkTable,\n  selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]],\n  contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, CdkNoDataRow, 5);\n      i0.ɵɵcontentQuery(dirIndex, CdkColumnDef, 5);\n      i0.ɵɵcontentQuery(dirIndex, CdkRowDef, 5);\n      i0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, 5);\n      i0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._noDataRow = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n    }\n  },\n  viewQuery: function CdkTable_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(DataRowOutlet, 7);\n      i0.ɵɵviewQuery(HeaderRowOutlet, 7);\n      i0.ɵɵviewQuery(FooterRowOutlet, 7);\n      i0.ɵɵviewQuery(NoDataRowOutlet, 7);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._rowOutlet = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._headerRowOutlet = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._footerRowOutlet = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._noDataRowOutlet = _t.first);\n    }\n  },\n  hostAttrs: [1, \"cdk-table\"],\n  hostVars: 2,\n  hostBindings: function CdkTable_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"cdk-table-fixed-layout\", ctx.fixedLayout);\n    }\n  },\n  inputs: {\n    trackBy: \"trackBy\",\n    dataSource: \"dataSource\",\n    multiTemplateDataRows: \"multiTemplateDataRows\",\n    fixedLayout: \"fixedLayout\"\n  },\n  outputs: {\n    contentChanged: \"contentChanged\"\n  },\n  exportAs: [\"cdkTable\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CDK_TABLE,\n    useExisting: CdkTable\n  }, {\n    provide: _VIEW_REPEATER_STRATEGY,\n    useClass: _DisposeViewRepeaterStrategy\n  }, {\n    provide: _COALESCED_STYLE_SCHEDULER,\n    useClass: _CoalescedStyleScheduler\n  }, // Prevent nested tables from seeing this table's StickyPositioningListener.\n  {\n    provide: STICKY_POSITIONING_LISTENER,\n    useValue: null\n  }])],\n  ngContentSelectors: _c1,\n  decls: 6,\n  vars: 0,\n  consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n  template: function CdkTable_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c0);\n      i0.ɵɵprojection(0);\n      i0.ɵɵprojection(1, 1);\n      i0.ɵɵelementContainer(2, 0)(3, 1)(4, 2)(5, 3);\n    }\n  },\n  dependencies: [DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, NoDataRowOutlet],\n  styles: [\".cdk-table-fixed-layout{table-layout:fixed}\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTable, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-table, table[cdk-table]',\n      exportAs: 'cdkTable',\n      template: CDK_TABLE_TEMPLATE,\n      host: {\n        'class': 'cdk-table',\n        '[class.cdk-table-fixed-layout]': 'fixedLayout'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      providers: [{\n        provide: CDK_TABLE,\n        useExisting: CdkTable\n      }, {\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _DisposeViewRepeaterStrategy\n      }, {\n        provide: _COALESCED_STYLE_SCHEDULER,\n        useClass: _CoalescedStyleScheduler\n      }, // Prevent nested tables from seeing this table's StickyPositioningListener.\n      {\n        provide: STICKY_POSITIONING_LISTENER,\n        useValue: null\n      }],\n      styles: [\".cdk-table-fixed-layout{table-layout:fixed}\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.IterableDiffers\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['role']\n      }]\n    }, {\n      type: i1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i2.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [_VIEW_REPEATER_STRATEGY]\n      }]\n    }, {\n      type: _CoalescedStyleScheduler,\n      decorators: [{\n        type: Inject,\n        args: [_COALESCED_STYLE_SCHEDULER]\n      }]\n    }, {\n      type: i3.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }, {\n        type: Inject,\n        args: [STICKY_POSITIONING_LISTENER]\n      }]\n    }, {\n      type: i0.NgZone,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    trackBy: [{\n      type: Input\n    }],\n    dataSource: [{\n      type: Input\n    }],\n    multiTemplateDataRows: [{\n      type: Input\n    }],\n    fixedLayout: [{\n      type: Input\n    }],\n    contentChanged: [{\n      type: Output\n    }],\n    _rowOutlet: [{\n      type: ViewChild,\n      args: [DataRowOutlet, {\n        static: true\n      }]\n    }],\n    _headerRowOutlet: [{\n      type: ViewChild,\n      args: [HeaderRowOutlet, {\n        static: true\n      }]\n    }],\n    _footerRowOutlet: [{\n      type: ViewChild,\n      args: [FooterRowOutlet, {\n        static: true\n      }]\n    }],\n    _noDataRowOutlet: [{\n      type: ViewChild,\n      args: [NoDataRowOutlet, {\n        static: true\n      }]\n    }],\n    _contentColumnDefs: [{\n      type: ContentChildren,\n      args: [CdkColumnDef, {\n        descendants: true\n      }]\n    }],\n    _contentRowDefs: [{\n      type: ContentChildren,\n      args: [CdkRowDef, {\n        descendants: true\n      }]\n    }],\n    _contentHeaderRowDefs: [{\n      type: ContentChildren,\n      args: [CdkHeaderRowDef, {\n        descendants: true\n      }]\n    }],\n    _contentFooterRowDefs: [{\n      type: ContentChildren,\n      args: [CdkFooterRowDef, {\n        descendants: true\n      }]\n    }],\n    _noDataRow: [{\n      type: ContentChild,\n      args: [CdkNoDataRow]\n    }]\n  });\n})();\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\n\n\nfunction mergeArrayAndSet(array, set) {\n  return array.concat(Array.from(set));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n\n\nvar CdkTextColumn = /*#__PURE__*/function () {\n  function CdkTextColumn( // `CdkTextColumn` is always requiring a table, but we just assert it manually\n  // for better error reporting.\n  // tslint:disable-next-line: lightweight-tokens\n  _table, _options) {\n    _classCallCheck(this, CdkTextColumn);\n\n    this._table = _table;\n    this._options = _options;\n    /** Alignment of the cell values. */\n\n    this.justify = 'start';\n    this._options = _options || {};\n  }\n  /** Column name that should be used to reference this column. */\n\n\n  _createClass(CdkTextColumn, [{\n    key: \"name\",\n    get: function get() {\n      return this._name;\n    },\n    set: function set(name) {\n      this._name = name; // With Ivy, inputs can be initialized before static query results are\n      // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n\n      this._syncColumnDefName();\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._syncColumnDefName();\n\n      if (this.headerText === undefined) {\n        this.headerText = this._createDefaultHeaderText();\n      }\n\n      if (!this.dataAccessor) {\n        this.dataAccessor = this._options.defaultDataAccessor || function (data, name) {\n          return data[name];\n        };\n      }\n\n      if (this._table) {\n        // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n        // since the columnDef will not pick up its content by the time the table finishes checking\n        // its content and initializing the rows.\n        this.columnDef.cell = this.cell;\n        this.columnDef.headerCell = this.headerCell;\n\n        this._table.addColumnDef(this.columnDef);\n      } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        throw getTableTextColumnMissingParentTableError();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._table) {\n        this._table.removeColumnDef(this.columnDef);\n      }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n\n  }, {\n    key: \"_createDefaultHeaderText\",\n    value: function _createDefaultHeaderText() {\n      var name = this.name;\n\n      if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableTextColumnMissingNameError();\n      }\n\n      if (this._options && this._options.defaultHeaderTextTransform) {\n        return this._options.defaultHeaderTextTransform(name);\n      }\n\n      return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n\n  }, {\n    key: \"_syncColumnDefName\",\n    value: function _syncColumnDefName() {\n      if (this.columnDef) {\n        this.columnDef.name = this.name;\n      }\n    }\n  }]);\n\n  return CdkTextColumn;\n}();\n\nCdkTextColumn.ɵfac = function CdkTextColumn_Factory(t) {\n  return new (t || CdkTextColumn)(i0.ɵɵdirectiveInject(CdkTable, 8), i0.ɵɵdirectiveInject(TEXT_COLUMN_OPTIONS, 8));\n};\n\nCdkTextColumn.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CdkTextColumn,\n  selectors: [[\"cdk-text-column\"]],\n  viewQuery: function CdkTextColumn_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(CdkColumnDef, 7);\n      i0.ɵɵviewQuery(CdkCellDef, 7);\n      i0.ɵɵviewQuery(CdkHeaderCellDef, 7);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columnDef = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n    }\n  },\n  inputs: {\n    name: \"name\",\n    headerText: \"headerText\",\n    dataAccessor: \"dataAccessor\",\n    justify: \"justify\"\n  },\n  decls: 3,\n  vars: 0,\n  consts: [[\"cdkColumnDef\", \"\"], [\"cdk-header-cell\", \"\", 3, \"text-align\", 4, \"cdkHeaderCellDef\"], [\"cdk-cell\", \"\", 3, \"text-align\", 4, \"cdkCellDef\"], [\"cdk-header-cell\", \"\"], [\"cdk-cell\", \"\"]],\n  template: function CdkTextColumn_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainerStart(0, 0);\n      i0.ɵɵtemplate(1, CdkTextColumn_th_1_Template, 2, 3, \"th\", 1);\n      i0.ɵɵtemplate(2, CdkTextColumn_td_2_Template, 2, 3, \"td\", 2);\n      i0.ɵɵelementContainerEnd();\n    }\n  },\n  dependencies: [CdkCellDef, CdkHeaderCellDef, CdkColumnDef, CdkCell, CdkHeaderCell],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTextColumn, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-text-column',\n      template: \"\\n    <ng-container cdkColumnDef>\\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\\\"justify\\\">\\n        {{headerText}}\\n      </th>\\n      <td cdk-cell *cdkCellDef=\\\"let data\\\" [style.text-align]=\\\"justify\\\">\\n        {{dataAccessor(data, name)}}\\n      </td>\\n    </ng-container>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      // Change detection is intentionally not set to OnPush. This component's template will be provided\n      // to the table to be inserted into its view. This is problematic when change detection runs since\n      // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n      // mean's the template in the table's view will not have the updated value (and in fact will cause\n      // an ExpressionChangedAfterItHasBeenCheckedError).\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default\n    }]\n  }], function () {\n    return [{\n      type: CdkTable,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [TEXT_COLUMN_OPTIONS]\n      }]\n    }];\n  }, {\n    name: [{\n      type: Input\n    }],\n    headerText: [{\n      type: Input\n    }],\n    dataAccessor: [{\n      type: Input\n    }],\n    justify: [{\n      type: Input\n    }],\n    columnDef: [{\n      type: ViewChild,\n      args: [CdkColumnDef, {\n        static: true\n      }]\n    }],\n    cell: [{\n      type: ViewChild,\n      args: [CdkCellDef, {\n        static: true\n      }]\n    }],\n    headerCell: [{\n      type: ViewChild,\n      args: [CdkHeaderCellDef, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar EXPORTED_DECLARATIONS = [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, CdkRecycleRows, NoDataRowOutlet];\n\nvar CdkTableModule = /*#__PURE__*/_createClass(function CdkTableModule() {\n  _classCallCheck(this, CdkTableModule);\n});\n\nCdkTableModule.ɵfac = function CdkTableModule_Factory(t) {\n  return new (t || CdkTableModule)();\n};\n\nCdkTableModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CdkTableModule\n});\nCdkTableModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [ScrollingModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTableModule, [{\n    type: NgModule,\n    args: [{\n      exports: EXPORTED_DECLARATIONS,\n      declarations: EXPORTED_DECLARATIONS,\n      imports: [ScrollingModule]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };","map":{"version":3,"names":["coerceBooleanProperty","_VIEW_REPEATER_STRATEGY","_RecycleViewRepeaterStrategy","isDataSource","_DisposeViewRepeaterStrategy","DataSource","DOCUMENT","i0","InjectionToken","Directive","Inject","Optional","Input","ContentChild","Injectable","Component","ChangeDetectionStrategy","ViewEncapsulation","EmbeddedViewRef","EventEmitter","NgZone","Attribute","SkipSelf","Output","ViewChild","ContentChildren","NgModule","Subject","from","BehaviorSubject","isObservable","of","takeUntil","take","i1","i2","i3","ScrollingModule","mixinHasStickyInput","base","args","_sticky","_hasStickyChanged","v","prevValue","hasStickyChanged","CDK_TABLE","TEXT_COLUMN_OPTIONS","CdkCellDef","template","ɵfac","TemplateRef","ɵdir","type","selector","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDefBase","_CdkColumnDefBase","CdkColumnDef","_table","_stickyEnd","_name","name","_setNameInput","_columnCssClassName","cssClassFriendlyName","value","replace","_updateColumnCssClassName","provide","useExisting","inputs","providers","undefined","decorators","stickyEnd","cell","headerCell","footerCell","BaseCdkCell","columnDef","elementRef","nativeElement","classList","add","CdkHeaderCell","ElementRef","host","CdkFooterCell","_a","_elementRef","nodeType","tableRole","getAttribute","role","setAttribute","CdkCell","_Schedule","tasks","endTasks","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","_ngZone","_currentSchedule","_destroyed","task","_createScheduleIfNeeded","push","next","complete","_getScheduleObservable","pipe","subscribe","length","schedule","isStable","Promise","resolve","onStable","ɵprov","CDK_ROW_TEMPLATE","BaseRowDef","_differs","changes","_columnsDiffer","columns","currentValue","find","create","diff","column","CdkHeaderRowDef","CdkFooterRowDef","IterableDiffers","CdkHeaderRowDefBase","_CdkHeaderRowDefBase","CdkFooterRowDefBase","_CdkFooterRowDefBase","CdkRowDef","CdkCellOutlet","_viewContainer","mostRecentCellOutlet","ViewContainerRef","CdkHeaderRow","ɵcmp","changeDetection","Default","encapsulation","None","CdkFooterRow","CdkRow","CdkNoDataRow","templateRef","_contentClassName","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","direction","_coalescedStyleScheduler","_isBrowser","_needsPositionStickyOnElement","_positionListener","_cachedCellWidths","_borderCellCss","rows","stickyDirections","elementsToClear","row","ELEMENT_NODE","i","children","element","_removeStickyStyle","stickyStartStates","stickyEndStates","recalculateCellWidths","some","state","stickyColumnsUpdated","sizes","stickyEndColumnsUpdated","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","lastStickyStart","lastIndexOf","firstStickyEnd","indexOf","isRtl","start","end","_addStickyStyle","slice","map","width","index","reverse","rowsToStick","stickyStates","position","states","stickyOffsets","stickyCellHeights","elementsToStick","rowIndex","stickyOffset","Array","height","getBoundingClientRect","borderedRowIndex","_b","offset","isBorderedRowIndex","stickyHeaderRowsUpdated","offsets","elements","stickyFooterRowsUpdated","tableElement","tfoot","querySelector","dir","style","remove","hasDirection","zIndex","_getCalculatedZIndex","dirValue","isBorderElement","cssText","zIndexIncrements","top","bottom","left","right","firstRowCells","widths","positions","nextPosition","getTableUnknownColumnError","id","Error","getTableDuplicateColumnNameError","getTableMultipleDefaultRowDefsError","getTableMissingMatchingRowDefError","data","JSON","stringify","getTableMissingRowDefsError","getTableUnknownDataSourceError","getTableTextColumnMissingParentTableError","getTableTextColumnMissingNameError","STICKY_POSITIONING_LISTENER","CdkRecycleRows","useClass","DataRowOutlet","viewContainer","HeaderRowOutlet","FooterRowOutlet","NoDataRowOutlet","CDK_TABLE_TEMPLATE","RowViewRef","CdkTable","_changeDetectorRef","_dir","_document","_platform","_viewRepeater","_viewportRuler","_stickyPositioningListener","_onDestroy","_columnDefsByName","Map","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_stickyColumnStylesNeedReset","_forceRecalculateCellWidths","_cachedRenderRowsMap","stickyCssClass","needsPositionStickyOnElement","_isShowingNoDataRow","_multiTemplateDataRows","_fixedLayout","contentChanged","viewChange","Number","MAX_VALUE","nodeName","_trackByFn","fn","ngDevMode","console","warn","_dataSource","dataSource","_switchDataSource","_rowOutlet","_forceRenderDataRows","updateStickyColumnStyles","_setupStickyStyler","_applyNativeTableSections","_dataDiffer","_i","dataRow","trackBy","dataIndex","change","_cacheRowDefs","_cacheColumnDefs","_headerRowDefs","_footerRowDefs","_rowDefs","columnsChanged","_renderUpdatedColumns","rowDefsChanged","_forceRenderHeaderRows","_forceRenderFooterRows","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","_headerRowOutlet","_footerRowOutlet","forEach","def","clear","_defaultRowDef","disconnect","_renderRows","_getAllRenderRows","_updateNoDataRow","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","item","operation","context","_renderCellTemplateForItem","rowDef","_updateRowIndexContext","forEachIdentityChange","rowView","get","$implicit","isInAngularZone","delete","headerRowDef","footerRowDef","noDataRow","_customNoDataRow","headerRows","_getRenderedRows","thead","display","sticky","_stickyStyler","clearStickyPositioning","stickRows","resetStickyChanged","footerRows","updateStickyFooterContainer","dataRows","headerRow","_addStickyColumnStyles","footerRow","values","renderRows","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","has","set","WeakMap","j","renderRow","cache","rowDefs","_getRowDefs","cachedRenderRows","shift","columnDefs","mergeArrayAndSet","_getOwnDefs","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","filter","when","multiTemplateDataRows","columnsDiffReducer","acc","getColumnsDiff","dataColumnsChanged","reduce","headerColumnsChanged","footerColumnsChanged","unsubscribe","dataStream","connect","isArray","_renderRow","updateStickyHeaderRowStyles","updateStickyFooterRowStyles","columnName","updateStickyColumns","rowOutlet","renderedRows","viewRef","rootNodes","outlet","view","createEmbeddedView","_getCellTemplates","cellTemplate","markForCheck","renderIndex","count","first","last","even","odd","columnId","extractCellTemplate","documentFragment","createDocumentFragment","sections","tag","outlets","_noDataRowOutlet","section","createElement","appendChild","stickyCheckReducer","d","isBrowser","items","_noDataRow","shouldShow","container","rootNode","ChangeDetectorRef","Directionality","Platform","ViewportRuler","useValue","exportAs","styles","fixedLayout","static","descendants","array","concat","CdkTextColumn","_options","justify","_syncColumnDefName","headerText","_createDefaultHeaderText","dataAccessor","defaultDataAccessor","addColumnDef","removeColumnDef","defaultHeaderTextTransform","toUpperCase","EXPORTED_DECLARATIONS","CdkTableModule","ɵmod","ɵinj","exports","declarations","imports"],"sources":["C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@angular/cdk/fesm2015/table.mjs"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, isDataSource, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Optional, Input, ContentChild, Injectable, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, EventEmitter, NgZone, Attribute, SkipSelf, Output, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { Subject, from, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/bidi';\nimport * as i2 from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /** Whether the sticky input has changed since it was last checked. */\n            this._hasStickyChanged = false;\n        }\n        /** Whether sticky positioning should be applied. */\n        get sticky() {\n            return this._sticky;\n        }\n        set sticky(v) {\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /** Whether the sticky value has changed since this was last called. */\n        hasStickyChanged() {\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: CdkCellDef, selector: \"[cdkCellDef]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkCellDef, decorators: [{\n            type: Directive,\n            args: [{ selector: '[cdkCellDef]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkHeaderCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkHeaderCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkHeaderCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: CdkHeaderCellDef, selector: \"[cdkHeaderCellDef]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{ selector: '[cdkHeaderCellDef]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkFooterCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkFooterCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkFooterCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: CdkFooterCellDef, selector: \"[cdkFooterCellDef]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{ selector: '[cdkFooterCellDef]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n// Boilerplate for applying mixins to CdkColumnDef.\n/** @docs-private */\nclass CdkColumnDefBase {\n}\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n    constructor(_table) {\n        super();\n        this._table = _table;\n        this._stickyEnd = false;\n    }\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    set stickyEnd(v) {\n        const prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setNameInput(value) {\n        // If the directive is set without a name (updated programmatically), then this setter will\n        // trigger with an empty string and should not overwrite the programmatically set value.\n        if (value) {\n            this._name = value;\n            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');\n            this._updateColumnCssClassName();\n        }\n    }\n}\nCdkColumnDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkColumnDef, deps: [{ token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkColumnDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: CdkColumnDef, selector: \"[cdkColumnDef]\", inputs: { sticky: \"sticky\", name: [\"cdkColumnDef\", \"name\"], stickyEnd: \"stickyEnd\" }, providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }], queries: [{ propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true }, { propertyName: \"footerCell\", first: true, predicate: CdkFooterCellDef, descendants: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkColumnDef]',\n                    inputs: ['sticky'],\n                    providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_TABLE]\n                    }, {\n                        type: Optional\n                    }] }];\n    }, propDecorators: { name: [{\n                type: Input,\n                args: ['cdkColumnDef']\n            }], stickyEnd: [{\n                type: Input,\n                args: ['stickyEnd']\n            }], cell: [{\n                type: ContentChild,\n                args: [CdkCellDef]\n            }], headerCell: [{\n                type: ContentChild,\n                args: [CdkHeaderCellDef]\n            }], footerCell: [{\n                type: ContentChild,\n                args: [CdkFooterCellDef]\n            }] } });\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        elementRef.nativeElement.classList.add(...columnDef._columnCssClassName);\n    }\n}\n/** Header cell template container that adds the right classes and role. */\nclass CdkHeaderCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkHeaderCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkHeaderCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkHeaderCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: CdkHeaderCell, selector: \"cdk-header-cell, th[cdk-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"cdk-header-cell\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-header-cell, th[cdk-header-cell]',\n                    host: {\n                        'class': 'cdk-header-cell',\n                        'role': 'columnheader',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: CdkColumnDef }, { type: i0.ElementRef }]; } });\n/** Footer cell template container that adds the right classes and role. */\nclass CdkFooterCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        var _a;\n        super(columnDef, elementRef);\n        if (((_a = columnDef._table) === null || _a === void 0 ? void 0 : _a._elementRef.nativeElement.nodeType) === 1) {\n            const tableRole = columnDef._table._elementRef.nativeElement.getAttribute('role');\n            const role = tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n}\nCdkFooterCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkFooterCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkFooterCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: CdkFooterCell, selector: \"cdk-footer-cell, td[cdk-footer-cell]\", host: { classAttribute: \"cdk-footer-cell\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                    host: {\n                        'class': 'cdk-footer-cell',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: CdkColumnDef }, { type: i0.ElementRef }]; } });\n/** Cell template container that adds the right classes and role. */\nclass CdkCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        var _a;\n        super(columnDef, elementRef);\n        if (((_a = columnDef._table) === null || _a === void 0 ? void 0 : _a._elementRef.nativeElement.nodeType) === 1) {\n            const tableRole = columnDef._table._elementRef.nativeElement.getAttribute('role');\n            const role = tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n}\nCdkCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: CdkCell, selector: \"cdk-cell, td[cdk-cell]\", host: { classAttribute: \"cdk-cell\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-cell, td[cdk-cell]',\n                    host: {\n                        'class': 'cdk-cell',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: CdkColumnDef }, { type: i0.ElementRef }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @docs-private\n */\nclass _Schedule {\n    constructor() {\n        this.tasks = [];\n        this.endTasks = [];\n    }\n}\n/** Injection token used to provide a coalesced style scheduler. */\nconst _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nclass _CoalescedStyleScheduler {\n    constructor(_ngZone) {\n        this._ngZone = _ngZone;\n        this._currentSchedule = null;\n        this._destroyed = new Subject();\n    }\n    /**\n     * Schedules the specified task to run at the end of the current VM turn.\n     */\n    schedule(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.tasks.push(task);\n    }\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n    scheduleEnd(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.endTasks.push(task);\n    }\n    /** Prevent any further tasks from running. */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    _createScheduleIfNeeded() {\n        if (this._currentSchedule) {\n            return;\n        }\n        this._currentSchedule = new _Schedule();\n        this._getScheduleObservable()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => {\n            while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\n                const schedule = this._currentSchedule;\n                // Capture new tasks scheduled by the current set of tasks.\n                this._currentSchedule = new _Schedule();\n                for (const task of schedule.tasks) {\n                    task();\n                }\n                for (const task of schedule.endTasks) {\n                    task();\n                }\n            }\n            this._currentSchedule = null;\n        });\n    }\n    _getScheduleObservable() {\n        // Use onStable when in the context of an ongoing change detection cycle so that we\n        // do not accidentally trigger additional cycles.\n        return this._ngZone.isStable\n            ? from(Promise.resolve(undefined))\n            : this._ngZone.onStable.pipe(take(1));\n    }\n}\n_CoalescedStyleScheduler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _CoalescedStyleScheduler, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\n_CoalescedStyleScheduler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _CoalescedStyleScheduler });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _CoalescedStyleScheduler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nclass BaseRowDef {\n    constructor(\n    /** @docs-private */ template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n}\nBaseRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: BaseRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }], target: i0.ɵɵFactoryTarget.Directive });\nBaseRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: BaseRowDef, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: BaseRowDef, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }]; } });\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/** @docs-private */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkHeaderRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkHeaderRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkHeaderRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: CdkHeaderRowDef, selector: \"[cdkHeaderRowDef]\", inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkHeaderRowDef]',\n                    inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_TABLE]\n                    }, {\n                        type: Optional\n                    }] }];\n    } });\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/** @docs-private */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkFooterRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkFooterRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkFooterRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: CdkFooterRowDef, selector: \"[cdkFooterRowDef]\", inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\"] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkFooterRowDef]',\n                    inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_TABLE]\n                    }, {\n                        type: Optional\n                    }] }];\n    } });\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n}\nCdkRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: CdkRowDef, selector: \"[cdkRowDef]\", inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkRowDef]',\n                    inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_TABLE]\n                    }, {\n                        type: Optional\n                    }] }];\n    } });\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nclass CdkCellOutlet {\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n}\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\nCdkCellOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkCellOutlet, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkCellOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkCellOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[cdkCellOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass CdkHeaderRow {\n}\nCdkHeaderRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkHeaderRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCdkHeaderRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: CdkHeaderRow, selector: \"cdk-header-row, tr[cdk-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-header-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-header-row, tr[cdk-header-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass CdkFooterRow {\n}\nCdkFooterRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkFooterRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCdkFooterRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: CdkFooterRow, selector: \"cdk-footer-row, tr[cdk-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-footer-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-footer-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass CdkRow {\n}\nCdkRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCdkRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: CdkRow, selector: \"cdk-row, tr[cdk-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-row, tr[cdk-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass CdkNoDataRow {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._contentClassName = 'cdk-no-data-row';\n    }\n}\nCdkNoDataRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkNoDataRow, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkNoDataRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: CdkNoDataRow, selector: \"ng-template[cdkNoDataRow]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkNoDataRow]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n    /**\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n     * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n     *     using inline styles. If false, it is assumed that position: sticky is included in\n     *     the component stylesheet for _stickCellCss.\n     * @param _positionListener A listener that is notified of changes to sticky rows/columns\n     *     and their dimensions.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._isBrowser = _isBrowser;\n        this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n        this._positionListener = _positionListener;\n        this._cachedCellWidths = [];\n        this._borderCellCss = {\n            'top': `${_stickCellCss}-border-elem-top`,\n            'bottom': `${_stickCellCss}-border-elem-bottom`,\n            'left': `${_stickCellCss}-border-elem-left`,\n            'right': `${_stickCellCss}-border-elem-right`,\n        };\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        const elementsToClear = [];\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            elementsToClear.push(row);\n            for (let i = 0; i < row.children.length; i++) {\n                elementsToClear.push(row.children[i]);\n            }\n        }\n        // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            for (const element of elementsToClear) {\n                this._removeStickyStyle(element, stickyDirections);\n            }\n        });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n     *     column cell. If `false` cached widths will be used instead.\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true) {\n        if (!rows.length ||\n            !this._isBrowser ||\n            !(stickyStartStates.some(state => state) || stickyEndStates.some(state => state))) {\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({ sizes: [] });\n                this._positionListener.stickyEndColumnsUpdated({ sizes: [] });\n            }\n            return;\n        }\n        const firstRow = rows[0];\n        const numCells = firstRow.children.length;\n        const cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        const lastStickyStart = stickyStartStates.lastIndexOf(true);\n        const firstStickyEnd = stickyEndStates.indexOf(true);\n        // Coalesce with sticky row updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            const isRtl = this.direction === 'rtl';\n            const start = isRtl ? 'right' : 'left';\n            const end = isRtl ? 'left' : 'right';\n            for (const row of rows) {\n                for (let i = 0; i < numCells; i++) {\n                    const cell = row.children[i];\n                    if (stickyStartStates[i]) {\n                        this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n                    }\n                    if (stickyEndStates[i]) {\n                        this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n                    }\n                }\n            }\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({\n                    sizes: lastStickyStart === -1\n                        ? []\n                        : cellWidths\n                            .slice(0, lastStickyStart + 1)\n                            .map((width, index) => (stickyStartStates[index] ? width : null)),\n                });\n                this._positionListener.stickyEndColumnsUpdated({\n                    sizes: firstStickyEnd === -1\n                        ? []\n                        : cellWidths\n                            .slice(firstStickyEnd)\n                            .map((width, index) => (stickyEndStates[index + firstStickyEnd] ? width : null))\n                            .reverse(),\n                });\n            }\n        });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n        // sticky states need to be reversed as well.\n        const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n        const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n        // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n        const stickyOffsets = [];\n        const stickyCellHeights = [];\n        const elementsToStick = [];\n        for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n            if (!states[rowIndex]) {\n                continue;\n            }\n            stickyOffsets[rowIndex] = stickyOffset;\n            const row = rows[rowIndex];\n            elementsToStick[rowIndex] = this._isNativeHtmlTable\n                ? Array.from(row.children)\n                : [row];\n            const height = row.getBoundingClientRect().height;\n            stickyOffset += height;\n            stickyCellHeights[rowIndex] = height;\n        }\n        const borderedRowIndex = states.lastIndexOf(true);\n        // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n        // (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            var _a, _b;\n            for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                if (!states[rowIndex]) {\n                    continue;\n                }\n                const offset = stickyOffsets[rowIndex];\n                const isBorderedRowIndex = rowIndex === borderedRowIndex;\n                for (const element of elementsToStick[rowIndex]) {\n                    this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n                }\n            }\n            if (position === 'top') {\n                (_a = this._positionListener) === null || _a === void 0 ? void 0 : _a.stickyHeaderRowsUpdated({\n                    sizes: stickyCellHeights,\n                    offsets: stickyOffsets,\n                    elements: elementsToStick,\n                });\n            }\n            else {\n                (_b = this._positionListener) === null || _b === void 0 ? void 0 : _b.stickyFooterRowsUpdated({\n                    sizes: stickyCellHeights,\n                    offsets: stickyOffsets,\n                    elements: elementsToStick,\n                });\n            }\n        });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        const tfoot = tableElement.querySelector('tfoot');\n        // Coalesce with other sticky updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            if (stickyStates.some(state => !state)) {\n                this._removeStickyStyle(tfoot, ['bottom']);\n            }\n            else {\n                this._addStickyStyle(tfoot, 'bottom', 0, false);\n            }\n        });\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n            element.classList.remove(this._borderCellCss[dir]);\n        }\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        // Short-circuit checking element.style[dir] for stickyDirections as they\n        // were already removed above.\n        const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n        if (hasDirection) {\n            element.style.zIndex = this._getCalculatedZIndex(element);\n        }\n        else {\n            // When not hasDirection, _getCalculatedZIndex will always return ''.\n            element.style.zIndex = '';\n            if (this._needsPositionStickyOnElement) {\n                element.style.position = '';\n            }\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n    _addStickyStyle(element, dir, dirValue, isBorderElement) {\n        element.classList.add(this._stickCellCss);\n        if (isBorderElement) {\n            element.classList.add(this._borderCellCss[dir]);\n        }\n        element.style[dir] = `${dirValue}px`;\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        if (this._needsPositionStickyOnElement) {\n            element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        }\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n    _getCalculatedZIndex(element) {\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n    _getCellWidths(row, recalculateCellWidths = true) {\n        if (!recalculateCellWidths && this._cachedCellWidths.length) {\n            return this._cachedCellWidths;\n        }\n        const cellWidths = [];\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            let cell = firstRowCells[i];\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        this._cachedCellWidths = cellWidths;\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to find an nonexistent column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass CdkRecycleRows {\n}\nCdkRecycleRows.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nCdkRecycleRows.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: CdkRecycleRows, selector: \"cdk-table[recycleRows], table[cdk-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nclass DataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nDataRowOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: DataRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nDataRowOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: DataRowOutlet, selector: \"[rowOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: DataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[rowOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nclass HeaderRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nHeaderRowOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: HeaderRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nHeaderRowOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: HeaderRowOutlet, selector: \"[headerRowOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: HeaderRowOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[headerRowOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nclass FooterRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nFooterRowOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: FooterRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nFooterRowOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: FooterRowOutlet, selector: \"[footerRowOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: FooterRowOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[footerRowOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nclass NoDataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nNoDataRowOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: NoDataRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nNoDataRowOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: NoDataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[noDataRowOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-content select=\"colgroup, col\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container noDataRowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nclass RowViewRef extends EmbeddedViewRef {\n}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nclass CdkTable {\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, _viewRepeater, _coalescedStyleScheduler, _viewportRuler, \n    /**\n     * @deprecated `_stickyPositioningListener` parameter to become required.\n     * @breaking-change 13.0.0\n     */\n    _stickyPositioningListener, \n    /**\n     * @deprecated `_ngZone` parameter to become required.\n     * @breaking-change 14.0.0\n     */\n    _ngZone) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        this._viewRepeater = _viewRepeater;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._viewportRuler = _viewportRuler;\n        this._stickyPositioningListener = _stickyPositioningListener;\n        this._ngZone = _ngZone;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *its* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *its* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *its* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *its* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n         * change.\n         */\n        this._stickyColumnStylesNeedReset = true;\n        /**\n         * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n         * `false`, cached values will be used instead. This is only applicable to tables with\n         * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n         */\n        this._forceRecalculateCellWidths = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overridden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        /**\n         * Whether to manually add position: sticky to all sticky cell elements. Not needed if\n         * the position is set in a selector associated with the value of stickyCssClass. May be\n         * overridden by table subclasses\n         */\n        this.needsPositionStickyOnElement = true;\n        /** Whether the no data row is currently showing anything. */\n        this._isShowingNoDataRow = false;\n        this._multiTemplateDataRows = false;\n        this._fixedLayout = false;\n        /**\n         * Emits when the table completes rendering a set of data rows based on the latest data from the\n         * data source, even if the set of rows is empty.\n         */\n        this.contentChanged = new EventEmitter();\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * @docs-private\n         */\n        this.viewChange = new BehaviorSubject({\n            start: 0,\n            end: Number.MAX_VALUE,\n        });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'table');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    set trackBy(fn) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    set multiTemplateDataRows(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n    get fixedLayout() {\n        return this._fixedLayout;\n    }\n    set fixedLayout(v) {\n        this._fixedLayout = coerceBooleanProperty(v);\n        // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n        this._forceRecalculateCellWidths = true;\n        this._stickyColumnStylesNeedReset = true;\n    }\n    ngOnInit() {\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            this._forceRecalculateCellWidths = true;\n        });\n    }\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length &&\n            !this._footerRowDefs.length &&\n            !this._rowDefs.length &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        const columnsChanged = this._renderUpdatedColumns();\n        const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n        // Ensure sticky column styles are reset if set to `true` elsewhere.\n        this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n        this._forceRecalculateCellWidths = rowDefsChanged;\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        else if (this._stickyColumnStylesNeedReset) {\n            // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n            // called when it row data arrives. Otherwise, we need to call it proactively.\n            this.updateStickyColumnStyles();\n        }\n        this._checkStickyStates();\n    }\n    ngOnDestroy() {\n        [\n            this._rowOutlet.viewContainer,\n            this._headerRowOutlet.viewContainer,\n            this._footerRowOutlet.viewContainer,\n            this._cachedRenderRowsMap,\n            this._customColumnDefs,\n            this._customRowDefs,\n            this._customHeaderRowDefs,\n            this._customFooterRowDefs,\n            this._columnDefsByName,\n        ].forEach(def => {\n            def.clear();\n        });\n        this._headerRowDefs = [];\n        this._footerRowDefs = [];\n        this._defaultRowDef = null;\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            this._updateNoDataRow();\n            this.contentChanged.next();\n            return;\n        }\n        const viewContainer = this._rowOutlet.viewContainer;\n        this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), record => record.item.data, (change) => {\n            if (change.operation === 1 /* _ViewRepeaterOperation.INSERTED */ && change.context) {\n                this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n            }\n        });\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((record) => {\n            const rowView = viewContainer.get(record.currentIndex);\n            rowView.context.$implicit = record.item.data;\n        });\n        this._updateNoDataRow();\n        // Allow the new row data to render before measuring it.\n        // @breaking-change 14.0.0 Remove undefined check once _ngZone is required.\n        if (this._ngZone && NgZone.isInAngularZone()) {\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._onDestroy)).subscribe(() => {\n                this.updateStickyColumnStyles();\n            });\n        }\n        else {\n            this.updateStickyColumnStyles();\n        }\n        this.contentChanged.next();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n    setNoDataRow(noDataRow) {\n        this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyHeaderRowStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const tableElement = this._elementRef.nativeElement;\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        const thead = tableElement.querySelector('thead');\n        if (thead) {\n            thead.style.display = headerRows.length ? '' : 'none';\n        }\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyFooterRowStyles() {\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        const tableElement = this._elementRef.nativeElement;\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        const tfoot = tableElement.querySelector('tfoot');\n        if (tfoot) {\n            tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    updateStickyColumnStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n        // In a table using a fixed layout, row content won't affect column width, so sticky styles\n        // don't need to be cleared unless either the sticky column config changes or one of the row\n        // defs change.\n        if ((this._isNativeHtmlTable && !this._fixedLayout) || this._stickyColumnStylesNeedReset) {\n            // Clear the left and right positioning from all columns in the table across all rows since\n            // sticky columns span across all table sections (header, data, footer)\n            this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n            this._stickyColumnStylesNeedReset = false;\n        }\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        });\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach(rowDef => {\n            // Collect all the rows rendered with this row definition.\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        });\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        });\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    _getAllRenderRows() {\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            let data = this._data[i];\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                let renderRow = renderRowsForData[j];\n                const cache = this._cachedRenderRowsMap.get(renderRow.data);\n                if (cache.has(renderRow.rowDef)) {\n                    cache.get(renderRow.rowDef).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map(rowDef => {\n            const cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n            if (cachedRenderRows.length) {\n                const dataRow = cachedRenderRows.shift();\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        });\n    }\n    /** Update the map containing the content's column definitions. */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n        columnDefs.forEach(columnDef => {\n            if (this._columnDefsByName.has(columnDef.name) &&\n                (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n    /** Update the list of all available row definitions that can be used. */\n    _cacheRowDefs() {\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        if (!this.multiTemplateDataRows &&\n            defaultRowDefs.length > 1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    _renderUpdatedColumns() {\n        const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\n        // Force re-render data rows if the list of column definitions have changed.\n        const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n        if (dataColumnsChanged) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed.\n        const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n        if (headerColumnsChanged) {\n            this._forceRenderHeaderRows();\n        }\n        const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n        if (footerColumnsChanged) {\n            this._forceRenderFooterRows();\n        }\n        return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (isObservable(this.dataSource)) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(data => {\n            this._data = data || [];\n            this.renderRows();\n        });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n        this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n        this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    _addStickyColumnStyles(rows, rowDef) {\n        const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return columnDef;\n        });\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    _getRenderedRows(rowOutlet) {\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            const viewRef = rowOutlet.viewContainer.get(i);\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n        }\n        else {\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    _getEmbeddedViewArgs(renderRow, index) {\n        const rowDef = renderRow.rowDef;\n        const context = { $implicit: renderRow.data };\n        return {\n            templateRef: rowDef.template,\n            context,\n            index,\n        };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        this._renderCellTemplateForItem(rowDef, context);\n        return view;\n    }\n    _renderCellTemplateForItem(rowDef, context) {\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    _updateRowIndexContext() {\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            const viewRef = viewContainer.get(renderIndex);\n            const context = viewRef.context;\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /** Gets the column definitions for the provided row def. */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, columnId => {\n            const column = this._columnDefsByName.get(columnId);\n            if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n    /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n    _applyNativeTableSections() {\n        const documentFragment = this._document.createDocumentFragment();\n        const sections = [\n            { tag: 'thead', outlets: [this._headerRowOutlet] },\n            { tag: 'tbody', outlets: [this._rowOutlet, this._noDataRowOutlet] },\n            { tag: 'tfoot', outlets: [this._footerRowOutlet] },\n        ];\n        for (const section of sections) {\n            const element = this._document.createElement(section.tag);\n            element.setAttribute('role', 'rowgroup');\n            for (const outlet of section.outlets) {\n                element.appendChild(outlet.elementRef.nativeElement);\n            }\n            documentFragment.appendChild(element);\n        }\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\n        this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    _checkStickyStates() {\n        const stickyCheckReducer = (acc, d) => {\n            return acc || d.hasStickyChanged();\n        };\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this._stickyColumnStylesNeedReset = true;\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    _setupStickyStyler() {\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n    _getOwnDefs(items) {\n        return items.filter(item => !item._table || item._table === this);\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n    _updateNoDataRow() {\n        const noDataRow = this._customNoDataRow || this._noDataRow;\n        if (!noDataRow) {\n            return;\n        }\n        const shouldShow = this._rowOutlet.viewContainer.length === 0;\n        if (shouldShow === this._isShowingNoDataRow) {\n            return;\n        }\n        const container = this._noDataRowOutlet.viewContainer;\n        if (shouldShow) {\n            const view = container.createEmbeddedView(noDataRow.templateRef);\n            const rootNode = view.rootNodes[0];\n            // Only add the attributes if we have a single root node since it's hard\n            // to figure out which one to add it to when there are multiple.\n            if (view.rootNodes.length === 1 && (rootNode === null || rootNode === void 0 ? void 0 : rootNode.nodeType) === this._document.ELEMENT_NODE) {\n                rootNode.setAttribute('role', 'row');\n                rootNode.classList.add(noDataRow._contentClassName);\n            }\n        }\n        else {\n            container.clear();\n        }\n        this._isShowingNoDataRow = shouldShow;\n    }\n}\nCdkTable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkTable, deps: [{ token: i0.IterableDiffers }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: 'role', attribute: true }, { token: i1.Directionality, optional: true }, { token: DOCUMENT }, { token: i2.Platform }, { token: _VIEW_REPEATER_STRATEGY }, { token: _COALESCED_STYLE_SCHEDULER }, { token: i3.ViewportRuler }, { token: STICKY_POSITIONING_LISTENER, optional: true, skipSelf: true }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nCdkTable.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: CdkTable, selector: \"cdk-table, table[cdk-table]\", inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: \"multiTemplateDataRows\", fixedLayout: \"fixedLayout\" }, outputs: { contentChanged: \"contentChanged\" }, host: { properties: { \"class.cdk-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"cdk-table\" }, providers: [\n        { provide: CDK_TABLE, useExisting: CdkTable },\n        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n        // Prevent nested tables from seeing this table's StickyPositioningListener.\n        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n    ], queries: [{ propertyName: \"_noDataRow\", first: true, predicate: CdkNoDataRow, descendants: true }, { propertyName: \"_contentColumnDefs\", predicate: CdkColumnDef, descendants: true }, { propertyName: \"_contentRowDefs\", predicate: CdkRowDef, descendants: true }, { propertyName: \"_contentHeaderRowDefs\", predicate: CdkHeaderRowDef, descendants: true }, { propertyName: \"_contentFooterRowDefs\", predicate: CdkFooterRowDef, descendants: true }], viewQueries: [{ propertyName: \"_rowOutlet\", first: true, predicate: DataRowOutlet, descendants: true, static: true }, { propertyName: \"_headerRowOutlet\", first: true, predicate: HeaderRowOutlet, descendants: true, static: true }, { propertyName: \"_footerRowOutlet\", first: true, predicate: FooterRowOutlet, descendants: true, static: true }, { propertyName: \"_noDataRowOutlet\", first: true, predicate: NoDataRowOutlet, descendants: true, static: true }], exportAs: [\"cdkTable\"], ngImport: i0, template: \"\\n  <ng-content select=\\\"caption\\\"></ng-content>\\n  <ng-content select=\\\"colgroup, col\\\"></ng-content>\\n  <ng-container headerRowOutlet></ng-container>\\n  <ng-container rowOutlet></ng-container>\\n  <ng-container noDataRowOutlet></ng-container>\\n  <ng-container footerRowOutlet></ng-container>\\n\", isInline: true, styles: [\".cdk-table-fixed-layout{table-layout:fixed}\"], dependencies: [{ kind: \"directive\", type: DataRowOutlet, selector: \"[rowOutlet]\" }, { kind: \"directive\", type: HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { kind: \"directive\", type: FooterRowOutlet, selector: \"[footerRowOutlet]\" }, { kind: \"directive\", type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-table, table[cdk-table]', exportAs: 'cdkTable', template: CDK_TABLE_TEMPLATE, host: {\n                        'class': 'cdk-table',\n                        '[class.cdk-table-fixed-layout]': 'fixedLayout',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [\n                        { provide: CDK_TABLE, useExisting: CdkTable },\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], styles: [\".cdk-table-fixed-layout{table-layout:fixed}\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.IterableDiffers }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['role']\n                    }] }, { type: i1.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i2.Platform }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [_VIEW_REPEATER_STRATEGY]\n                    }] }, { type: _CoalescedStyleScheduler, decorators: [{\n                        type: Inject,\n                        args: [_COALESCED_STYLE_SCHEDULER]\n                    }] }, { type: i3.ViewportRuler }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }, {\n                        type: Inject,\n                        args: [STICKY_POSITIONING_LISTENER]\n                    }] }, { type: i0.NgZone, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { trackBy: [{\n                type: Input\n            }], dataSource: [{\n                type: Input\n            }], multiTemplateDataRows: [{\n                type: Input\n            }], fixedLayout: [{\n                type: Input\n            }], contentChanged: [{\n                type: Output\n            }], _rowOutlet: [{\n                type: ViewChild,\n                args: [DataRowOutlet, { static: true }]\n            }], _headerRowOutlet: [{\n                type: ViewChild,\n                args: [HeaderRowOutlet, { static: true }]\n            }], _footerRowOutlet: [{\n                type: ViewChild,\n                args: [FooterRowOutlet, { static: true }]\n            }], _noDataRowOutlet: [{\n                type: ViewChild,\n                args: [NoDataRowOutlet, { static: true }]\n            }], _contentColumnDefs: [{\n                type: ContentChildren,\n                args: [CdkColumnDef, { descendants: true }]\n            }], _contentRowDefs: [{\n                type: ContentChildren,\n                args: [CdkRowDef, { descendants: true }]\n            }], _contentHeaderRowDefs: [{\n                type: ContentChildren,\n                args: [CdkHeaderRowDef, {\n                        descendants: true,\n                    }]\n            }], _contentFooterRowDefs: [{\n                type: ContentChildren,\n                args: [CdkFooterRowDef, {\n                        descendants: true,\n                    }]\n            }], _noDataRow: [{\n                type: ContentChild,\n                args: [CdkNoDataRow]\n            }] } });\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n    return array.concat(Array.from(set));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass CdkTextColumn {\n    constructor(\n    // `CdkTextColumn` is always requiring a table, but we just assert it manually\n    // for better error reporting.\n    // tslint:disable-next-line: lightweight-tokens\n    _table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /** Alignment of the cell values. */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    /** Column name that should be used to reference this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((data, name) => data[name]);\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    _createDefaultHeaderText() {\n        const name = this.name;\n        if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n}\nCdkTextColumn.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkTextColumn, deps: [{ token: CdkTable, optional: true }, { token: TEXT_COLUMN_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nCdkTextColumn.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: CdkTextColumn, selector: \"cdk-text-column\", inputs: { name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\", justify: \"justify\" }, viewQueries: [{ propertyName: \"columnDef\", first: true, predicate: CdkColumnDef, descendants: true, static: true }, { propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true, static: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true, static: true }], ngImport: i0, template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellDef, selector: \"[cdkCellDef]\" }, { kind: \"directive\", type: CdkHeaderCellDef, selector: \"[cdkHeaderCellDef]\" }, { kind: \"directive\", type: CdkColumnDef, selector: \"[cdkColumnDef]\", inputs: [\"sticky\", \"cdkColumnDef\", \"stickyEnd\"] }, { kind: \"directive\", type: CdkCell, selector: \"cdk-cell, td[cdk-cell]\" }, { kind: \"directive\", type: CdkHeaderCell, selector: \"cdk-header-cell, th[cdk-header-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-text-column',\n                    template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                }]\n        }], ctorParameters: function () {\n        return [{ type: CdkTable, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [TEXT_COLUMN_OPTIONS]\n                    }] }];\n    }, propDecorators: { name: [{\n                type: Input\n            }], headerText: [{\n                type: Input\n            }], dataAccessor: [{\n                type: Input\n            }], justify: [{\n                type: Input\n            }], columnDef: [{\n                type: ViewChild,\n                args: [CdkColumnDef, { static: true }]\n            }], cell: [{\n                type: ViewChild,\n                args: [CdkCellDef, { static: true }]\n            }], headerCell: [{\n                type: ViewChild,\n                args: [CdkHeaderCellDef, { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n    CdkNoDataRow,\n    CdkRecycleRows,\n    NoDataRowOutlet,\n];\nclass CdkTableModule {\n}\nCdkTableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCdkTableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkTableModule, declarations: [CdkTable,\n        CdkRowDef,\n        CdkCellDef,\n        CdkCellOutlet,\n        CdkHeaderCellDef,\n        CdkFooterCellDef,\n        CdkColumnDef,\n        CdkCell,\n        CdkRow,\n        CdkHeaderCell,\n        CdkFooterCell,\n        CdkHeaderRow,\n        CdkHeaderRowDef,\n        CdkFooterRow,\n        CdkFooterRowDef,\n        DataRowOutlet,\n        HeaderRowOutlet,\n        FooterRowOutlet,\n        CdkTextColumn,\n        CdkNoDataRow,\n        CdkRecycleRows,\n        NoDataRowOutlet], imports: [ScrollingModule], exports: [CdkTable,\n        CdkRowDef,\n        CdkCellDef,\n        CdkCellOutlet,\n        CdkHeaderCellDef,\n        CdkFooterCellDef,\n        CdkColumnDef,\n        CdkCell,\n        CdkRow,\n        CdkHeaderCell,\n        CdkFooterCell,\n        CdkHeaderRow,\n        CdkHeaderRowDef,\n        CdkFooterRow,\n        CdkFooterRowDef,\n        DataRowOutlet,\n        HeaderRowOutlet,\n        FooterRowOutlet,\n        CdkTextColumn,\n        CdkNoDataRow,\n        CdkRecycleRows,\n        NoDataRowOutlet] });\nCdkTableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkTableModule, imports: [ScrollingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: EXPORTED_DECLARATIONS,\n                    declarations: EXPORTED_DECLARATIONS,\n                    imports: [ScrollingModule],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };\n"],"mappings":";;;;;;;;AAAA,SAASA,qBAAT,QAAsC,uBAAtC;AACA,SAASC,uBAAT,EAAkCC,4BAAlC,EAAgEC,YAAhE,EAA8EC,4BAA9E,QAAkH,0BAAlH;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,SAASC,cAAT,EAAyBC,SAAzB,EAAoCC,MAApC,EAA4CC,QAA5C,EAAsDC,KAAtD,EAA6DC,YAA7D,EAA2EC,UAA3E,EAAuFC,SAAvF,EAAkGC,uBAAlG,EAA2HC,iBAA3H,EAA8IC,eAA9I,EAA+JC,YAA/J,EAA6KC,MAA7K,EAAqLC,SAArL,EAAgMC,QAAhM,EAA0MC,MAA1M,EAAkNC,SAAlN,EAA6NC,eAA7N,EAA8OC,QAA9O,QAA8P,eAA9P;AACA,SAASC,OAAT,EAAkBC,IAAlB,EAAwBC,eAAxB,EAAyCC,YAAzC,EAAuDC,EAAvD,QAAiE,MAAjE;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,gBAAhC;AACA,OAAO,KAAKC,EAAZ,MAAoB,mBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,uBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,wBAApB;AACA,SAASC,eAAT,QAAgC,wBAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;IA8DkG9B,EAqjE5F,2B;IArjE4FA,EAsjE1F,U;IAtjE0FA,EAujE5F,e;;;;iBAvjE4FA,E;IAAAA,EAqjEtD,0C;IArjEsDA,EAsjE1F,a;IAtjE0FA,EAsjE1F,gD;;;;;;IAtjE0FA,EAwjE5F,2B;IAxjE4FA,EAyjE1F,U;IAzjE0FA,EA0jE5F,e;;;;;iBA1jE4FA,E;IAAAA,EAwjExD,0C;IAxjEwDA,EAyjE1F,a;IAzjE0FA,EAyjE1F,wE;;;;AAtnER,SAAS+B,mBAAT,CAA6BC,IAA7B,EAAmC;EAC/B;IAAA;;IAAA;;IACI,kBAAqB;MAAA;;MAAA;;MAAA,kCAANC,IAAM;QAANA,IAAM;MAAA;;MACjB,gDAASA,IAAT;MACA,MAAKC,OAAL,GAAe,KAAf;MACA;;MACA,MAAKC,iBAAL,GAAyB,KAAzB;MAJiB;IAKpB;IACD;;;IAPJ;MAAA;MAAA,KAQI,eAAa;QACT,OAAO,KAAKD,OAAZ;MACH,CAVL;MAAA,KAWI,aAAWE,CAAX,EAAc;QACV,IAAMC,SAAS,GAAG,KAAKH,OAAvB;QACA,KAAKA,OAAL,GAAezC,qBAAqB,CAAC2C,CAAD,CAApC;QACA,KAAKD,iBAAL,GAAyBE,SAAS,KAAK,KAAKH,OAA5C;MACH;MACD;;IAhBJ;MAAA;MAAA,OAiBI,4BAAmB;QACf,IAAMI,gBAAgB,GAAG,KAAKH,iBAA9B;QACA,KAAKA,iBAAL,GAAyB,KAAzB;QACA,OAAOG,gBAAP;MACH;MACD;;IAtBJ;MAAA;MAAA,OAuBI,8BAAqB;QACjB,KAAKH,iBAAL,GAAyB,KAAzB;MACH;IAzBL;;IAAA;EAAA,EAAqBH,IAArB;AA2BH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,IAAMO,SAAS,GAAG,IAAItC,cAAJ,CAAmB,WAAnB,CAAlB;AACA;;AACA,IAAMuC,mBAAmB,GAAG,IAAIvC,cAAJ,CAAmB,qBAAnB,CAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;IACMwC,U,6BACF;AAAY;AAAqBC,QAAjC,EAA2C;EAAA;;EACvC,KAAKA,QAAL,GAAgBA,QAAhB;AACH,C;;AAELD,UAAU,CAACE,IAAX;EAAA,iBAA4GF,UAA5G,EAAkGzC,EAAlG,mBAAwIA,EAAE,CAAC4C,WAA3I;AAAA;;AACAH,UAAU,CAACI,IAAX,kBADkG7C,EAClG;EAAA,MAAgGyC,UAAhG;EAAA;AAAA;;AACA;EAAA,mDAFkGzC,EAElG,mBAAgGyC,UAAhG,EAAwH,CAAC;IAC7GK,IAAI,EAAE5C,SADuG;IAE7G+B,IAAI,EAAE,CAAC;MAAEc,QAAQ,EAAE;IAAZ,CAAD;EAFuG,CAAD,CAAxH,EAG4B,YAAY;IAAE,OAAO,CAAC;MAAED,IAAI,EAAE9C,EAAE,CAAC4C;IAAX,CAAD,CAAP;EAAoC,CAH9E;AAAA;AAIA;AACA;AACA;AACA;;;IACMI,gB,6BACF;AAAY;AAAqBN,QAAjC,EAA2C;EAAA;;EACvC,KAAKA,QAAL,GAAgBA,QAAhB;AACH,C;;AAELM,gBAAgB,CAACL,IAAjB;EAAA,iBAAkHK,gBAAlH,EAfkGhD,EAelG,mBAAoJA,EAAE,CAAC4C,WAAvJ;AAAA;;AACAI,gBAAgB,CAACH,IAAjB,kBAhBkG7C,EAgBlG;EAAA,MAAsGgD,gBAAtG;EAAA;AAAA;;AACA;EAAA,mDAjBkGhD,EAiBlG,mBAAgGgD,gBAAhG,EAA8H,CAAC;IACnHF,IAAI,EAAE5C,SAD6G;IAEnH+B,IAAI,EAAE,CAAC;MAAEc,QAAQ,EAAE;IAAZ,CAAD;EAF6G,CAAD,CAA9H,EAG4B,YAAY;IAAE,OAAO,CAAC;MAAED,IAAI,EAAE9C,EAAE,CAAC4C;IAAX,CAAD,CAAP;EAAoC,CAH9E;AAAA;AAIA;AACA;AACA;AACA;;;IACMK,gB,6BACF;AAAY;AAAqBP,QAAjC,EAA2C;EAAA;;EACvC,KAAKA,QAAL,GAAgBA,QAAhB;AACH,C;;AAELO,gBAAgB,CAACN,IAAjB;EAAA,iBAAkHM,gBAAlH,EA9BkGjD,EA8BlG,mBAAoJA,EAAE,CAAC4C,WAAvJ;AAAA;;AACAK,gBAAgB,CAACJ,IAAjB,kBA/BkG7C,EA+BlG;EAAA,MAAsGiD,gBAAtG;EAAA;AAAA;;AACA;EAAA,mDAhCkGjD,EAgClG,mBAAgGiD,gBAAhG,EAA8H,CAAC;IACnHH,IAAI,EAAE5C,SAD6G;IAEnH+B,IAAI,EAAE,CAAC;MAAEc,QAAQ,EAAE;IAAZ,CAAD;EAF6G,CAAD,CAA9H,EAG4B,YAAY;IAAE,OAAO,CAAC;MAAED,IAAI,EAAE9C,EAAE,CAAC4C;IAAX,CAAD,CAAP;EAAoC,CAH9E;AAAA,K,CAIA;;AACA;;;IACMM,gB;;;;AAEN,IAAMC,iBAAiB,GAAGpB,mBAAmB,CAACmB,gBAAD,CAA7C;AACA;AACA;AACA;AACA;;;IACME,Y;;;;;EACF,sBAAYC,MAAZ,EAAoB;IAAA;;IAAA;;IAChB;IACA,OAAKA,MAAL,GAAcA,MAAd;IACA,OAAKC,UAAL,GAAkB,KAAlB;IAHgB;EAInB;EACD;;;;;SACA,eAAW;MACP,OAAO,KAAKC,KAAZ;IACH,C;SACD,aAASC,IAAT,EAAe;MACX,KAAKC,aAAL,CAAmBD,IAAnB;IACH;IACD;AACJ;AACA;AACA;AACA;;;;SACI,eAAgB;MACZ,OAAO,KAAKF,UAAZ;IACH,C;SACD,aAAclB,CAAd,EAAiB;MACb,IAAMC,SAAS,GAAG,KAAKiB,UAAvB;MACA,KAAKA,UAAL,GAAkB7D,qBAAqB,CAAC2C,CAAD,CAAvC;MACA,KAAKD,iBAAL,GAAyBE,SAAS,KAAK,KAAKiB,UAA5C;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,qCAA4B;MACxB,KAAKI,mBAAL,GAA2B,sBAAe,KAAKC,oBAApB,EAA3B;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,uBAAcC,KAAd,EAAqB;MACjB;MACA;MACA,IAAIA,KAAJ,EAAW;QACP,KAAKL,KAAL,GAAaK,KAAb;QACA,KAAKD,oBAAL,GAA4BC,KAAK,CAACC,OAAN,CAAc,eAAd,EAA+B,GAA/B,CAA5B;;QACA,KAAKC,yBAAL;MACH;IACJ;;;;EAlDsBX,iB;;AAoD3BC,YAAY,CAACT,IAAb;EAAA,iBAA8GS,YAA9G,EAjGkGpD,EAiGlG,mBAA4IuC,SAA5I;AAAA;;AACAa,YAAY,CAACP,IAAb,kBAlGkG7C,EAkGlG;EAAA,MAAkGoD,YAAlG;EAAA;EAAA;IAAA;MAlGkGpD,EAkGlG,0BAA+WyC,UAA/W;MAlGkGzC,EAkGlG,0BAAscgD,gBAAtc;MAlGkGhD,EAkGlG,0BAAmiBiD,gBAAniB;IAAA;;IAAA;MAAA;;MAlGkGjD,EAkGlG,qBAlGkGA,EAkGlG;MAlGkGA,EAkGlG,qBAlGkGA,EAkGlG;MAlGkGA,EAkGlG,qBAlGkGA,EAkGlG;IAAA;EAAA;EAAA;IAAA;IAAA;IAAA;EAAA;EAAA,WAlGkGA,EAkGlG,oBAA6O,CAAC;IAAE+D,OAAO,EAAE,4BAAX;IAAyCC,WAAW,EAAEZ;EAAtD,CAAD,CAA7O,GAlGkGpD,EAkGlG;AAAA;;AACA;EAAA,mDAnGkGA,EAmGlG,mBAAgGoD,YAAhG,EAA0H,CAAC;IAC/GN,IAAI,EAAE5C,SADyG;IAE/G+B,IAAI,EAAE,CAAC;MACCc,QAAQ,EAAE,gBADX;MAECkB,MAAM,EAAE,CAAC,QAAD,CAFT;MAGCC,SAAS,EAAE,CAAC;QAAEH,OAAO,EAAE,4BAAX;QAAyCC,WAAW,EAAEZ;MAAtD,CAAD;IAHZ,CAAD;EAFyG,CAAD,CAA1H,EAO4B,YAAY;IAChC,OAAO,CAAC;MAAEN,IAAI,EAAEqB,SAAR;MAAmBC,UAAU,EAAE,CAAC;QACxBtB,IAAI,EAAE3C,MADkB;QAExB8B,IAAI,EAAE,CAACM,SAAD;MAFkB,CAAD,EAGxB;QACCO,IAAI,EAAE1C;MADP,CAHwB;IAA/B,CAAD,CAAP;EAMH,CAdL,EAcuB;IAAEoD,IAAI,EAAE,CAAC;MAChBV,IAAI,EAAEzC,KADU;MAEhB4B,IAAI,EAAE,CAAC,cAAD;IAFU,CAAD,CAAR;IAGPoC,SAAS,EAAE,CAAC;MACZvB,IAAI,EAAEzC,KADM;MAEZ4B,IAAI,EAAE,CAAC,WAAD;IAFM,CAAD,CAHJ;IAMPqC,IAAI,EAAE,CAAC;MACPxB,IAAI,EAAExC,YADC;MAEP2B,IAAI,EAAE,CAACQ,UAAD;IAFC,CAAD,CANC;IASP8B,UAAU,EAAE,CAAC;MACbzB,IAAI,EAAExC,YADO;MAEb2B,IAAI,EAAE,CAACe,gBAAD;IAFO,CAAD,CATL;IAYPwB,UAAU,EAAE,CAAC;MACb1B,IAAI,EAAExC,YADO;MAEb2B,IAAI,EAAE,CAACgB,gBAAD;IAFO,CAAD;EAZL,CAdvB;AAAA;AA8BA;;;IACMwB,W,6BACF,qBAAYC,SAAZ,EAAuBC,UAAvB,EAAmC;EAAA;;EAAA;;EAC/B,yBAAAA,UAAU,CAACC,aAAX,CAAyBC,SAAzB,EAAmCC,GAAnC,iDAA0CJ,SAAS,CAAChB,mBAApD;AACH,C;AAEL;;;IACMqB,a;;;;;EACF,uBAAYL,SAAZ,EAAuBC,UAAvB,EAAmC;IAAA;;IAAA,0BACzBD,SADyB,EACdC,UADc;EAElC;;;EAHuBF,W;;AAK5BM,aAAa,CAACpC,IAAd;EAAA,iBAA+GoC,aAA/G,EA7IkG/E,EA6IlG,mBAA8IoD,YAA9I,GA7IkGpD,EA6IlG,mBAAuKA,EAAE,CAACgF,UAA1K;AAAA;;AACAD,aAAa,CAAClC,IAAd,kBA9IkG7C,EA8IlG;EAAA,MAAmG+E,aAAnG;EAAA;EAAA,oBAAkM,cAAlM;EAAA,WA9IkG/E,EA8IlG;AAAA;;AACA;EAAA,mDA/IkGA,EA+IlG,mBAAgG+E,aAAhG,EAA2H,CAAC;IAChHjC,IAAI,EAAE5C,SAD0G;IAEhH+B,IAAI,EAAE,CAAC;MACCc,QAAQ,EAAE,sCADX;MAECkC,IAAI,EAAE;QACF,SAAS,iBADP;QAEF,QAAQ;MAFN;IAFP,CAAD;EAF0G,CAAD,CAA3H,EAS4B,YAAY;IAAE,OAAO,CAAC;MAAEnC,IAAI,EAAEM;IAAR,CAAD,EAAyB;MAAEN,IAAI,EAAE9C,EAAE,CAACgF;IAAX,CAAzB,CAAP;EAA2D,CATrG;AAAA;AAUA;;;IACME,a;;;;;EACF,uBAAYR,SAAZ,EAAuBC,UAAvB,EAAmC;IAAA;;IAAA;;IAC/B,IAAIQ,EAAJ;;IACA,4BAAMT,SAAN,EAAiBC,UAAjB;;IACA,IAAI,CAAC,CAACQ,EAAE,GAAGT,SAAS,CAACrB,MAAhB,MAA4B,IAA5B,IAAoC8B,EAAE,KAAK,KAAK,CAAhD,GAAoD,KAAK,CAAzD,GAA6DA,EAAE,CAACC,WAAH,CAAeR,aAAf,CAA6BS,QAA3F,MAAyG,CAA7G,EAAgH;MAC5G,IAAMC,SAAS,GAAGZ,SAAS,CAACrB,MAAV,CAAiB+B,WAAjB,CAA6BR,aAA7B,CAA2CW,YAA3C,CAAwD,MAAxD,CAAlB;;MACA,IAAMC,IAAI,GAAGF,SAAS,KAAK,MAAd,IAAwBA,SAAS,KAAK,UAAtC,GAAmD,UAAnD,GAAgE,MAA7E;MACAX,UAAU,CAACC,aAAX,CAAyBa,YAAzB,CAAsC,MAAtC,EAA8CD,IAA9C;IACH;;IAP8B;EAQlC;;;EATuBf,W;;AAW5BS,aAAa,CAACvC,IAAd;EAAA,iBAA+GuC,aAA/G,EArKkGlF,EAqKlG,mBAA8IoD,YAA9I,GArKkGpD,EAqKlG,mBAAuKA,EAAE,CAACgF,UAA1K;AAAA;;AACAE,aAAa,CAACrC,IAAd,kBAtKkG7C,EAsKlG;EAAA,MAAmGkF,aAAnG;EAAA;EAAA;EAAA,WAtKkGlF,EAsKlG;AAAA;;AACA;EAAA,mDAvKkGA,EAuKlG,mBAAgGkF,aAAhG,EAA2H,CAAC;IAChHpC,IAAI,EAAE5C,SAD0G;IAEhH+B,IAAI,EAAE,CAAC;MACCc,QAAQ,EAAE,sCADX;MAECkC,IAAI,EAAE;QACF,SAAS;MADP;IAFP,CAAD;EAF0G,CAAD,CAA3H,EAQ4B,YAAY;IAAE,OAAO,CAAC;MAAEnC,IAAI,EAAEM;IAAR,CAAD,EAAyB;MAAEN,IAAI,EAAE9C,EAAE,CAACgF;IAAX,CAAzB,CAAP;EAA2D,CARrG;AAAA;AASA;;;IACMU,O;;;;;EACF,iBAAYhB,SAAZ,EAAuBC,UAAvB,EAAmC;IAAA;;IAAA;;IAC/B,IAAIQ,EAAJ;;IACA,4BAAMT,SAAN,EAAiBC,UAAjB;;IACA,IAAI,CAAC,CAACQ,EAAE,GAAGT,SAAS,CAACrB,MAAhB,MAA4B,IAA5B,IAAoC8B,EAAE,KAAK,KAAK,CAAhD,GAAoD,KAAK,CAAzD,GAA6DA,EAAE,CAACC,WAAH,CAAeR,aAAf,CAA6BS,QAA3F,MAAyG,CAA7G,EAAgH;MAC5G,IAAMC,SAAS,GAAGZ,SAAS,CAACrB,MAAV,CAAiB+B,WAAjB,CAA6BR,aAA7B,CAA2CW,YAA3C,CAAwD,MAAxD,CAAlB;;MACA,IAAMC,IAAI,GAAGF,SAAS,KAAK,MAAd,IAAwBA,SAAS,KAAK,UAAtC,GAAmD,UAAnD,GAAgE,MAA7E;MACAX,UAAU,CAACC,aAAX,CAAyBa,YAAzB,CAAsC,MAAtC,EAA8CD,IAA9C;IACH;;IAP8B;EAQlC;;;EATiBf,W;;AAWtBiB,OAAO,CAAC/C,IAAR;EAAA,iBAAyG+C,OAAzG,EA5LkG1F,EA4LlG,mBAAkIoD,YAAlI,GA5LkGpD,EA4LlG,mBAA2JA,EAAE,CAACgF,UAA9J;AAAA;;AACAU,OAAO,CAAC7C,IAAR,kBA7LkG7C,EA6LlG;EAAA,MAA6F0F,OAA7F;EAAA;EAAA;EAAA,WA7LkG1F,EA6LlG;AAAA;;AACA;EAAA,mDA9LkGA,EA8LlG,mBAAgG0F,OAAhG,EAAqH,CAAC;IAC1G5C,IAAI,EAAE5C,SADoG;IAE1G+B,IAAI,EAAE,CAAC;MACCc,QAAQ,EAAE,wBADX;MAECkC,IAAI,EAAE;QACF,SAAS;MADP;IAFP,CAAD;EAFoG,CAAD,CAArH,EAQ4B,YAAY;IAAE,OAAO,CAAC;MAAEnC,IAAI,EAAEM;IAAR,CAAD,EAAyB;MAAEN,IAAI,EAAE9C,EAAE,CAACgF;IAAX,CAAzB,CAAP;EAA2D,CARrG;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;;IACMW,S,6BACF,qBAAc;EAAA;;EACV,KAAKC,KAAL,GAAa,EAAb;EACA,KAAKC,QAAL,GAAgB,EAAhB;AACH,C;AAEL;;;AACA,IAAMC,0BAA0B,GAAG,IAAI7F,cAAJ,CAAmB,4BAAnB,CAAnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACM8F,wB;EACF,kCAAYC,OAAZ,EAAqB;IAAA;;IACjB,KAAKA,OAAL,GAAeA,OAAf;IACA,KAAKC,gBAAL,GAAwB,IAAxB;IACA,KAAKC,UAAL,GAAkB,IAAI9E,OAAJ,EAAlB;EACH;EACD;AACJ;AACA;;;;;WACI,kBAAS+E,IAAT,EAAe;MACX,KAAKC,uBAAL;;MACA,KAAKH,gBAAL,CAAsBL,KAAtB,CAA4BS,IAA5B,CAAiCF,IAAjC;IACH;IACD;AACJ;AACA;AACA;;;;WACI,qBAAYA,IAAZ,EAAkB;MACd,KAAKC,uBAAL;;MACA,KAAKH,gBAAL,CAAsBJ,QAAtB,CAA+BQ,IAA/B,CAAoCF,IAApC;IACH;IACD;;;;WACA,uBAAc;MACV,KAAKD,UAAL,CAAgBI,IAAhB;;MACA,KAAKJ,UAAL,CAAgBK,QAAhB;IACH;;;WACD,mCAA0B;MAAA;;MACtB,IAAI,KAAKN,gBAAT,EAA2B;QACvB;MACH;;MACD,KAAKA,gBAAL,GAAwB,IAAIN,SAAJ,EAAxB;;MACA,KAAKa,sBAAL,GACKC,IADL,CACUhF,SAAS,CAAC,KAAKyE,UAAN,CADnB,EAEKQ,SAFL,CAEe,YAAM;QACjB,OAAO,MAAI,CAACT,gBAAL,CAAsBL,KAAtB,CAA4Be,MAA5B,IAAsC,MAAI,CAACV,gBAAL,CAAsBJ,QAAtB,CAA+Bc,MAA5E,EAAoF;UAChF,IAAMC,QAAQ,GAAG,MAAI,CAACX,gBAAtB,CADgF,CAEhF;;UACA,MAAI,CAACA,gBAAL,GAAwB,IAAIN,SAAJ,EAAxB;;UAHgF,2CAI7DiB,QAAQ,CAAChB,KAJoD;UAAA;;UAAA;YAIhF,oDAAmC;cAAA,IAAxBO,IAAwB;cAC/BA,IAAI;YACP;UAN+E;YAAA;UAAA;YAAA;UAAA;;UAAA,4CAO7DS,QAAQ,CAACf,QAPoD;UAAA;;UAAA;YAOhF,uDAAsC;cAAA,IAA3BM,KAA2B;;cAClCA,KAAI;YACP;UAT+E;YAAA;UAAA;YAAA;UAAA;QAUnF;;QACD,MAAI,CAACF,gBAAL,GAAwB,IAAxB;MACH,CAfD;IAgBH;;;WACD,kCAAyB;MACrB;MACA;MACA,OAAO,KAAKD,OAAL,CAAaa,QAAb,GACDxF,IAAI,CAACyF,OAAO,CAACC,OAAR,CAAgB5C,SAAhB,CAAD,CADH,GAED,KAAK6B,OAAL,CAAagB,QAAb,CAAsBP,IAAtB,CAA2B/E,IAAI,CAAC,CAAD,CAA/B,CAFN;IAGH;;;;;;AAELqE,wBAAwB,CAACpD,IAAzB;EAAA,iBAA0HoD,wBAA1H,EAzRkG/F,EAyRlG,UAAoKA,EAAE,CAACa,MAAvK;AAAA;;AACAkF,wBAAwB,CAACkB,KAAzB,kBA1RkGjH,EA0RlG;EAAA,OAA8H+F,wBAA9H;EAAA,SAA8HA,wBAA9H;AAAA;;AACA;EAAA,mDA3RkG/F,EA2RlG,mBAAgG+F,wBAAhG,EAAsI,CAAC;IAC3HjD,IAAI,EAAEvC;EADqH,CAAD,CAAtI,EAE4B,YAAY;IAAE,OAAO,CAAC;MAAEuC,IAAI,EAAE9C,EAAE,CAACa;IAAX,CAAD,CAAP;EAA+B,CAFzE;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,IAAMqG,gBAAgB,gDAAtB;AACA;AACA;AACA;AACA;;IACMC,U;EACF;EACA;EAAqBzE,QADrB,EAC+B0E,QAD/B,EACyC;IAAA;;IACrC,KAAK1E,QAAL,GAAgBA,QAAhB;IACA,KAAK0E,QAAL,GAAgBA,QAAhB;EACH;;;;WACD,qBAAYC,OAAZ,EAAqB;MACjB;MACA;MACA,IAAI,CAAC,KAAKC,cAAV,EAA0B;QACtB,IAAMC,OAAO,GAAIF,OAAO,CAAC,SAAD,CAAP,IAAsBA,OAAO,CAAC,SAAD,CAAP,CAAmBG,YAA1C,IAA2D,EAA3E;QACA,KAAKF,cAAL,GAAsB,KAAKF,QAAL,CAAcK,IAAd,CAAmBF,OAAnB,EAA4BG,MAA5B,EAAtB;;QACA,KAAKJ,cAAL,CAAoBK,IAApB,CAAyBJ,OAAzB;MACH;IACJ;IACD;AACJ;AACA;AACA;;;;WACI,0BAAiB;MACb,OAAO,KAAKD,cAAL,CAAoBK,IAApB,CAAyB,KAAKJ,OAA9B,CAAP;IACH;IACD;;;;WACA,6BAAoBK,MAApB,EAA4B;MACxB,IAAI,gBAAgBC,eAApB,EAAqC;QACjC,OAAOD,MAAM,CAACrD,UAAP,CAAkB7B,QAAzB;MACH;;MACD,IAAI,gBAAgBoF,eAApB,EAAqC;QACjC,OAAOF,MAAM,CAACpD,UAAP,CAAkB9B,QAAzB;MACH,CAFD,MAGK;QACD,OAAOkF,MAAM,CAACtD,IAAP,CAAY5B,QAAnB;MACH;IACJ;;;;;;AAELyE,UAAU,CAACxE,IAAX;EAAA,iBAA4GwE,UAA5G,EAlVkGnH,EAkVlG,mBAAwIA,EAAE,CAAC4C,WAA3I,GAlVkG5C,EAkVlG,mBAAmKA,EAAE,CAAC+H,eAAtK;AAAA;;AACAZ,UAAU,CAACtE,IAAX,kBAnVkG7C,EAmVlG;EAAA,MAAgGmH,UAAhG;EAAA,WAnVkGnH,EAmVlG;AAAA;;AACA;EAAA,mDApVkGA,EAoVlG,mBAAgGmH,UAAhG,EAAwH,CAAC;IAC7GrE,IAAI,EAAE5C;EADuG,CAAD,CAAxH,EAE4B,YAAY;IAAE,OAAO,CAAC;MAAE4C,IAAI,EAAE9C,EAAE,CAAC4C;IAAX,CAAD,EAA2B;MAAEE,IAAI,EAAE9C,EAAE,CAAC+H;IAAX,CAA3B,CAAP;EAAkE,CAF5G;AAAA,K,CAGA;;AACA;;;IACMC,mB;;;;;;;;;;;;EAA4Bb,U;;AAElC,IAAMc,oBAAoB,GAAGlG,mBAAmB,CAACiG,mBAAD,CAAhD;AACA;AACA;AACA;AACA;;;IACMH,e;;;;;EACF,yBAAYnF,QAAZ,EAAsB0E,QAAtB,EAAgC/D,MAAhC,EAAwC;IAAA;;IAAA;;IACpC,4BAAMX,QAAN,EAAgB0E,QAAhB;IACA,OAAK/D,MAAL,GAAcA,MAAd;IAFoC;EAGvC,C,CACD;EACA;;;;;WACA,qBAAYgE,OAAZ,EAAqB;MACjB,iFAAkBA,OAAlB;IACH;;;;EATyBY,oB;;AAW9BJ,eAAe,CAAClF,IAAhB;EAAA,iBAAiHkF,eAAjH,EA3WkG7H,EA2WlG,mBAAkJA,EAAE,CAAC4C,WAArJ,GA3WkG5C,EA2WlG,mBAA6KA,EAAE,CAAC+H,eAAhL,GA3WkG/H,EA2WlG,mBAA4MuC,SAA5M;AAAA;;AACAsF,eAAe,CAAChF,IAAhB,kBA5WkG7C,EA4WlG;EAAA,MAAqG6H,eAArG;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA,WA5WkG7H,EA4WlG,6BA5WkGA,EA4WlG;AAAA;;AACA;EAAA,mDA7WkGA,EA6WlG,mBAAgG6H,eAAhG,EAA6H,CAAC;IAClH/E,IAAI,EAAE5C,SAD4G;IAElH+B,IAAI,EAAE,CAAC;MACCc,QAAQ,EAAE,mBADX;MAECkB,MAAM,EAAE,CAAC,0BAAD,EAA6B,+BAA7B;IAFT,CAAD;EAF4G,CAAD,CAA7H,EAM4B,YAAY;IAChC,OAAO,CAAC;MAAEnB,IAAI,EAAE9C,EAAE,CAAC4C;IAAX,CAAD,EAA2B;MAAEE,IAAI,EAAE9C,EAAE,CAAC+H;IAAX,CAA3B,EAAyD;MAAEjF,IAAI,EAAEqB,SAAR;MAAmBC,UAAU,EAAE,CAAC;QAChFtB,IAAI,EAAE3C,MAD0E;QAEhF8B,IAAI,EAAE,CAACM,SAAD;MAF0E,CAAD,EAGhF;QACCO,IAAI,EAAE1C;MADP,CAHgF;IAA/B,CAAzD,CAAP;EAMH,CAbL;AAAA,K,CAcA;;AACA;;;IACM8H,mB;;;;;;;;;;;;EAA4Bf,U;;AAElC,IAAMgB,oBAAoB,GAAGpG,mBAAmB,CAACmG,mBAAD,CAAhD;AACA;AACA;AACA;AACA;;;IACMJ,e;;;;;EACF,yBAAYpF,QAAZ,EAAsB0E,QAAtB,EAAgC/D,MAAhC,EAAwC;IAAA;;IAAA;;IACpC,4BAAMX,QAAN,EAAgB0E,QAAhB;IACA,OAAK/D,MAAL,GAAcA,MAAd;IAFoC;EAGvC,C,CACD;EACA;;;;;WACA,qBAAYgE,OAAZ,EAAqB;MACjB,iFAAkBA,OAAlB;IACH;;;;EATyBc,oB;;AAW9BL,eAAe,CAACnF,IAAhB;EAAA,iBAAiHmF,eAAjH,EA/YkG9H,EA+YlG,mBAAkJA,EAAE,CAAC4C,WAArJ,GA/YkG5C,EA+YlG,mBAA6KA,EAAE,CAAC+H,eAAhL,GA/YkG/H,EA+YlG,mBAA4MuC,SAA5M;AAAA;;AACAuF,eAAe,CAACjF,IAAhB,kBAhZkG7C,EAgZlG;EAAA,MAAqG8H,eAArG;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA,WAhZkG9H,EAgZlG,6BAhZkGA,EAgZlG;AAAA;;AACA;EAAA,mDAjZkGA,EAiZlG,mBAAgG8H,eAAhG,EAA6H,CAAC;IAClHhF,IAAI,EAAE5C,SAD4G;IAElH+B,IAAI,EAAE,CAAC;MACCc,QAAQ,EAAE,mBADX;MAECkB,MAAM,EAAE,CAAC,0BAAD,EAA6B,+BAA7B;IAFT,CAAD;EAF4G,CAAD,CAA7H,EAM4B,YAAY;IAChC,OAAO,CAAC;MAAEnB,IAAI,EAAE9C,EAAE,CAAC4C;IAAX,CAAD,EAA2B;MAAEE,IAAI,EAAE9C,EAAE,CAAC+H;IAAX,CAA3B,EAAyD;MAAEjF,IAAI,EAAEqB,SAAR;MAAmBC,UAAU,EAAE,CAAC;QAChFtB,IAAI,EAAE3C,MAD0E;QAEhF8B,IAAI,EAAE,CAACM,SAAD;MAF0E,CAAD,EAGhF;QACCO,IAAI,EAAE1C;MADP,CAHgF;IAA/B,CAAzD,CAAP;EAMH,CAbL;AAAA;AAcA;AACA;AACA;AACA;AACA;;;IACMgI,S;;;;;EACF;EACA;EACA,mBAAY1F,QAAZ,EAAsB0E,QAAtB,EAAgC/D,MAAhC,EAAwC;IAAA;;IAAA;;IACpC,6BAAMX,QAAN,EAAgB0E,QAAhB;IACA,OAAK/D,MAAL,GAAcA,MAAd;IAFoC;EAGvC;;;EANmB8D,U;;AAQxBiB,SAAS,CAACzF,IAAV;EAAA,iBAA2GyF,SAA3G,EA5akGpI,EA4alG,mBAAsIA,EAAE,CAAC4C,WAAzI,GA5akG5C,EA4alG,mBAAiKA,EAAE,CAAC+H,eAApK,GA5akG/H,EA4alG,mBAAgMuC,SAAhM;AAAA;;AACA6F,SAAS,CAACvF,IAAV,kBA7akG7C,EA6alG;EAAA,MAA+FoI,SAA/F;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA,WA7akGpI,EA6alG;AAAA;;AACA;EAAA,mDA9akGA,EA8alG,mBAAgGoI,SAAhG,EAAuH,CAAC;IAC5GtF,IAAI,EAAE5C,SADsG;IAE5G+B,IAAI,EAAE,CAAC;MACCc,QAAQ,EAAE,aADX;MAECkB,MAAM,EAAE,CAAC,2BAAD,EAA8B,qBAA9B;IAFT,CAAD;EAFsG,CAAD,CAAvH,EAM4B,YAAY;IAChC,OAAO,CAAC;MAAEnB,IAAI,EAAE9C,EAAE,CAAC4C;IAAX,CAAD,EAA2B;MAAEE,IAAI,EAAE9C,EAAE,CAAC+H;IAAX,CAA3B,EAAyD;MAAEjF,IAAI,EAAEqB,SAAR;MAAmBC,UAAU,EAAE,CAAC;QAChFtB,IAAI,EAAE3C,MAD0E;QAEhF8B,IAAI,EAAE,CAACM,SAAD;MAF0E,CAAD,EAGhF;QACCO,IAAI,EAAE1C;MADP,CAHgF;IAA/B,CAAzD,CAAP;EAMH,CAbL;AAAA;AAcA;AACA;AACA;AACA;;;IACMiI,a;EACF,uBAAYC,cAAZ,EAA4B;IAAA;;IACxB,KAAKA,cAAL,GAAsBA,cAAtB;IACAD,aAAa,CAACE,oBAAd,GAAqC,IAArC;EACH;;;;WACD,uBAAc;MACV;MACA;MACA,IAAIF,aAAa,CAACE,oBAAd,KAAuC,IAA3C,EAAiD;QAC7CF,aAAa,CAACE,oBAAd,GAAqC,IAArC;MACH;IACJ;;;;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,aAAa,CAACE,oBAAd,GAAqC,IAArC;;AACAF,aAAa,CAAC1F,IAAd;EAAA,iBAA+G0F,aAA/G,EArdkGrI,EAqdlG,mBAA8IA,EAAE,CAACwI,gBAAjJ;AAAA;;AACAH,aAAa,CAACxF,IAAd,kBAtdkG7C,EAsdlG;EAAA,MAAmGqI,aAAnG;EAAA;AAAA;;AACA;EAAA,mDAvdkGrI,EAudlG,mBAAgGqI,aAAhG,EAA2H,CAAC;IAChHvF,IAAI,EAAE5C,SAD0G;IAEhH+B,IAAI,EAAE,CAAC;MAAEc,QAAQ,EAAE;IAAZ,CAAD;EAF0G,CAAD,CAA3H,EAG4B,YAAY;IAAE,OAAO,CAAC;MAAED,IAAI,EAAE9C,EAAE,CAACwI;IAAX,CAAD,CAAP;EAAyC,CAHnF;AAAA;AAIA;;;IACMC,Y;;;;AAENA,YAAY,CAAC9F,IAAb;EAAA,iBAA8G8F,YAA9G;AAAA;;AACAA,YAAY,CAACC,IAAb,kBA/dkG1I,EA+dlG;EAAA,MAAkGyI,YAAlG;EAAA;EAAA,oBAA8L,KAA9L;EAAA;EAAA;EAAA;EAAA;IAAA;MA/dkGzI,EA+dkK,yBAApQ;IAAA;EAAA;EAAA,eAA4WqI,aAA5W;EAAA;AAAA;;AACA;EAAA,mDAhekGrI,EAgelG,mBAAgGyI,YAAhG,EAA0H,CAAC;IAC/G3F,IAAI,EAAEtC,SADyG;IAE/GyB,IAAI,EAAE,CAAC;MACCc,QAAQ,EAAE,oCADX;MAECL,QAAQ,EAAEwE,gBAFX;MAGCjC,IAAI,EAAE;QACF,SAAS,gBADP;QAEF,QAAQ;MAFN,CAHP;MAOC;MACA;MACA0D,eAAe,EAAElI,uBAAuB,CAACmI,OAT1C;MAUCC,aAAa,EAAEnI,iBAAiB,CAACoI;IAVlC,CAAD;EAFyG,CAAD,CAA1H;AAAA;AAeA;;;IACMC,Y;;;;AAENA,YAAY,CAACpG,IAAb;EAAA,iBAA8GoG,YAA9G;AAAA;;AACAA,YAAY,CAACL,IAAb,kBAnfkG1I,EAmflG;EAAA,MAAkG+I,YAAlG;EAAA;EAAA,oBAA8L,KAA9L;EAAA;EAAA;EAAA;EAAA;IAAA;MAnfkG/I,EAmfkK,yBAApQ;IAAA;EAAA;EAAA,eAA4WqI,aAA5W;EAAA;AAAA;;AACA;EAAA,mDApfkGrI,EAoflG,mBAAgG+I,YAAhG,EAA0H,CAAC;IAC/GjG,IAAI,EAAEtC,SADyG;IAE/GyB,IAAI,EAAE,CAAC;MACCc,QAAQ,EAAE,oCADX;MAECL,QAAQ,EAAEwE,gBAFX;MAGCjC,IAAI,EAAE;QACF,SAAS,gBADP;QAEF,QAAQ;MAFN,CAHP;MAOC;MACA;MACA0D,eAAe,EAAElI,uBAAuB,CAACmI,OAT1C;MAUCC,aAAa,EAAEnI,iBAAiB,CAACoI;IAVlC,CAAD;EAFyG,CAAD,CAA1H;AAAA;AAeA;;;IACME,M;;;;AAENA,MAAM,CAACrG,IAAP;EAAA,iBAAwGqG,MAAxG;AAAA;;AACAA,MAAM,CAACN,IAAP,kBAvgBkG1I,EAugBlG;EAAA,MAA4FgJ,MAA5F;EAAA;EAAA,oBAAoK,KAApK;EAAA;EAAA;EAAA;EAAA;IAAA;MAvgBkGhJ,EAugBiI,yBAAnO;IAAA;EAAA;EAAA,eAA2UqI,aAA3U;EAAA;AAAA;;AACA;EAAA,mDAxgBkGrI,EAwgBlG,mBAAgGgJ,MAAhG,EAAoH,CAAC;IACzGlG,IAAI,EAAEtC,SADmG;IAEzGyB,IAAI,EAAE,CAAC;MACCc,QAAQ,EAAE,sBADX;MAECL,QAAQ,EAAEwE,gBAFX;MAGCjC,IAAI,EAAE;QACF,SAAS,SADP;QAEF,QAAQ;MAFN,CAHP;MAOC;MACA;MACA0D,eAAe,EAAElI,uBAAuB,CAACmI,OAT1C;MAUCC,aAAa,EAAEnI,iBAAiB,CAACoI;IAVlC,CAAD;EAFmG,CAAD,CAApH;AAAA;AAeA;;;IACMG,Y,6BACF,sBAAYC,WAAZ,EAAyB;EAAA;;EACrB,KAAKA,WAAL,GAAmBA,WAAnB;EACA,KAAKC,iBAAL,GAAyB,iBAAzB;AACH,C;;AAELF,YAAY,CAACtG,IAAb;EAAA,iBAA8GsG,YAA9G,EA9hBkGjJ,EA8hBlG,mBAA4IA,EAAE,CAAC4C,WAA/I;AAAA;;AACAqG,YAAY,CAACpG,IAAb,kBA/hBkG7C,EA+hBlG;EAAA,MAAkGiJ,YAAlG;EAAA;AAAA;;AACA;EAAA,mDAhiBkGjJ,EAgiBlG,mBAAgGiJ,YAAhG,EAA0H,CAAC;IAC/GnG,IAAI,EAAE5C,SADyG;IAE/G+B,IAAI,EAAE,CAAC;MACCc,QAAQ,EAAE;IADX,CAAD;EAFyG,CAAD,CAA1H,EAK4B,YAAY;IAAE,OAAO,CAAC;MAAED,IAAI,EAAE9C,EAAE,CAAC4C;IAAX,CAAD,CAAP;EAAoC,CAL9E;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,IAAMwG,iBAAiB,GAAG,CAAC,KAAD,EAAQ,QAAR,EAAkB,MAAlB,EAA0B,OAA1B,CAA1B;AACA;AACA;AACA;AACA;;IACMC,Y;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,sBAAYC,kBAAZ,EAAgCC,aAAhC,EAA+CC,SAA/C,EAA0DC,wBAA1D,EAAgK;IAAA,IAA5EC,UAA4E,uEAA/D,IAA+D;;IAAA,IAAzDC,6BAAyD,uEAAzB,IAAyB;;IAAA,IAAnBC,iBAAmB;;IAAA;;IAC5J,KAAKN,kBAAL,GAA0BA,kBAA1B;IACA,KAAKC,aAAL,GAAqBA,aAArB;IACA,KAAKC,SAAL,GAAiBA,SAAjB;IACA,KAAKC,wBAAL,GAAgCA,wBAAhC;IACA,KAAKC,UAAL,GAAkBA,UAAlB;IACA,KAAKC,6BAAL,GAAqCA,6BAArC;IACA,KAAKC,iBAAL,GAAyBA,iBAAzB;IACA,KAAKC,iBAAL,GAAyB,EAAzB;IACA,KAAKC,cAAL,GAAsB;MAClB,iBAAUP,aAAV,qBADkB;MAElB,oBAAaA,aAAb,wBAFkB;MAGlB,kBAAWA,aAAX,sBAHkB;MAIlB,mBAAYA,aAAZ;IAJkB,CAAtB;EAMH;EACD;AACJ;AACA;AACA;AACA;AACA;;;;;WACI,gCAAuBQ,IAAvB,EAA6BC,gBAA7B,EAA+C;MAAA;;MAC3C,IAAMC,eAAe,GAAG,EAAxB;;MAD2C,4CAEzBF,IAFyB;MAAA;;MAAA;QAE3C,uDAAwB;UAAA,IAAbG,GAAa;;UACpB;UACA;UACA,IAAIA,GAAG,CAAC7E,QAAJ,KAAiB6E,GAAG,CAACC,YAAzB,EAAuC;YACnC;UACH;;UACDF,eAAe,CAAC5D,IAAhB,CAAqB6D,GAArB;;UACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,QAAJ,CAAa1D,MAAjC,EAAyCyD,CAAC,EAA1C,EAA8C;YAC1CH,eAAe,CAAC5D,IAAhB,CAAqB6D,GAAG,CAACG,QAAJ,CAAaD,CAAb,CAArB;UACH;QACJ,CAZ0C,CAa3C;;MAb2C;QAAA;MAAA;QAAA;MAAA;;MAc3C,KAAKX,wBAAL,CAA8B7C,QAA9B,CAAuC,YAAM;QAAA,4CACnBqD,eADmB;QAAA;;QAAA;UACzC,uDAAuC;YAAA,IAA5BK,OAA4B;;YACnC,MAAI,CAACC,kBAAL,CAAwBD,OAAxB,EAAiCN,gBAAjC;UACH;QAHwC;UAAA;QAAA;UAAA;QAAA;MAI5C,CAJD;IAKH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,6BAAoBD,IAApB,EAA0BS,iBAA1B,EAA6CC,eAA7C,EAA4F;MAAA;;MAAA,IAA9BC,qBAA8B,uEAAN,IAAM;;MACxF,IAAI,CAACX,IAAI,CAACpD,MAAN,IACA,CAAC,KAAK+C,UADN,IAEA,EAAEc,iBAAiB,CAACG,IAAlB,CAAuB,UAAAC,KAAK;QAAA,OAAIA,KAAJ;MAAA,CAA5B,KAA0CH,eAAe,CAACE,IAAhB,CAAqB,UAAAC,KAAK;QAAA,OAAIA,KAAJ;MAAA,CAA1B,CAA5C,CAFJ,EAEuF;QACnF,IAAI,KAAKhB,iBAAT,EAA4B;UACxB,KAAKA,iBAAL,CAAuBiB,oBAAvB,CAA4C;YAAEC,KAAK,EAAE;UAAT,CAA5C;;UACA,KAAKlB,iBAAL,CAAuBmB,uBAAvB,CAA+C;YAAED,KAAK,EAAE;UAAT,CAA/C;QACH;;QACD;MACH;;MACD,IAAME,QAAQ,GAAGjB,IAAI,CAAC,CAAD,CAArB;MACA,IAAMkB,QAAQ,GAAGD,QAAQ,CAACX,QAAT,CAAkB1D,MAAnC;;MACA,IAAMuE,UAAU,GAAG,KAAKC,cAAL,CAAoBH,QAApB,EAA8BN,qBAA9B,CAAnB;;MACA,IAAMU,cAAc,GAAG,KAAKC,8BAAL,CAAoCH,UAApC,EAAgDV,iBAAhD,CAAvB;;MACA,IAAMc,YAAY,GAAG,KAAKC,4BAAL,CAAkCL,UAAlC,EAA8CT,eAA9C,CAArB;;MACA,IAAMe,eAAe,GAAGhB,iBAAiB,CAACiB,WAAlB,CAA8B,IAA9B,CAAxB;MACA,IAAMC,cAAc,GAAGjB,eAAe,CAACkB,OAAhB,CAAwB,IAAxB,CAAvB,CAhBwF,CAiBxF;;MACA,KAAKlC,wBAAL,CAA8B7C,QAA9B,CAAuC,YAAM;QACzC,IAAMgF,KAAK,GAAG,OAAI,CAACpC,SAAL,KAAmB,KAAjC;QACA,IAAMqC,KAAK,GAAGD,KAAK,GAAG,OAAH,GAAa,MAAhC;QACA,IAAME,GAAG,GAAGF,KAAK,GAAG,MAAH,GAAY,OAA7B;;QAHyC,4CAIvB7B,IAJuB;QAAA;;QAAA;UAIzC,uDAAwB;YAAA,IAAbG,GAAa;;YACpB,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGa,QAApB,EAA8Bb,CAAC,EAA/B,EAAmC;cAC/B,IAAM9F,IAAI,GAAG4F,GAAG,CAACG,QAAJ,CAAaD,CAAb,CAAb;;cACA,IAAII,iBAAiB,CAACJ,CAAD,CAArB,EAA0B;gBACtB,OAAI,CAAC2B,eAAL,CAAqBzH,IAArB,EAA2BuH,KAA3B,EAAkCT,cAAc,CAAChB,CAAD,CAAhD,EAAqDA,CAAC,KAAKoB,eAA3D;cACH;;cACD,IAAIf,eAAe,CAACL,CAAD,CAAnB,EAAwB;gBACpB,OAAI,CAAC2B,eAAL,CAAqBzH,IAArB,EAA2BwH,GAA3B,EAAgCR,YAAY,CAAClB,CAAD,CAA5C,EAAiDA,CAAC,KAAKsB,cAAvD;cACH;YACJ;UACJ;QAdwC;UAAA;QAAA;UAAA;QAAA;;QAezC,IAAI,OAAI,CAAC9B,iBAAT,EAA4B;UACxB,OAAI,CAACA,iBAAL,CAAuBiB,oBAAvB,CAA4C;YACxCC,KAAK,EAAEU,eAAe,KAAK,CAAC,CAArB,GACD,EADC,GAEDN,UAAU,CACPc,KADH,CACS,CADT,EACYR,eAAe,GAAG,CAD9B,EAEGS,GAFH,CAEO,UAACC,KAAD,EAAQC,KAAR;cAAA,OAAmB3B,iBAAiB,CAAC2B,KAAD,CAAjB,GAA2BD,KAA3B,GAAmC,IAAtD;YAAA,CAFP;UAHkC,CAA5C;;UAOA,OAAI,CAACtC,iBAAL,CAAuBmB,uBAAvB,CAA+C;YAC3CD,KAAK,EAAEY,cAAc,KAAK,CAAC,CAApB,GACD,EADC,GAEDR,UAAU,CACPc,KADH,CACSN,cADT,EAEGO,GAFH,CAEO,UAACC,KAAD,EAAQC,KAAR;cAAA,OAAmB1B,eAAe,CAAC0B,KAAK,GAAGT,cAAT,CAAf,GAA0CQ,KAA1C,GAAkD,IAArE;YAAA,CAFP,EAGGE,OAHH;UAHqC,CAA/C;QAQH;MACJ,CAhCD;IAiCH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,mBAAUC,WAAV,EAAuBC,YAAvB,EAAqCC,QAArC,EAA+C;MAAA;;MAC3C;MACA,IAAI,CAAC,KAAK7C,UAAV,EAAsB;QAClB;MACH,CAJ0C,CAK3C;MACA;MACA;;;MACA,IAAMK,IAAI,GAAGwC,QAAQ,KAAK,QAAb,GAAwBF,WAAW,CAACL,KAAZ,GAAoBI,OAApB,EAAxB,GAAwDC,WAArE;MACA,IAAMG,MAAM,GAAGD,QAAQ,KAAK,QAAb,GAAwBD,YAAY,CAACN,KAAb,GAAqBI,OAArB,EAAxB,GAAyDE,YAAxE,CAT2C,CAU3C;;MACA,IAAMG,aAAa,GAAG,EAAtB;MACA,IAAMC,iBAAiB,GAAG,EAA1B;MACA,IAAMC,eAAe,GAAG,EAAxB;;MACA,KAAK,IAAIC,QAAQ,GAAG,CAAf,EAAkBC,YAAY,GAAG,CAAtC,EAAyCD,QAAQ,GAAG7C,IAAI,CAACpD,MAAzD,EAAiEiG,QAAQ,EAAzE,EAA6E;QACzE,IAAI,CAACJ,MAAM,CAACI,QAAD,CAAX,EAAuB;UACnB;QACH;;QACDH,aAAa,CAACG,QAAD,CAAb,GAA0BC,YAA1B;QACA,IAAM3C,GAAG,GAAGH,IAAI,CAAC6C,QAAD,CAAhB;QACAD,eAAe,CAACC,QAAD,CAAf,GAA4B,KAAKtD,kBAAL,GACtBwD,KAAK,CAACzL,IAAN,CAAW6I,GAAG,CAACG,QAAf,CADsB,GAEtB,CAACH,GAAD,CAFN;QAGA,IAAM6C,MAAM,GAAG7C,GAAG,CAAC8C,qBAAJ,GAA4BD,MAA3C;QACAF,YAAY,IAAIE,MAAhB;QACAL,iBAAiB,CAACE,QAAD,CAAjB,GAA8BG,MAA9B;MACH;;MACD,IAAME,gBAAgB,GAAGT,MAAM,CAACf,WAAP,CAAmB,IAAnB,CAAzB,CA3B2C,CA4B3C;MACA;;MACA,KAAKhC,wBAAL,CAA8B7C,QAA9B,CAAuC,YAAM;QACzC,IAAIzB,EAAJ,EAAQ+H,EAAR;;QACA,KAAK,IAAIN,SAAQ,GAAG,CAApB,EAAuBA,SAAQ,GAAG7C,IAAI,CAACpD,MAAvC,EAA+CiG,SAAQ,EAAvD,EAA2D;UACvD,IAAI,CAACJ,MAAM,CAACI,SAAD,CAAX,EAAuB;YACnB;UACH;;UACD,IAAMO,MAAM,GAAGV,aAAa,CAACG,SAAD,CAA5B;UACA,IAAMQ,kBAAkB,GAAGR,SAAQ,KAAKK,gBAAxC;;UALuD,4CAMjCN,eAAe,CAACC,SAAD,CANkB;UAAA;;UAAA;YAMvD,uDAAiD;cAAA,IAAtCtC,OAAsC;;cAC7C,OAAI,CAACyB,eAAL,CAAqBzB,OAArB,EAA8BiC,QAA9B,EAAwCY,MAAxC,EAAgDC,kBAAhD;YACH;UARsD;YAAA;UAAA;YAAA;UAAA;QAS1D;;QACD,IAAIb,QAAQ,KAAK,KAAjB,EAAwB;UACpB,CAACpH,EAAE,GAAG,OAAI,CAACyE,iBAAX,MAAkC,IAAlC,IAA0CzE,EAAE,KAAK,KAAK,CAAtD,GAA0D,KAAK,CAA/D,GAAmEA,EAAE,CAACkI,uBAAH,CAA2B;YAC1FvC,KAAK,EAAE4B,iBADmF;YAE1FY,OAAO,EAAEb,aAFiF;YAG1Fc,QAAQ,EAAEZ;UAHgF,CAA3B,CAAnE;QAKH,CAND,MAOK;UACD,CAACO,EAAE,GAAG,OAAI,CAACtD,iBAAX,MAAkC,IAAlC,IAA0CsD,EAAE,KAAK,KAAK,CAAtD,GAA0D,KAAK,CAA/D,GAAmEA,EAAE,CAACM,uBAAH,CAA2B;YAC1F1C,KAAK,EAAE4B,iBADmF;YAE1FY,OAAO,EAAEb,aAFiF;YAG1Fc,QAAQ,EAAEZ;UAHgF,CAA3B,CAAnE;QAKH;MACJ,CA1BD;IA2BH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,qCAA4Bc,YAA5B,EAA0CnB,YAA1C,EAAwD;MAAA;;MACpD,IAAI,CAAC,KAAKhD,kBAAV,EAA8B;QAC1B;MACH;;MACD,IAAMoE,KAAK,GAAGD,YAAY,CAACE,aAAb,CAA2B,OAA3B,CAAd,CAJoD,CAKpD;;MACA,KAAKlE,wBAAL,CAA8B7C,QAA9B,CAAuC,YAAM;QACzC,IAAI0F,YAAY,CAAC3B,IAAb,CAAkB,UAAAC,KAAK;UAAA,OAAI,CAACA,KAAL;QAAA,CAAvB,CAAJ,EAAwC;UACpC,OAAI,CAACL,kBAAL,CAAwBmD,KAAxB,EAA+B,CAAC,QAAD,CAA/B;QACH,CAFD,MAGK;UACD,OAAI,CAAC3B,eAAL,CAAqB2B,KAArB,EAA4B,QAA5B,EAAsC,CAAtC,EAAyC,KAAzC;QACH;MACJ,CAPD;IAQH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,4BAAmBpD,OAAnB,EAA4BN,gBAA5B,EAA8C;MAAA,4CACxBA,gBADwB;MAAA;;MAAA;QAC1C,uDAAoC;UAAA,IAAzB4D,GAAyB;UAChCtD,OAAO,CAACuD,KAAR,CAAcD,GAAd,IAAqB,EAArB;UACAtD,OAAO,CAACzF,SAAR,CAAkBiJ,MAAlB,CAAyB,KAAKhE,cAAL,CAAoB8D,GAApB,CAAzB;QACH,CAJyC,CAK1C;QACA;QACA;QACA;;MAR0C;QAAA;MAAA;QAAA;MAAA;;MAS1C,IAAMG,YAAY,GAAG3E,iBAAiB,CAACuB,IAAlB,CAAuB,UAAAiD,GAAG;QAAA,OAAI5D,gBAAgB,CAAC2B,OAAjB,CAAyBiC,GAAzB,MAAkC,CAAC,CAAnC,IAAwCtD,OAAO,CAACuD,KAAR,CAAcD,GAAd,CAA5C;MAAA,CAA1B,CAArB;;MACA,IAAIG,YAAJ,EAAkB;QACdzD,OAAO,CAACuD,KAAR,CAAcG,MAAd,GAAuB,KAAKC,oBAAL,CAA0B3D,OAA1B,CAAvB;MACH,CAFD,MAGK;QACD;QACAA,OAAO,CAACuD,KAAR,CAAcG,MAAd,GAAuB,EAAvB;;QACA,IAAI,KAAKrE,6BAAT,EAAwC;UACpCW,OAAO,CAACuD,KAAR,CAActB,QAAd,GAAyB,EAAzB;QACH;;QACDjC,OAAO,CAACzF,SAAR,CAAkBiJ,MAAlB,CAAyB,KAAKvE,aAA9B;MACH;IACJ;IACD;AACJ;AACA;AACA;AACA;;;;WACI,yBAAgBe,OAAhB,EAAyBsD,GAAzB,EAA8BM,QAA9B,EAAwCC,eAAxC,EAAyD;MACrD7D,OAAO,CAACzF,SAAR,CAAkBC,GAAlB,CAAsB,KAAKyE,aAA3B;;MACA,IAAI4E,eAAJ,EAAqB;QACjB7D,OAAO,CAACzF,SAAR,CAAkBC,GAAlB,CAAsB,KAAKgF,cAAL,CAAoB8D,GAApB,CAAtB;MACH;;MACDtD,OAAO,CAACuD,KAAR,CAAcD,GAAd,cAAwBM,QAAxB;MACA5D,OAAO,CAACuD,KAAR,CAAcG,MAAd,GAAuB,KAAKC,oBAAL,CAA0B3D,OAA1B,CAAvB;;MACA,IAAI,KAAKX,6BAAT,EAAwC;QACpCW,OAAO,CAACuD,KAAR,CAAcO,OAAd,IAAyB,8CAAzB;MACH;IACJ;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,8BAAqB9D,OAArB,EAA8B;MAC1B,IAAM+D,gBAAgB,GAAG;QACrBC,GAAG,EAAE,GADgB;QAErBC,MAAM,EAAE,EAFa;QAGrBC,IAAI,EAAE,CAHe;QAIrBC,KAAK,EAAE;MAJc,CAAzB;MAMA,IAAIT,MAAM,GAAG,CAAb,CAP0B,CAQ1B;MACA;MACA;;MAV0B,4CAWR5E,iBAXQ;MAAA;;MAAA;QAW1B,uDAAqC;UAAA,IAA1BwE,GAA0B;;UACjC,IAAItD,OAAO,CAACuD,KAAR,CAAcD,GAAd,CAAJ,EAAwB;YACpBI,MAAM,IAAIK,gBAAgB,CAACT,GAAD,CAA1B;UACH;QACJ;MAfyB;QAAA;MAAA;QAAA;MAAA;;MAgB1B,OAAOI,MAAM,aAAMA,MAAN,IAAiB,EAA9B;IACH;IACD;;;;WACA,wBAAe9D,GAAf,EAAkD;MAAA,IAA9BQ,qBAA8B,uEAAN,IAAM;;MAC9C,IAAI,CAACA,qBAAD,IAA0B,KAAKb,iBAAL,CAAuBlD,MAArD,EAA6D;QACzD,OAAO,KAAKkD,iBAAZ;MACH;;MACD,IAAMqB,UAAU,GAAG,EAAnB;MACA,IAAMwD,aAAa,GAAGxE,GAAG,CAACG,QAA1B;;MACA,KAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsE,aAAa,CAAC/H,MAAlC,EAA0CyD,CAAC,EAA3C,EAA+C;QAC3C,IAAI9F,IAAI,GAAGoK,aAAa,CAACtE,CAAD,CAAxB;QACAc,UAAU,CAAC7E,IAAX,CAAgB/B,IAAI,CAAC0I,qBAAL,GAA6Bd,KAA7C;MACH;;MACD,KAAKrC,iBAAL,GAAyBqB,UAAzB;MACA,OAAOA,UAAP;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,wCAA+ByD,MAA/B,EAAuCrC,YAAvC,EAAqD;MACjD,IAAMsC,SAAS,GAAG,EAAlB;MACA,IAAIC,YAAY,GAAG,CAAnB;;MACA,KAAK,IAAIzE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuE,MAAM,CAAChI,MAA3B,EAAmCyD,CAAC,EAApC,EAAwC;QACpC,IAAIkC,YAAY,CAAClC,CAAD,CAAhB,EAAqB;UACjBwE,SAAS,CAACxE,CAAD,CAAT,GAAeyE,YAAf;UACAA,YAAY,IAAIF,MAAM,CAACvE,CAAD,CAAtB;QACH;MACJ;;MACD,OAAOwE,SAAP;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,sCAA6BD,MAA7B,EAAqCrC,YAArC,EAAmD;MAC/C,IAAMsC,SAAS,GAAG,EAAlB;MACA,IAAIC,YAAY,GAAG,CAAnB;;MACA,KAAK,IAAIzE,CAAC,GAAGuE,MAAM,CAAChI,MAApB,EAA4ByD,CAAC,GAAG,CAAhC,EAAmCA,CAAC,EAApC,EAAwC;QACpC,IAAIkC,YAAY,CAAClC,CAAD,CAAhB,EAAqB;UACjBwE,SAAS,CAACxE,CAAD,CAAT,GAAeyE,YAAf;UACAA,YAAY,IAAIF,MAAM,CAACvE,CAAD,CAAtB;QACH;MACJ;;MACD,OAAOwE,SAAP;IACH;;;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,0BAAT,CAAoCC,EAApC,EAAwC;EACpC,OAAOC,KAAK,2CAAmCD,EAAnC,SAAZ;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASE,gCAAT,CAA0CzL,IAA1C,EAAgD;EAC5C,OAAOwL,KAAK,wDAAgDxL,IAAhD,SAAZ;AACH;AACD;AACA;AACA;AACA;;;AACA,SAAS0L,mCAAT,GAA+C;EAC3C,OAAOF,KAAK,wEAAZ;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASG,kCAAT,CAA4CC,IAA5C,EAAkD;EAC9C,OAAOJ,KAAK,CAAC,kFACaK,IAAI,CAACC,SAAL,CAAeF,IAAf,CADb,CAAD,CAAZ;AAEH;AACD;AACA;AACA;AACA;;;AACA,SAASG,2BAAT,GAAuC;EACnC,OAAOP,KAAK,CAAC,sDACT,oDADQ,CAAZ;AAEH;AACD;AACA;AACA;AACA;;;AACA,SAASQ,8BAAT,GAA0C;EACtC,OAAOR,KAAK,0EAAZ;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASS,yCAAT,GAAqD;EACjD,OAAOT,KAAK,+DAAZ;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASU,kCAAT,GAA8C;EAC1C,OAAOV,KAAK,uCAAZ;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,IAAMW,2BAA2B,GAAG,IAAI1P,cAAJ,CAAmB,SAAnB,CAApC;AAEA;AACA;AACA;AACA;;IACM2P,c;;;;AAENA,cAAc,CAACjN,IAAf;EAAA,iBAAgHiN,cAAhH;AAAA;;AACAA,cAAc,CAAC/M,IAAf,kBAr9BkG7C,EAq9BlG;EAAA,MAAoG4P,cAApG;EAAA;EAAA,WAr9BkG5P,EAq9BlG,oBAAkM,CAAC;IAAE+D,OAAO,EAAErE,uBAAX;IAAoCmQ,QAAQ,EAAElQ;EAA9C,CAAD,CAAlM;AAAA;;AACA;EAAA,mDAt9BkGK,EAs9BlG,mBAAgG4P,cAAhG,EAA4H,CAAC;IACjH9M,IAAI,EAAE5C,SAD2G;IAEjH+B,IAAI,EAAE,CAAC;MACCc,QAAQ,EAAE,uDADX;MAECmB,SAAS,EAAE,CAAC;QAAEH,OAAO,EAAErE,uBAAX;QAAoCmQ,QAAQ,EAAElQ;MAA9C,CAAD;IAFZ,CAAD;EAF2G,CAAD,CAA5H;AAAA;AAOA;AACA;AACA;AACA;;;IACMmQ,a,6BACF,uBAAYC,aAAZ,EAA2BpL,UAA3B,EAAuC;EAAA;;EACnC,KAAKoL,aAAL,GAAqBA,aAArB;EACA,KAAKpL,UAAL,GAAkBA,UAAlB;AACH,C;;AAELmL,aAAa,CAACnN,IAAd;EAAA,iBAA+GmN,aAA/G,EAv+BkG9P,EAu+BlG,mBAA8IA,EAAE,CAACwI,gBAAjJ,GAv+BkGxI,EAu+BlG,mBAA8KA,EAAE,CAACgF,UAAjL;AAAA;;AACA8K,aAAa,CAACjN,IAAd,kBAx+BkG7C,EAw+BlG;EAAA,MAAmG8P,aAAnG;EAAA;AAAA;;AACA;EAAA,mDAz+BkG9P,EAy+BlG,mBAAgG8P,aAAhG,EAA2H,CAAC;IAChHhN,IAAI,EAAE5C,SAD0G;IAEhH+B,IAAI,EAAE,CAAC;MAAEc,QAAQ,EAAE;IAAZ,CAAD;EAF0G,CAAD,CAA3H,EAG4B,YAAY;IAAE,OAAO,CAAC;MAAED,IAAI,EAAE9C,EAAE,CAACwI;IAAX,CAAD,EAAgC;MAAE1F,IAAI,EAAE9C,EAAE,CAACgF;IAAX,CAAhC,CAAP;EAAkE,CAH5G;AAAA;AAIA;AACA;AACA;AACA;;;IACMgL,e,6BACF,yBAAYD,aAAZ,EAA2BpL,UAA3B,EAAuC;EAAA;;EACnC,KAAKoL,aAAL,GAAqBA,aAArB;EACA,KAAKpL,UAAL,GAAkBA,UAAlB;AACH,C;;AAELqL,eAAe,CAACrN,IAAhB;EAAA,iBAAiHqN,eAAjH,EAv/BkGhQ,EAu/BlG,mBAAkJA,EAAE,CAACwI,gBAArJ,GAv/BkGxI,EAu/BlG,mBAAkLA,EAAE,CAACgF,UAArL;AAAA;;AACAgL,eAAe,CAACnN,IAAhB,kBAx/BkG7C,EAw/BlG;EAAA,MAAqGgQ,eAArG;EAAA;AAAA;;AACA;EAAA,mDAz/BkGhQ,EAy/BlG,mBAAgGgQ,eAAhG,EAA6H,CAAC;IAClHlN,IAAI,EAAE5C,SAD4G;IAElH+B,IAAI,EAAE,CAAC;MAAEc,QAAQ,EAAE;IAAZ,CAAD;EAF4G,CAAD,CAA7H,EAG4B,YAAY;IAAE,OAAO,CAAC;MAAED,IAAI,EAAE9C,EAAE,CAACwI;IAAX,CAAD,EAAgC;MAAE1F,IAAI,EAAE9C,EAAE,CAACgF;IAAX,CAAhC,CAAP;EAAkE,CAH5G;AAAA;AAIA;AACA;AACA;AACA;;;IACMiL,e,6BACF,yBAAYF,aAAZ,EAA2BpL,UAA3B,EAAuC;EAAA;;EACnC,KAAKoL,aAAL,GAAqBA,aAArB;EACA,KAAKpL,UAAL,GAAkBA,UAAlB;AACH,C;;AAELsL,eAAe,CAACtN,IAAhB;EAAA,iBAAiHsN,eAAjH,EAvgCkGjQ,EAugClG,mBAAkJA,EAAE,CAACwI,gBAArJ,GAvgCkGxI,EAugClG,mBAAkLA,EAAE,CAACgF,UAArL;AAAA;;AACAiL,eAAe,CAACpN,IAAhB,kBAxgCkG7C,EAwgClG;EAAA,MAAqGiQ,eAArG;EAAA;AAAA;;AACA;EAAA,mDAzgCkGjQ,EAygClG,mBAAgGiQ,eAAhG,EAA6H,CAAC;IAClHnN,IAAI,EAAE5C,SAD4G;IAElH+B,IAAI,EAAE,CAAC;MAAEc,QAAQ,EAAE;IAAZ,CAAD;EAF4G,CAAD,CAA7H,EAG4B,YAAY;IAAE,OAAO,CAAC;MAAED,IAAI,EAAE9C,EAAE,CAACwI;IAAX,CAAD,EAAgC;MAAE1F,IAAI,EAAE9C,EAAE,CAACgF;IAAX,CAAhC,CAAP;EAAkE,CAH5G;AAAA;AAIA;AACA;AACA;AACA;AACA;;;IACMkL,e,6BACF,yBAAYH,aAAZ,EAA2BpL,UAA3B,EAAuC;EAAA;;EACnC,KAAKoL,aAAL,GAAqBA,aAArB;EACA,KAAKpL,UAAL,GAAkBA,UAAlB;AACH,C;;AAELuL,eAAe,CAACvN,IAAhB;EAAA,iBAAiHuN,eAAjH,EAxhCkGlQ,EAwhClG,mBAAkJA,EAAE,CAACwI,gBAArJ,GAxhCkGxI,EAwhClG,mBAAkLA,EAAE,CAACgF,UAArL;AAAA;;AACAkL,eAAe,CAACrN,IAAhB,kBAzhCkG7C,EAyhClG;EAAA,MAAqGkQ,eAArG;EAAA;AAAA;;AACA;EAAA,mDA1hCkGlQ,EA0hClG,mBAAgGkQ,eAAhG,EAA6H,CAAC;IAClHpN,IAAI,EAAE5C,SAD4G;IAElH+B,IAAI,EAAE,CAAC;MAAEc,QAAQ,EAAE;IAAZ,CAAD;EAF4G,CAAD,CAA7H,EAG4B,YAAY;IAAE,OAAO,CAAC;MAAED,IAAI,EAAE9C,EAAE,CAACwI;IAAX,CAAD,EAAgC;MAAE1F,IAAI,EAAE9C,EAAE,CAACgF;IAAX,CAAhC,CAAP;EAAkE,CAH5G;AAAA;AAIA;AACA;AACA;AACA;AACA;;;AACA,IAAMmL,kBAAkB,GACxB;AACA;AAFwB,wSAAxB;AAWA;AACA;AACA;AACA;;IACMC,U;;;;;;;;;;;;EAAmBzP,e;AAEzB;AACA;AACA;AACA;AACA;AACA;;;IACM0P,Q;EACF,kBAAYjJ,QAAZ,EAAsBkJ,kBAAtB,EAA0ClL,WAA1C,EAAuDI,IAAvD,EAA6D+K,IAA7D,EAAmEC,SAAnE,EAA8EC,SAA9E,EAAyFC,aAAzF,EAAwGjH,wBAAxG,EAAkIkH,cAAlI;EACA;AACJ;AACA;AACA;EACIC,0BALA;EAMA;AACJ;AACA;AACA;EACI5K,OAVA,EAUS;IAAA;;IACL,KAAKoB,QAAL,GAAgBA,QAAhB;IACA,KAAKkJ,kBAAL,GAA0BA,kBAA1B;IACA,KAAKlL,WAAL,GAAmBA,WAAnB;IACA,KAAKmL,IAAL,GAAYA,IAAZ;IACA,KAAKE,SAAL,GAAiBA,SAAjB;IACA,KAAKC,aAAL,GAAqBA,aAArB;IACA,KAAKjH,wBAAL,GAAgCA,wBAAhC;IACA,KAAKkH,cAAL,GAAsBA,cAAtB;IACA,KAAKC,0BAAL,GAAkCA,0BAAlC;IACA,KAAK5K,OAAL,GAAeA,OAAf;IACA;;IACA,KAAK6K,UAAL,GAAkB,IAAIzP,OAAJ,EAAlB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAK0P,iBAAL,GAAyB,IAAIC,GAAJ,EAAzB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,iBAAL,GAAyB,IAAIC,GAAJ,EAAzB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,cAAL,GAAsB,IAAID,GAAJ,EAAtB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKE,oBAAL,GAA4B,IAAIF,GAAJ,EAA5B;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKG,oBAAL,GAA4B,IAAIH,GAAJ,EAA5B;IACA;AACR;AACA;AACA;;IACQ,KAAKI,oBAAL,GAA4B,IAA5B;IACA;AACR;AACA;AACA;;IACQ,KAAKC,oBAAL,GAA4B,IAA5B;IACA;AACR;AACA;AACA;;IACQ,KAAKC,4BAAL,GAAoC,IAApC;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,2BAAL,GAAmC,IAAnC;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQ,KAAKC,oBAAL,GAA4B,IAAIV,GAAJ,EAA5B;IACA;AACR;AACA;AACA;;IACQ,KAAKW,cAAL,GAAsB,kBAAtB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,4BAAL,GAAoC,IAApC;IACA;;IACA,KAAKC,mBAAL,GAA2B,KAA3B;IACA,KAAKC,sBAAL,GAA8B,KAA9B;IACA,KAAKC,YAAL,GAAoB,KAApB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,cAAL,GAAsB,IAAInR,YAAJ,EAAtB,CAjGK,CAkGL;IACA;;IACA;AACR;AACA;AACA;AACA;AACA;;IACQ,KAAKoR,UAAL,GAAkB,IAAI1Q,eAAJ,CAAoB;MAClCuK,KAAK,EAAE,CAD2B;MAElCC,GAAG,EAAEmG,MAAM,CAACC;IAFsB,CAApB,CAAlB;;IAIA,IAAI,CAAC1M,IAAL,EAAW;MACP,KAAKJ,WAAL,CAAiBR,aAAjB,CAA+Ba,YAA/B,CAA4C,MAA5C,EAAoD,OAApD;IACH;;IACD,KAAK+K,SAAL,GAAiBA,SAAjB;IACA,KAAKlH,kBAAL,GAA0B,KAAKlE,WAAL,CAAiBR,aAAjB,CAA+BuN,QAA/B,KAA4C,OAAtE;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;;;SACI,eAAc;MACV,OAAO,KAAKC,UAAZ;IACH,C;SACD,aAAYC,EAAZ,EAAgB;MACZ,IAAI,CAAC,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDD,EAAE,IAAI,IAAzD,IAAiE,OAAOA,EAAP,KAAc,UAAnF,EAA+F;QAC3FE,OAAO,CAACC,IAAR,oDAAyDnD,IAAI,CAACC,SAAL,CAAe+C,EAAf,CAAzD;MACH;;MACD,KAAKD,UAAL,GAAkBC,EAAlB;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;SACI,eAAiB;MACb,OAAO,KAAKI,WAAZ;IACH,C;SACD,aAAeC,UAAf,EAA2B;MACvB,IAAI,KAAKD,WAAL,KAAqBC,UAAzB,EAAqC;QACjC,KAAKC,iBAAL,CAAuBD,UAAvB;MACH;IACJ;IACD;AACJ;AACA;AACA;AACA;AACA;;;;SACI,eAA4B;MACxB,OAAO,KAAKb,sBAAZ;IACH,C;SACD,aAA0BzP,CAA1B,EAA6B;MACzB,KAAKyP,sBAAL,GAA8BpS,qBAAqB,CAAC2C,CAAD,CAAnD,CADyB,CAEzB;MACA;;MACA,IAAI,KAAKwQ,UAAL,IAAmB,KAAKA,UAAL,CAAgB7C,aAAhB,CAA8BpJ,MAArD,EAA6D;QACzD,KAAKkM,oBAAL;;QACA,KAAKC,wBAAL;MACH;IACJ;IACD;AACJ;AACA;AACA;;;;SACI,eAAkB;MACd,OAAO,KAAKhB,YAAZ;IACH,C;SACD,aAAgB1P,CAAhB,EAAmB;MACf,KAAK0P,YAAL,GAAoBrS,qBAAqB,CAAC2C,CAAD,CAAzC,CADe,CAEf;;MACA,KAAKoP,2BAAL,GAAmC,IAAnC;MACA,KAAKD,4BAAL,GAAoC,IAApC;IACH;;;WACD,oBAAW;MAAA;;MACP,KAAKwB,kBAAL;;MACA,IAAI,KAAKzJ,kBAAT,EAA6B;QACzB,KAAK0J,yBAAL;MACH,CAJM,CAKP;MACA;MACA;;;MACA,KAAKC,WAAL,GAAmB,KAAK7L,QAAL,CAAcK,IAAd,CAAmB,EAAnB,EAAuBC,MAAvB,CAA8B,UAACwL,EAAD,EAAKC,OAAL,EAAiB;QAC9D,OAAO,OAAI,CAACC,OAAL,GAAe,OAAI,CAACA,OAAL,CAAaD,OAAO,CAACE,SAArB,EAAgCF,OAAO,CAAC/D,IAAxC,CAAf,GAA+D+D,OAAtE;MACH,CAFkB,CAAnB;;MAGA,KAAKxC,cAAL,CACK2C,MADL,GAEK7M,IAFL,CAEUhF,SAAS,CAAC,KAAKoP,UAAN,CAFnB,EAGKnK,SAHL,CAGe,YAAM;QACjB,OAAI,CAAC8K,2BAAL,GAAmC,IAAnC;MACH,CALD;IAMH;;;WACD,iCAAwB;MACpB;MACA,KAAK+B,aAAL;;MACA,KAAKC,gBAAL,GAHoB,CAIpB;;;MACA,IAAI,CAAC,KAAKC,cAAL,CAAoB9M,MAArB,IACA,CAAC,KAAK+M,cAAL,CAAoB/M,MADrB,IAEA,CAAC,KAAKgN,QAAL,CAAchN,MAFf,KAGC,OAAO2L,SAAP,KAAqB,WAArB,IAAoCA,SAHrC,CAAJ,EAGqD;QACjD,MAAM/C,2BAA2B,EAAjC;MACH,CAVmB,CAWpB;;;MACA,IAAMqE,cAAc,GAAG,KAAKC,qBAAL,EAAvB;;MACA,IAAMC,cAAc,GAAGF,cAAc,IAAI,KAAKvC,oBAAvB,IAA+C,KAAKC,oBAA3E,CAboB,CAcpB;;MACA,KAAKC,4BAAL,GAAoC,KAAKA,4BAAL,IAAqCuC,cAAzE;MACA,KAAKtC,2BAAL,GAAmCsC,cAAnC,CAhBoB,CAiBpB;;MACA,IAAI,KAAKzC,oBAAT,EAA+B;QAC3B,KAAK0C,sBAAL;;QACA,KAAK1C,oBAAL,GAA4B,KAA5B;MACH,CArBmB,CAsBpB;;;MACA,IAAI,KAAKC,oBAAT,EAA+B;QAC3B,KAAK0C,sBAAL;;QACA,KAAK1C,oBAAL,GAA4B,KAA5B;MACH,CA1BmB,CA2BpB;MACA;;;MACA,IAAI,KAAKoB,UAAL,IAAmB,KAAKiB,QAAL,CAAchN,MAAd,GAAuB,CAA1C,IAA+C,CAAC,KAAKsN,yBAAzD,EAAoF;QAChF,KAAKC,qBAAL;MACH,CAFD,MAGK,IAAI,KAAK3C,4BAAT,EAAuC;QACxC;QACA;QACA,KAAKuB,wBAAL;MACH;;MACD,KAAKqB,kBAAL;IACH;;;WACD,uBAAc;MACV,CACI,KAAKvB,UAAL,CAAgB7C,aADpB,EAEI,KAAKqE,gBAAL,CAAsBrE,aAF1B,EAGI,KAAKsE,gBAAL,CAAsBtE,aAH1B,EAII,KAAK0B,oBAJT,EAKI,KAAKT,iBALT,EAMI,KAAKE,cANT,EAOI,KAAKC,oBAPT,EAQI,KAAKC,oBART,EASI,KAAKN,iBATT,EAUEwD,OAVF,CAUU,UAAAC,GAAG,EAAI;QACbA,GAAG,CAACC,KAAJ;MACH,CAZD;MAaA,KAAKf,cAAL,GAAsB,EAAtB;MACA,KAAKC,cAAL,GAAsB,EAAtB;MACA,KAAKe,cAAL,GAAsB,IAAtB;;MACA,KAAK5D,UAAL,CAAgBvK,IAAhB;;MACA,KAAKuK,UAAL,CAAgBtK,QAAhB;;MACA,IAAI3G,YAAY,CAAC,KAAK8S,UAAN,CAAhB,EAAmC;QAC/B,KAAKA,UAAL,CAAgBgC,UAAhB,CAA2B,IAA3B;MACH;IACJ;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,sBAAa;MAAA;;MACT,KAAKC,WAAL,GAAmB,KAAKC,iBAAL,EAAnB;;MACA,IAAMvN,OAAO,GAAG,KAAK4L,WAAL,CAAiBtL,IAAjB,CAAsB,KAAKgN,WAA3B,CAAhB;;MACA,IAAI,CAACtN,OAAL,EAAc;QACV,KAAKwN,gBAAL;;QACA,KAAK9C,cAAL,CAAoBzL,IAApB;QACA;MACH;;MACD,IAAMyJ,aAAa,GAAG,KAAK6C,UAAL,CAAgB7C,aAAtC;;MACA,KAAKW,aAAL,CAAmBoE,YAAnB,CAAgCzN,OAAhC,EAAyC0I,aAAzC,EAAwD,UAACgF,MAAD,EAASC,sBAAT,EAAiCC,YAAjC;QAAA,OAAkD,OAAI,CAACC,oBAAL,CAA0BH,MAAM,CAACI,IAAjC,EAAuCF,YAAvC,CAAlD;MAAA,CAAxD,EAAgK,UAAAF,MAAM;QAAA,OAAIA,MAAM,CAACI,IAAP,CAAY/F,IAAhB;MAAA,CAAtK,EAA4L,UAACkE,MAAD,EAAY;QACpM,IAAIA,MAAM,CAAC8B,SAAP,KAAqB;QAAE;QAAvB,GAAgE9B,MAAM,CAAC+B,OAA3E,EAAoF;UAChF,OAAI,CAACC,0BAAL,CAAgChC,MAAM,CAACyB,MAAP,CAAcI,IAAd,CAAmBI,MAAnD,EAA2DjC,MAAM,CAAC+B,OAAlE;QACH;MACJ,CAJD,EATS,CAcT;;;MACA,KAAKG,sBAAL,GAfS,CAgBT;MACA;;;MACAnO,OAAO,CAACoO,qBAAR,CAA8B,UAACV,MAAD,EAAY;QACtC,IAAMW,OAAO,GAAG3F,aAAa,CAAC4F,GAAd,CAAkBZ,MAAM,CAACE,YAAzB,CAAhB;QACAS,OAAO,CAACL,OAAR,CAAgBO,SAAhB,GAA4Bb,MAAM,CAACI,IAAP,CAAY/F,IAAxC;MACH,CAHD;;MAIA,KAAKyF,gBAAL,GAtBS,CAuBT;MACA;;;MACA,IAAI,KAAK7O,OAAL,IAAgBnF,MAAM,CAACgV,eAAP,EAApB,EAA8C;QAC1C,KAAK7P,OAAL,CAAagB,QAAb,CAAsBP,IAAtB,CAA2B/E,IAAI,CAAC,CAAD,CAA/B,EAAoCD,SAAS,CAAC,KAAKoP,UAAN,CAA7C,EAAgEnK,SAAhE,CAA0E,YAAM;UAC5E,OAAI,CAACoM,wBAAL;QACH,CAFD;MAGH,CAJD,MAKK;QACD,KAAKA,wBAAL;MACH;;MACD,KAAKf,cAAL,CAAoBzL,IAApB;IACH;IACD;;;;WACA,sBAAa5B,SAAb,EAAwB;MACpB,KAAKsM,iBAAL,CAAuBlM,GAAvB,CAA2BJ,SAA3B;IACH;IACD;;;;WACA,yBAAgBA,SAAhB,EAA2B;MACvB,KAAKsM,iBAAL,CAAuB8E,MAAvB,CAA8BpR,SAA9B;IACH;IACD;;;;WACA,mBAAU6Q,MAAV,EAAkB;MACd,KAAKrE,cAAL,CAAoBpM,GAApB,CAAwByQ,MAAxB;IACH;IACD;;;;WACA,sBAAaA,MAAb,EAAqB;MACjB,KAAKrE,cAAL,CAAoB4E,MAApB,CAA2BP,MAA3B;IACH;IACD;;;;WACA,yBAAgBQ,YAAhB,EAA8B;MAC1B,KAAK5E,oBAAL,CAA0BrM,GAA1B,CAA8BiR,YAA9B;;MACA,KAAK1E,oBAAL,GAA4B,IAA5B;IACH;IACD;;;;WACA,4BAAmB0E,YAAnB,EAAiC;MAC7B,KAAK5E,oBAAL,CAA0B2E,MAA1B,CAAiCC,YAAjC;;MACA,KAAK1E,oBAAL,GAA4B,IAA5B;IACH;IACD;;;;WACA,yBAAgB2E,YAAhB,EAA8B;MAC1B,KAAK5E,oBAAL,CAA0BtM,GAA1B,CAA8BkR,YAA9B;;MACA,KAAK1E,oBAAL,GAA4B,IAA5B;IACH;IACD;;;;WACA,4BAAmB0E,YAAnB,EAAiC;MAC7B,KAAK5E,oBAAL,CAA0B0E,MAA1B,CAAiCE,YAAjC;;MACA,KAAK1E,oBAAL,GAA4B,IAA5B;IACH;IACD;;;;WACA,sBAAa2E,SAAb,EAAwB;MACpB,KAAKC,gBAAL,GAAwBD,SAAxB;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,uCAA8B;MAC1B,IAAME,UAAU,GAAG,KAAKC,gBAAL,CAAsB,KAAKhC,gBAA3B,CAAnB;;MACA,IAAM3G,YAAY,GAAG,KAAKrI,WAAL,CAAiBR,aAAtC,CAF0B,CAG1B;MACA;MACA;;MACA,IAAMyR,KAAK,GAAG5I,YAAY,CAACE,aAAb,CAA2B,OAA3B,CAAd;;MACA,IAAI0I,KAAJ,EAAW;QACPA,KAAK,CAACxI,KAAN,CAAYyI,OAAZ,GAAsBH,UAAU,CAACxP,MAAX,GAAoB,EAApB,GAAyB,MAA/C;MACH;;MACD,IAAM2F,YAAY,GAAG,KAAKmH,cAAL,CAAoBxH,GAApB,CAAwB,UAAAsI,GAAG;QAAA,OAAIA,GAAG,CAACgC,MAAR;MAAA,CAA3B,CAArB;;MACA,KAAKC,aAAL,CAAmBC,sBAAnB,CAA0CN,UAA1C,EAAsD,CAAC,KAAD,CAAtD;;MACA,KAAKK,aAAL,CAAmBE,SAAnB,CAA6BP,UAA7B,EAAyC7J,YAAzC,EAAuD,KAAvD,EAZ0B,CAa1B;;;MACA,KAAKmH,cAAL,CAAoBa,OAApB,CAA4B,UAAAC,GAAG;QAAA,OAAIA,GAAG,CAACoC,kBAAJ,EAAJ;MAAA,CAA/B;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,uCAA8B;MAC1B,IAAMC,UAAU,GAAG,KAAKR,gBAAL,CAAsB,KAAK/B,gBAA3B,CAAnB;;MACA,IAAM5G,YAAY,GAAG,KAAKrI,WAAL,CAAiBR,aAAtC,CAF0B,CAG1B;MACA;MACA;;MACA,IAAM8I,KAAK,GAAGD,YAAY,CAACE,aAAb,CAA2B,OAA3B,CAAd;;MACA,IAAID,KAAJ,EAAW;QACPA,KAAK,CAACG,KAAN,CAAYyI,OAAZ,GAAsBM,UAAU,CAACjQ,MAAX,GAAoB,EAApB,GAAyB,MAA/C;MACH;;MACD,IAAM2F,YAAY,GAAG,KAAKoH,cAAL,CAAoBzH,GAApB,CAAwB,UAAAsI,GAAG;QAAA,OAAIA,GAAG,CAACgC,MAAR;MAAA,CAA3B,CAArB;;MACA,KAAKC,aAAL,CAAmBC,sBAAnB,CAA0CG,UAA1C,EAAsD,CAAC,QAAD,CAAtD;;MACA,KAAKJ,aAAL,CAAmBE,SAAnB,CAA6BE,UAA7B,EAAyCtK,YAAzC,EAAuD,QAAvD;;MACA,KAAKkK,aAAL,CAAmBK,2BAAnB,CAA+C,KAAKzR,WAAL,CAAiBR,aAAhE,EAA+E0H,YAA/E,EAb0B,CAc1B;;;MACA,KAAKoH,cAAL,CAAoBY,OAApB,CAA4B,UAAAC,GAAG;QAAA,OAAIA,GAAG,CAACoC,kBAAJ,EAAJ;MAAA,CAA/B;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,oCAA2B;MAAA;;MACvB,IAAMR,UAAU,GAAG,KAAKC,gBAAL,CAAsB,KAAKhC,gBAA3B,CAAnB;;MACA,IAAM0C,QAAQ,GAAG,KAAKV,gBAAL,CAAsB,KAAKxD,UAA3B,CAAjB;;MACA,IAAMgE,UAAU,GAAG,KAAKR,gBAAL,CAAsB,KAAK/B,gBAA3B,CAAnB,CAHuB,CAIvB;MACA;MACA;MACA;;;MACA,IAAK,KAAK/K,kBAAL,IAA2B,CAAC,KAAKwI,YAAlC,IAAmD,KAAKP,4BAA5D,EAA0F;QACtF;QACA;QACA,KAAKiF,aAAL,CAAmBC,sBAAnB,8BAA8CN,UAA9C,sBAA6DW,QAA7D,sBAA0EF,UAA1E,IAAuF,CAAC,MAAD,EAAS,OAAT,CAAvF;;QACA,KAAKrF,4BAAL,GAAoC,KAApC;MACH,CAbsB,CAcvB;;;MACA4E,UAAU,CAAC7B,OAAX,CAAmB,UAACyC,SAAD,EAAY3M,CAAZ,EAAkB;QACjC,OAAI,CAAC4M,sBAAL,CAA4B,CAACD,SAAD,CAA5B,EAAyC,OAAI,CAACtD,cAAL,CAAoBrJ,CAApB,CAAzC;MACH,CAFD,EAfuB,CAkBvB;;MACA,KAAKuJ,QAAL,CAAcW,OAAd,CAAsB,UAAAiB,MAAM,EAAI;QAC5B;QACA,IAAMxL,IAAI,GAAG,EAAb;;QACA,KAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0M,QAAQ,CAACnQ,MAA7B,EAAqCyD,CAAC,EAAtC,EAA0C;UACtC,IAAI,OAAI,CAACuK,WAAL,CAAiBvK,CAAjB,EAAoBmL,MAApB,KAA+BA,MAAnC,EAA2C;YACvCxL,IAAI,CAAC1D,IAAL,CAAUyQ,QAAQ,CAAC1M,CAAD,CAAlB;UACH;QACJ;;QACD,OAAI,CAAC4M,sBAAL,CAA4BjN,IAA5B,EAAkCwL,MAAlC;MACH,CATD,EAnBuB,CA6BvB;;;MACAqB,UAAU,CAACtC,OAAX,CAAmB,UAAC2C,SAAD,EAAY7M,CAAZ,EAAkB;QACjC,OAAI,CAAC4M,sBAAL,CAA4B,CAACC,SAAD,CAA5B,EAAyC,OAAI,CAACvD,cAAL,CAAoBtJ,CAApB,CAAzC;MACH,CAFD,EA9BuB,CAiCvB;;MACA0C,KAAK,CAACzL,IAAN,CAAW,KAAKyP,iBAAL,CAAuBoG,MAAvB,EAAX,EAA4C5C,OAA5C,CAAoD,UAAAC,GAAG;QAAA,OAAIA,GAAG,CAACoC,kBAAJ,EAAJ;MAAA,CAAvD;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,6BAAoB;MAChB,IAAMQ,UAAU,GAAG,EAAnB,CADgB,CAEhB;MACA;;MACA,IAAMC,oBAAoB,GAAG,KAAK3F,oBAAlC;MACA,KAAKA,oBAAL,GAA4B,IAAIV,GAAJ,EAA5B,CALgB,CAMhB;MACA;;MACA,KAAK,IAAI3G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKiN,KAAL,CAAW1Q,MAA/B,EAAuCyD,CAAC,EAAxC,EAA4C;QACxC,IAAIgF,IAAI,GAAG,KAAKiI,KAAL,CAAWjN,CAAX,CAAX;;QACA,IAAMkN,iBAAiB,GAAG,KAAKC,qBAAL,CAA2BnI,IAA3B,EAAiChF,CAAjC,EAAoCgN,oBAAoB,CAACzB,GAArB,CAAyBvG,IAAzB,CAApC,CAA1B;;QACA,IAAI,CAAC,KAAKqC,oBAAL,CAA0B+F,GAA1B,CAA8BpI,IAA9B,CAAL,EAA0C;UACtC,KAAKqC,oBAAL,CAA0BgG,GAA1B,CAA8BrI,IAA9B,EAAoC,IAAIsI,OAAJ,EAApC;QACH;;QACD,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,iBAAiB,CAAC3Q,MAAtC,EAA8CgR,CAAC,EAA/C,EAAmD;UAC/C,IAAIC,SAAS,GAAGN,iBAAiB,CAACK,CAAD,CAAjC;;UACA,IAAME,KAAK,GAAG,KAAKpG,oBAAL,CAA0BkE,GAA1B,CAA8BiC,SAAS,CAACxI,IAAxC,CAAd;;UACA,IAAIyI,KAAK,CAACL,GAAN,CAAUI,SAAS,CAACrC,MAApB,CAAJ,EAAiC;YAC7BsC,KAAK,CAAClC,GAAN,CAAUiC,SAAS,CAACrC,MAApB,EAA4BlP,IAA5B,CAAiCuR,SAAjC;UACH,CAFD,MAGK;YACDC,KAAK,CAACJ,GAAN,CAAUG,SAAS,CAACrC,MAApB,EAA4B,CAACqC,SAAD,CAA5B;UACH;;UACDT,UAAU,CAAC9Q,IAAX,CAAgBuR,SAAhB;QACH;MACJ;;MACD,OAAOT,UAAP;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,+BAAsB/H,IAAtB,EAA4BiE,SAA5B,EAAuCwE,KAAvC,EAA8C;MAC1C,IAAMC,OAAO,GAAG,KAAKC,WAAL,CAAiB3I,IAAjB,EAAuBiE,SAAvB,CAAhB;;MACA,OAAOyE,OAAO,CAAC7L,GAAR,CAAY,UAAAsJ,MAAM,EAAI;QACzB,IAAMyC,gBAAgB,GAAGH,KAAK,IAAIA,KAAK,CAACL,GAAN,CAAUjC,MAAV,CAAT,GAA6BsC,KAAK,CAAClC,GAAN,CAAUJ,MAAV,CAA7B,GAAiD,EAA1E;;QACA,IAAIyC,gBAAgB,CAACrR,MAArB,EAA6B;UACzB,IAAMwM,OAAO,GAAG6E,gBAAgB,CAACC,KAAjB,EAAhB;UACA9E,OAAO,CAACE,SAAR,GAAoBA,SAApB;UACA,OAAOF,OAAP;QACH,CAJD,MAKK;UACD,OAAO;YAAE/D,IAAI,EAAJA,IAAF;YAAQmG,MAAM,EAANA,MAAR;YAAgBlC,SAAS,EAATA;UAAhB,CAAP;QACH;MACJ,CAVM,CAAP;IAWH;IACD;;;;WACA,4BAAmB;MAAA;;MACf,KAAKvC,iBAAL,CAAuB0D,KAAvB;;MACA,IAAM0D,UAAU,GAAGC,gBAAgB,CAAC,KAAKC,WAAL,CAAiB,KAAKC,kBAAtB,CAAD,EAA4C,KAAKrH,iBAAjD,CAAnC;MACAkH,UAAU,CAAC5D,OAAX,CAAmB,UAAA5P,SAAS,EAAI;QAC5B,IAAI,OAAI,CAACoM,iBAAL,CAAuB0G,GAAvB,CAA2B9S,SAAS,CAAClB,IAArC,MACC,OAAO8O,SAAP,KAAqB,WAArB,IAAoCA,SADrC,CAAJ,EACqD;UACjD,MAAMrD,gCAAgC,CAACvK,SAAS,CAAClB,IAAX,CAAtC;QACH;;QACD,OAAI,CAACsN,iBAAL,CAAuB2G,GAAvB,CAA2B/S,SAAS,CAAClB,IAArC,EAA2CkB,SAA3C;MACH,CAND;IAOH;IACD;;;;WACA,yBAAgB;MACZ,KAAK+O,cAAL,GAAsB0E,gBAAgB,CAAC,KAAKC,WAAL,CAAiB,KAAKE,qBAAtB,CAAD,EAA+C,KAAKnH,oBAApD,CAAtC;MACA,KAAKuC,cAAL,GAAsByE,gBAAgB,CAAC,KAAKC,WAAL,CAAiB,KAAKG,qBAAtB,CAAD,EAA+C,KAAKnH,oBAApD,CAAtC;MACA,KAAKuC,QAAL,GAAgBwE,gBAAgB,CAAC,KAAKC,WAAL,CAAiB,KAAKI,eAAtB,CAAD,EAAyC,KAAKtH,cAA9C,CAAhC,CAHY,CAIZ;;MACA,IAAMuH,cAAc,GAAG,KAAK9E,QAAL,CAAc+E,MAAd,CAAqB,UAAAnE,GAAG;QAAA,OAAI,CAACA,GAAG,CAACoE,IAAT;MAAA,CAAxB,CAAvB;;MACA,IAAI,CAAC,KAAKC,qBAAN,IACAH,cAAc,CAAC9R,MAAf,GAAwB,CADxB,KAEC,OAAO2L,SAAP,KAAqB,WAArB,IAAoCA,SAFrC,CAAJ,EAEqD;QACjD,MAAMpD,mCAAmC,EAAzC;MACH;;MACD,KAAKuF,cAAL,GAAsBgE,cAAc,CAAC,CAAD,CAApC;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,iCAAwB;MACpB,IAAMI,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,GAAD,EAAMvE,GAAN;QAAA,OAAcuE,GAAG,IAAI,CAAC,CAACvE,GAAG,CAACwE,cAAJ,EAAvB;MAAA,CAA3B,CADoB,CAEpB;;;MACA,IAAMC,kBAAkB,GAAG,KAAKrF,QAAL,CAAcsF,MAAd,CAAqBJ,kBAArB,EAAyC,KAAzC,CAA3B;;MACA,IAAIG,kBAAJ,EAAwB;QACpB,KAAKnG,oBAAL;MACH,CANmB,CAOpB;;;MACA,IAAMqG,oBAAoB,GAAG,KAAKzF,cAAL,CAAoBwF,MAApB,CAA2BJ,kBAA3B,EAA+C,KAA/C,CAA7B;;MACA,IAAIK,oBAAJ,EAA0B;QACtB,KAAKnF,sBAAL;MACH;;MACD,IAAMoF,oBAAoB,GAAG,KAAKzF,cAAL,CAAoBuF,MAApB,CAA2BJ,kBAA3B,EAA+C,KAA/C,CAA7B;;MACA,IAAIM,oBAAJ,EAA0B;QACtB,KAAKnF,sBAAL;MACH;;MACD,OAAOgF,kBAAkB,IAAIE,oBAAtB,IAA8CC,oBAArD;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,2BAAkBzG,UAAlB,EAA8B;MAC1B,KAAK2E,KAAL,GAAa,EAAb;;MACA,IAAIzX,YAAY,CAAC,KAAK8S,UAAN,CAAhB,EAAmC;QAC/B,KAAKA,UAAL,CAAgBgC,UAAhB,CAA2B,IAA3B;MACH,CAJyB,CAK1B;;;MACA,IAAI,KAAKT,yBAAT,EAAoC;QAChC,KAAKA,yBAAL,CAA+BmF,WAA/B;;QACA,KAAKnF,yBAAL,GAAiC,IAAjC;MACH;;MACD,IAAI,CAACvB,UAAL,EAAiB;QACb,IAAI,KAAKO,WAAT,EAAsB;UAClB,KAAKA,WAAL,CAAiBtL,IAAjB,CAAsB,EAAtB;QACH;;QACD,KAAKiL,UAAL,CAAgB7C,aAAhB,CAA8ByE,KAA9B;MACH;;MACD,KAAK/B,WAAL,GAAmBC,UAAnB;IACH;IACD;;;;WACA,iCAAwB;MAAA;;MACpB;MACA,IAAI,CAAC,KAAKA,UAAV,EAAsB;QAClB;MACH;;MACD,IAAI2G,UAAJ;;MACA,IAAIzZ,YAAY,CAAC,KAAK8S,UAAN,CAAhB,EAAmC;QAC/B2G,UAAU,GAAG,KAAK3G,UAAL,CAAgB4G,OAAhB,CAAwB,IAAxB,CAAb;MACH,CAFD,MAGK,IAAI/X,YAAY,CAAC,KAAKmR,UAAN,CAAhB,EAAmC;QACpC2G,UAAU,GAAG,KAAK3G,UAAlB;MACH,CAFI,MAGA,IAAI5F,KAAK,CAACyM,OAAN,CAAc,KAAK7G,UAAnB,CAAJ,EAAoC;QACrC2G,UAAU,GAAG7X,EAAE,CAAC,KAAKkR,UAAN,CAAf;MACH;;MACD,IAAI2G,UAAU,KAAKlV,SAAf,KAA6B,OAAOmO,SAAP,KAAqB,WAArB,IAAoCA,SAAjE,CAAJ,EAAiF;QAC7E,MAAM9C,8BAA8B,EAApC;MACH;;MACD,KAAKyE,yBAAL,GAAiCoF,UAAU,CACtC5S,IAD4B,CACvBhF,SAAS,CAAC,KAAKoP,UAAN,CADc,EAE5BnK,SAF4B,CAElB,UAAA0I,IAAI,EAAI;QACnB,OAAI,CAACiI,KAAL,GAAajI,IAAI,IAAI,EAArB;;QACA,OAAI,CAAC+H,UAAL;MACH,CALgC,CAAjC;IAMH;IACD;AACJ;AACA;AACA;;;;WACI,kCAAyB;MAAA;;MACrB;MACA,IAAI,KAAK/C,gBAAL,CAAsBrE,aAAtB,CAAoCpJ,MAApC,GAA6C,CAAjD,EAAoD;QAChD,KAAKyN,gBAAL,CAAsBrE,aAAtB,CAAoCyE,KAApC;MACH;;MACD,KAAKf,cAAL,CAAoBa,OAApB,CAA4B,UAACC,GAAD,EAAMnK,CAAN;QAAA,OAAY,OAAI,CAACoP,UAAL,CAAgB,OAAI,CAACpF,gBAArB,EAAuCG,GAAvC,EAA4CnK,CAA5C,CAAZ;MAAA,CAA5B;;MACA,KAAKqP,2BAAL;IACH;IACD;AACJ;AACA;AACA;;;;WACI,kCAAyB;MAAA;;MACrB;MACA,IAAI,KAAKpF,gBAAL,CAAsBtE,aAAtB,CAAoCpJ,MAApC,GAA6C,CAAjD,EAAoD;QAChD,KAAK0N,gBAAL,CAAsBtE,aAAtB,CAAoCyE,KAApC;MACH;;MACD,KAAKd,cAAL,CAAoBY,OAApB,CAA4B,UAACC,GAAD,EAAMnK,CAAN;QAAA,OAAY,OAAI,CAACoP,UAAL,CAAgB,OAAI,CAACnF,gBAArB,EAAuCE,GAAvC,EAA4CnK,CAA5C,CAAZ;MAAA,CAA5B;;MACA,KAAKsP,2BAAL;IACH;IACD;;;;WACA,gCAAuB3P,IAAvB,EAA6BwL,MAA7B,EAAqC;MAAA;;MACjC,IAAM2C,UAAU,GAAGpL,KAAK,CAACzL,IAAN,CAAWkU,MAAM,CAAChO,OAAP,IAAkB,EAA7B,EAAiC0E,GAAjC,CAAqC,UAAA0N,UAAU,EAAI;QAClE,IAAMjV,SAAS,GAAG,OAAI,CAACoM,iBAAL,CAAuB6E,GAAvB,CAA2BgE,UAA3B,CAAlB;;QACA,IAAI,CAACjV,SAAD,KAAe,OAAO4N,SAAP,KAAqB,WAArB,IAAoCA,SAAnD,CAAJ,EAAmE;UAC/D,MAAMxD,0BAA0B,CAAC6K,UAAD,CAAhC;QACH;;QACD,OAAOjV,SAAP;MACH,CANkB,CAAnB;MAOA,IAAM8F,iBAAiB,GAAG0N,UAAU,CAACjM,GAAX,CAAe,UAAAvH,SAAS;QAAA,OAAIA,SAAS,CAAC6R,MAAd;MAAA,CAAxB,CAA1B;MACA,IAAM9L,eAAe,GAAGyN,UAAU,CAACjM,GAAX,CAAe,UAAAvH,SAAS;QAAA,OAAIA,SAAS,CAACL,SAAd;MAAA,CAAxB,CAAxB;;MACA,KAAKmS,aAAL,CAAmBoD,mBAAnB,CAAuC7P,IAAvC,EAA6CS,iBAA7C,EAAgEC,eAAhE,EAAiF,CAAC,KAAKqH,YAAN,IAAsB,KAAKN,2BAA5G;IACH;IACD;;;;WACA,0BAAiBqI,SAAjB,EAA4B;MACxB,IAAMC,YAAY,GAAG,EAArB;;MACA,KAAK,IAAI1P,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyP,SAAS,CAAC9J,aAAV,CAAwBpJ,MAA5C,EAAoDyD,CAAC,EAArD,EAAyD;QACrD,IAAM2P,OAAO,GAAGF,SAAS,CAAC9J,aAAV,CAAwB4F,GAAxB,CAA4BvL,CAA5B,CAAhB;QACA0P,YAAY,CAACzT,IAAb,CAAkB0T,OAAO,CAACC,SAAR,CAAkB,CAAlB,CAAlB;MACH;;MACD,OAAOF,YAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,qBAAY1K,IAAZ,EAAkBiE,SAAlB,EAA6B;MACzB,IAAI,KAAKM,QAAL,CAAchN,MAAd,IAAwB,CAA5B,EAA+B;QAC3B,OAAO,CAAC,KAAKgN,QAAL,CAAc,CAAd,CAAD,CAAP;MACH;;MACD,IAAImE,OAAO,GAAG,EAAd;;MACA,IAAI,KAAKc,qBAAT,EAAgC;QAC5Bd,OAAO,GAAG,KAAKnE,QAAL,CAAc+E,MAAd,CAAqB,UAAAnE,GAAG;UAAA,OAAI,CAACA,GAAG,CAACoE,IAAL,IAAapE,GAAG,CAACoE,IAAJ,CAAStF,SAAT,EAAoBjE,IAApB,CAAjB;QAAA,CAAxB,CAAV;MACH,CAFD,MAGK;QACD,IAAImG,MAAM,GAAG,KAAK5B,QAAL,CAAclM,IAAd,CAAmB,UAAA8M,GAAG;UAAA,OAAIA,GAAG,CAACoE,IAAJ,IAAYpE,GAAG,CAACoE,IAAJ,CAAStF,SAAT,EAAoBjE,IAApB,CAAhB;QAAA,CAAtB,KAAoE,KAAKqF,cAAtF;;QACA,IAAIc,MAAJ,EAAY;UACRuC,OAAO,CAACzR,IAAR,CAAakP,MAAb;QACH;MACJ;;MACD,IAAI,CAACuC,OAAO,CAACnR,MAAT,KAAoB,OAAO2L,SAAP,KAAqB,WAArB,IAAoCA,SAAxD,CAAJ,EAAwE;QACpE,MAAMnD,kCAAkC,CAACC,IAAD,CAAxC;MACH;;MACD,OAAO0I,OAAP;IACH;;;WACD,8BAAqBF,SAArB,EAAgCzL,KAAhC,EAAuC;MACnC,IAAMoJ,MAAM,GAAGqC,SAAS,CAACrC,MAAzB;MACA,IAAMF,OAAO,GAAG;QAAEO,SAAS,EAAEgC,SAAS,CAACxI;MAAvB,CAAhB;MACA,OAAO;QACHlG,WAAW,EAAEqM,MAAM,CAAC7S,QADjB;QAEH2S,OAAO,EAAPA,OAFG;QAGHlJ,KAAK,EAALA;MAHG,CAAP;IAKH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,oBAAW8N,MAAX,EAAmB1E,MAAnB,EAA2BpJ,KAA3B,EAAgD;MAAA,IAAdkJ,OAAc,uEAAJ,EAAI;MAC5C;MACA,IAAM6E,IAAI,GAAGD,MAAM,CAAClK,aAAP,CAAqBoK,kBAArB,CAAwC5E,MAAM,CAAC7S,QAA/C,EAAyD2S,OAAzD,EAAkElJ,KAAlE,CAAb;;MACA,KAAKmJ,0BAAL,CAAgCC,MAAhC,EAAwCF,OAAxC;;MACA,OAAO6E,IAAP;IACH;;;WACD,oCAA2B3E,MAA3B,EAAmCF,OAAnC,EAA4C;MAAA,4CACf,KAAK+E,iBAAL,CAAuB7E,MAAvB,CADe;MAAA;;MAAA;QACxC,uDAAyD;UAAA,IAAhD8E,YAAgD;;UACrD,IAAIhS,aAAa,CAACE,oBAAlB,EAAwC;YACpCF,aAAa,CAACE,oBAAd,CAAmCD,cAAnC,CAAkD6R,kBAAlD,CAAqEE,YAArE,EAAmFhF,OAAnF;UACH;QACJ;MALuC;QAAA;MAAA;QAAA;MAAA;;MAMxC,KAAK/E,kBAAL,CAAwBgK,YAAxB;IACH;IACD;AACJ;AACA;AACA;;;;WACI,kCAAyB;MACrB,IAAMvK,aAAa,GAAG,KAAK6C,UAAL,CAAgB7C,aAAtC;;MACA,KAAK,IAAIwK,WAAW,GAAG,CAAlB,EAAqBC,KAAK,GAAGzK,aAAa,CAACpJ,MAAhD,EAAwD4T,WAAW,GAAGC,KAAtE,EAA6ED,WAAW,EAAxF,EAA4F;QACxF,IAAMR,OAAO,GAAGhK,aAAa,CAAC4F,GAAd,CAAkB4E,WAAlB,CAAhB;QACA,IAAMlF,OAAO,GAAG0E,OAAO,CAAC1E,OAAxB;QACAA,OAAO,CAACmF,KAAR,GAAgBA,KAAhB;QACAnF,OAAO,CAACoF,KAAR,GAAgBF,WAAW,KAAK,CAAhC;QACAlF,OAAO,CAACqF,IAAR,GAAeH,WAAW,KAAKC,KAAK,GAAG,CAAvC;QACAnF,OAAO,CAACsF,IAAR,GAAeJ,WAAW,GAAG,CAAd,KAAoB,CAAnC;QACAlF,OAAO,CAACuF,GAAR,GAAc,CAACvF,OAAO,CAACsF,IAAvB;;QACA,IAAI,KAAK/B,qBAAT,EAAgC;UAC5BvD,OAAO,CAAChC,SAAR,GAAoB,KAAKsB,WAAL,CAAiB4F,WAAjB,EAA8BlH,SAAlD;UACAgC,OAAO,CAACkF,WAAR,GAAsBA,WAAtB;QACH,CAHD,MAIK;UACDlF,OAAO,CAAClJ,KAAR,GAAgB,KAAKwI,WAAL,CAAiB4F,WAAjB,EAA8BlH,SAA9C;QACH;MACJ;IACJ;IACD;;;;WACA,2BAAkBkC,MAAlB,EAA0B;MAAA;;MACtB,IAAI,CAACA,MAAD,IAAW,CAACA,MAAM,CAAChO,OAAvB,EAAgC;QAC5B,OAAO,EAAP;MACH;;MACD,OAAOuF,KAAK,CAACzL,IAAN,CAAWkU,MAAM,CAAChO,OAAlB,EAA2B,UAAAsT,QAAQ,EAAI;QAC1C,IAAMjT,MAAM,GAAG,OAAI,CAACkJ,iBAAL,CAAuB6E,GAAvB,CAA2BkF,QAA3B,CAAf;;QACA,IAAI,CAACjT,MAAD,KAAY,OAAO0K,SAAP,KAAqB,WAArB,IAAoCA,SAAhD,CAAJ,EAAgE;UAC5D,MAAMxD,0BAA0B,CAAC+L,QAAD,CAAhC;QACH;;QACD,OAAOtF,MAAM,CAACuF,mBAAP,CAA2BlT,MAA3B,CAAP;MACH,CANM,CAAP;IAOH;IACD;;;;WACA,qCAA4B;MACxB,IAAMmT,gBAAgB,GAAG,KAAKvK,SAAL,CAAewK,sBAAf,EAAzB;;MACA,IAAMC,QAAQ,GAAG,CACb;QAAEC,GAAG,EAAE,OAAP;QAAgBC,OAAO,EAAE,CAAC,KAAK/G,gBAAN;MAAzB,CADa,EAEb;QAAE8G,GAAG,EAAE,OAAP;QAAgBC,OAAO,EAAE,CAAC,KAAKvI,UAAN,EAAkB,KAAKwI,gBAAvB;MAAzB,CAFa,EAGb;QAAEF,GAAG,EAAE,OAAP;QAAgBC,OAAO,EAAE,CAAC,KAAK9G,gBAAN;MAAzB,CAHa,CAAjB;;MAKA,8BAAsB4G,QAAtB,iCAAgC;QAA3B,IAAMI,OAAO,iBAAb;;QACD,IAAM/Q,OAAO,GAAG,KAAKkG,SAAL,CAAe8K,aAAf,CAA6BD,OAAO,CAACH,GAArC,CAAhB;;QACA5Q,OAAO,CAAC7E,YAAR,CAAqB,MAArB,EAA6B,UAA7B;;QAF4B,6CAGP4V,OAAO,CAACF,OAHD;QAAA;;QAAA;UAG5B,0DAAsC;YAAA,IAA3BlB,MAA2B;YAClC3P,OAAO,CAACiR,WAAR,CAAoBtB,MAAM,CAACtV,UAAP,CAAkBC,aAAtC;UACH;QAL2B;UAAA;QAAA;UAAA;QAAA;;QAM5BmW,gBAAgB,CAACQ,WAAjB,CAA6BjR,OAA7B;MACH,CAduB,CAexB;;;MACA,KAAKlF,WAAL,CAAiBR,aAAjB,CAA+B2W,WAA/B,CAA2CR,gBAA3C;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,gCAAuB;MACnB,KAAK9H,WAAL,CAAiBtL,IAAjB,CAAsB,EAAtB;;MACA,KAAKiL,UAAL,CAAgB7C,aAAhB,CAA8ByE,KAA9B;;MACA,KAAK2C,UAAL;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,8BAAqB;MACjB,IAAMqE,kBAAkB,GAAG,SAArBA,kBAAqB,CAAC1C,GAAD,EAAM2C,CAAN,EAAY;QACnC,OAAO3C,GAAG,IAAI2C,CAAC,CAACnZ,gBAAF,EAAd;MACH,CAFD,CADiB,CAIjB;MACA;MACA;;;MACA,IAAI,KAAKmR,cAAL,CAAoBwF,MAApB,CAA2BuC,kBAA3B,EAA+C,KAA/C,CAAJ,EAA2D;QACvD,KAAK/B,2BAAL;MACH;;MACD,IAAI,KAAK/F,cAAL,CAAoBuF,MAApB,CAA2BuC,kBAA3B,EAA+C,KAA/C,CAAJ,EAA2D;QACvD,KAAK9B,2BAAL;MACH;;MACD,IAAI5M,KAAK,CAACzL,IAAN,CAAW,KAAKyP,iBAAL,CAAuBoG,MAAvB,EAAX,EAA4C+B,MAA5C,CAAmDuC,kBAAnD,EAAuE,KAAvE,CAAJ,EAAmF;QAC/E,KAAKjK,4BAAL,GAAoC,IAApC;QACA,KAAKuB,wBAAL;MACH;IACJ;IACD;AACJ;AACA;AACA;AACA;;;;WACI,8BAAqB;MAAA;;MACjB,IAAMtJ,SAAS,GAAG,KAAK+G,IAAL,GAAY,KAAKA,IAAL,CAAU3M,KAAtB,GAA8B,KAAhD;MACA,KAAK4S,aAAL,GAAqB,IAAInN,YAAJ,CAAiB,KAAKC,kBAAtB,EAA0C,KAAKoI,cAA/C,EAA+DlI,SAA/D,EAA0E,KAAKC,wBAA/E,EAAyG,KAAKgH,SAAL,CAAeiL,SAAxH,EAAmI,KAAK/J,4BAAxI,EAAsK,KAAKf,0BAA3K,CAArB;MACA,CAAC,KAAKL,IAAL,GAAY,KAAKA,IAAL,CAAU+C,MAAtB,GAA+B9R,EAAE,EAAlC,EACKiF,IADL,CACUhF,SAAS,CAAC,KAAKoP,UAAN,CADnB,EAEKnK,SAFL,CAEe,UAAA9C,KAAK,EAAI;QACpB,OAAI,CAAC4S,aAAL,CAAmBhN,SAAnB,GAA+B5F,KAA/B;;QACA,OAAI,CAACkP,wBAAL;MACH,CALD;IAMH;IACD;;;;WACA,qBAAY6I,KAAZ,EAAmB;MAAA;;MACf,OAAOA,KAAK,CAACjD,MAAN,CAAa,UAAAvD,IAAI;QAAA,OAAI,CAACA,IAAI,CAAC9R,MAAN,IAAgB8R,IAAI,CAAC9R,MAAL,KAAgB,OAApC;MAAA,CAAjB,CAAP;IACH;IACD;;;;WACA,4BAAmB;MACf,IAAM4S,SAAS,GAAG,KAAKC,gBAAL,IAAyB,KAAK0F,UAAhD;;MACA,IAAI,CAAC3F,SAAL,EAAgB;QACZ;MACH;;MACD,IAAM4F,UAAU,GAAG,KAAKjJ,UAAL,CAAgB7C,aAAhB,CAA8BpJ,MAA9B,KAAyC,CAA5D;;MACA,IAAIkV,UAAU,KAAK,KAAKjK,mBAAxB,EAA6C;QACzC;MACH;;MACD,IAAMkK,SAAS,GAAG,KAAKV,gBAAL,CAAsBrL,aAAxC;;MACA,IAAI8L,UAAJ,EAAgB;QACZ,IAAM3B,IAAI,GAAG4B,SAAS,CAAC3B,kBAAV,CAA6BlE,SAAS,CAAC/M,WAAvC,CAAb;QACA,IAAM6S,QAAQ,GAAG7B,IAAI,CAACF,SAAL,CAAe,CAAf,CAAjB,CAFY,CAGZ;QACA;;QACA,IAAIE,IAAI,CAACF,SAAL,CAAerT,MAAf,KAA0B,CAA1B,IAA+B,CAACoV,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAAC1W,QAA9D,MAA4E,KAAKmL,SAAL,CAAerG,YAA9H,EAA4I;UACxI4R,QAAQ,CAACtW,YAAT,CAAsB,MAAtB,EAA8B,KAA9B;UACAsW,QAAQ,CAAClX,SAAT,CAAmBC,GAAnB,CAAuBmR,SAAS,CAAC9M,iBAAjC;QACH;MACJ,CATD,MAUK;QACD2S,SAAS,CAACtH,KAAV;MACH;;MACD,KAAK5C,mBAAL,GAA2BiK,UAA3B;IACH;;;;;;AAELxL,QAAQ,CAAC1N,IAAT;EAAA,iBAA0G0N,QAA1G,EAj4DkGrQ,EAi4DlG,mBAAoIA,EAAE,CAAC+H,eAAvI,GAj4DkG/H,EAi4DlG,mBAAmKA,EAAE,CAACgc,iBAAtK,GAj4DkGhc,EAi4DlG,mBAAoMA,EAAE,CAACgF,UAAvM,GAj4DkGhF,EAi4DlG,mBAA8N,MAA9N,GAj4DkGA,EAi4DlG,mBAAkQ2B,EAAE,CAACsa,cAArQ,MAj4DkGjc,EAi4DlG,mBAAgTD,QAAhT,GAj4DkGC,EAi4DlG,mBAAqU4B,EAAE,CAACsa,QAAxU,GAj4DkGlc,EAi4DlG,mBAA6VN,uBAA7V,GAj4DkGM,EAi4DlG,mBAAiY8F,0BAAjY,GAj4DkG9F,EAi4DlG,mBAAwa6B,EAAE,CAACsa,aAA3a,GAj4DkGnc,EAi4DlG,mBAAqc2P,2BAArc,OAj4DkG3P,EAi4DlG,mBAA6gBA,EAAE,CAACa,MAAhhB;AAAA;;AACAwP,QAAQ,CAAC3H,IAAT,kBAl4DkG1I,EAk4DlG;EAAA,MAA8FqQ,QAA9F;EAAA;EAAA;IAAA;MAl4DkGrQ,EAk4DlG,0BAMuEiJ,YANvE;MAl4DkGjJ,EAk4DlG,0BAM2JoD,YAN3J;MAl4DkGpD,EAk4DlG,0BAM4OoI,SAN5O;MAl4DkGpI,EAk4DlG,0BAMgU6H,eANhU;MAl4DkG7H,EAk4DlG,0BAM0Z8H,eAN1Z;IAAA;;IAAA;MAAA;;MAl4DkG9H,EAk4DlG,qBAl4DkGA,EAk4DlG;MAl4DkGA,EAk4DlG,qBAl4DkGA,EAk4DlG;MAl4DkGA,EAk4DlG,qBAl4DkGA,EAk4DlG;MAl4DkGA,EAk4DlG,qBAl4DkGA,EAk4DlG;MAl4DkGA,EAk4DlG,qBAl4DkGA,EAk4DlG;IAAA;EAAA;EAAA;IAAA;MAl4DkGA,EAk4DlG,aAMqgB8P,aANrgB;MAl4DkG9P,EAk4DlG,aAMmnBgQ,eANnnB;MAl4DkGhQ,EAk4DlG,aAMmuBiQ,eANnuB;MAl4DkGjQ,EAk4DlG,aAMm1BkQ,eANn1B;IAAA;;IAAA;MAAA;;MAl4DkGlQ,EAk4DlG,qBAl4DkGA,EAk4DlG;MAl4DkGA,EAk4DlG,qBAl4DkGA,EAk4DlG;MAl4DkGA,EAk4DlG,qBAl4DkGA,EAk4DlG;MAl4DkGA,EAk4DlG,qBAl4DkGA,EAk4DlG;IAAA;EAAA;EAAA;EAAA;EAAA;IAAA;MAl4DkGA,EAk4DlG;IAAA;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA;IAAA;EAAA;EAAA;EAAA,WAl4DkGA,EAk4DlG,oBAAub,CAC/a;IAAE+D,OAAO,EAAExB,SAAX;IAAsByB,WAAW,EAAEqM;EAAnC,CAD+a,EAE/a;IAAEtM,OAAO,EAAErE,uBAAX;IAAoCmQ,QAAQ,EAAEhQ;EAA9C,CAF+a,EAG/a;IAAEkE,OAAO,EAAE+B,0BAAX;IAAuC+J,QAAQ,EAAE9J;EAAjD,CAH+a,EAI/a;EACA;IAAEhC,OAAO,EAAE4L,2BAAX;IAAwCyM,QAAQ,EAAE;EAAlD,CAL+a,CAAvb;EAAA;EAAA;EAAA;EAAA;EAAA;IAAA;MAl4DkGpc,EAk4DlG;MAl4DkGA,EAw4D21B,gBAN77B;MAl4DkGA,EAw4D24B,mBAN7+B;MAl4DkGA,EAw4Di8B,2CANniC;IAAA;EAAA;EAAA,eAMq1C8P,aANr1C,EAM05CE,eAN15C,EAMu+CC,eANv+C,EAMojDC,eANpjD;EAAA;EAAA;AAAA;;AAOA;EAAA,mDAz4DkGlQ,EAy4DlG,mBAAgGqQ,QAAhG,EAAsH,CAAC;IAC3GvN,IAAI,EAAEtC,SADqG;IAE3GyB,IAAI,EAAE,CAAC;MAAEc,QAAQ,EAAE,6BAAZ;MAA2CsZ,QAAQ,EAAE,UAArD;MAAiE3Z,QAAQ,EAAEyN,kBAA3E;MAA+FlL,IAAI,EAAE;QAChG,SAAS,WADuF;QAEhG,kCAAkC;MAF8D,CAArG;MAGI4D,aAAa,EAAEnI,iBAAiB,CAACoI,IAHrC;MAG2CH,eAAe,EAAElI,uBAAuB,CAACmI,OAHpF;MAG6F1E,SAAS,EAAE,CACnG;QAAEH,OAAO,EAAExB,SAAX;QAAsByB,WAAW,EAAEqM;MAAnC,CADmG,EAEnG;QAAEtM,OAAO,EAAErE,uBAAX;QAAoCmQ,QAAQ,EAAEhQ;MAA9C,CAFmG,EAGnG;QAAEkE,OAAO,EAAE+B,0BAAX;QAAuC+J,QAAQ,EAAE9J;MAAjD,CAHmG,EAInG;MACA;QAAEhC,OAAO,EAAE4L,2BAAX;QAAwCyM,QAAQ,EAAE;MAAlD,CALmG,CAHxG;MASIE,MAAM,EAAE,CAAC,6CAAD;IATZ,CAAD;EAFqG,CAAD,CAAtH,EAY4B,YAAY;IAChC,OAAO,CAAC;MAAExZ,IAAI,EAAE9C,EAAE,CAAC+H;IAAX,CAAD,EAA+B;MAAEjF,IAAI,EAAE9C,EAAE,CAACgc;IAAX,CAA/B,EAA+D;MAAElZ,IAAI,EAAE9C,EAAE,CAACgF;IAAX,CAA/D,EAAwF;MAAElC,IAAI,EAAEqB,SAAR;MAAmBC,UAAU,EAAE,CAAC;QAC/GtB,IAAI,EAAEhC,SADyG;QAE/GmB,IAAI,EAAE,CAAC,MAAD;MAFyG,CAAD;IAA/B,CAAxF,EAGW;MAAEa,IAAI,EAAEnB,EAAE,CAACsa,cAAX;MAA2B7X,UAAU,EAAE,CAAC;QAC1CtB,IAAI,EAAE1C;MADoC,CAAD;IAAvC,CAHX,EAKW;MAAE0C,IAAI,EAAEqB,SAAR;MAAmBC,UAAU,EAAE,CAAC;QAClCtB,IAAI,EAAE3C,MAD4B;QAElC8B,IAAI,EAAE,CAAClC,QAAD;MAF4B,CAAD;IAA/B,CALX,EAQW;MAAE+C,IAAI,EAAElB,EAAE,CAACsa;IAAX,CARX,EAQkC;MAAEpZ,IAAI,EAAEqB,SAAR;MAAmBC,UAAU,EAAE,CAAC;QACzDtB,IAAI,EAAE3C,MADmD;QAEzD8B,IAAI,EAAE,CAACvC,uBAAD;MAFmD,CAAD;IAA/B,CARlC,EAWW;MAAEoD,IAAI,EAAEiD,wBAAR;MAAkC3B,UAAU,EAAE,CAAC;QACjDtB,IAAI,EAAE3C,MAD2C;QAEjD8B,IAAI,EAAE,CAAC6D,0BAAD;MAF2C,CAAD;IAA9C,CAXX,EAcW;MAAEhD,IAAI,EAAEjB,EAAE,CAACsa;IAAX,CAdX,EAcuC;MAAErZ,IAAI,EAAEqB,SAAR;MAAmBC,UAAU,EAAE,CAAC;QAC9DtB,IAAI,EAAE1C;MADwD,CAAD,EAE9D;QACC0C,IAAI,EAAE/B;MADP,CAF8D,EAI9D;QACC+B,IAAI,EAAE3C,MADP;QAEC8B,IAAI,EAAE,CAAC0N,2BAAD;MAFP,CAJ8D;IAA/B,CAdvC,EAqBW;MAAE7M,IAAI,EAAE9C,EAAE,CAACa,MAAX;MAAmBuD,UAAU,EAAE,CAAC;QAClCtB,IAAI,EAAE1C;MAD4B,CAAD;IAA/B,CArBX,CAAP;EAwBH,CArCL,EAqCuB;IAAEgT,OAAO,EAAE,CAAC;MACnBtQ,IAAI,EAAEzC;IADa,CAAD,CAAX;IAEPqS,UAAU,EAAE,CAAC;MACb5P,IAAI,EAAEzC;IADO,CAAD,CAFL;IAIPuY,qBAAqB,EAAE,CAAC;MACxB9V,IAAI,EAAEzC;IADkB,CAAD,CAJhB;IAMPkc,WAAW,EAAE,CAAC;MACdzZ,IAAI,EAAEzC;IADQ,CAAD,CANN;IAQP0R,cAAc,EAAE,CAAC;MACjBjP,IAAI,EAAE9B;IADW,CAAD,CART;IAUP4R,UAAU,EAAE,CAAC;MACb9P,IAAI,EAAE7B,SADO;MAEbgB,IAAI,EAAE,CAAC6N,aAAD,EAAgB;QAAE0M,MAAM,EAAE;MAAV,CAAhB;IAFO,CAAD,CAVL;IAaPpI,gBAAgB,EAAE,CAAC;MACnBtR,IAAI,EAAE7B,SADa;MAEnBgB,IAAI,EAAE,CAAC+N,eAAD,EAAkB;QAAEwM,MAAM,EAAE;MAAV,CAAlB;IAFa,CAAD,CAbX;IAgBPnI,gBAAgB,EAAE,CAAC;MACnBvR,IAAI,EAAE7B,SADa;MAEnBgB,IAAI,EAAE,CAACgO,eAAD,EAAkB;QAAEuM,MAAM,EAAE;MAAV,CAAlB;IAFa,CAAD,CAhBX;IAmBPpB,gBAAgB,EAAE,CAAC;MACnBtY,IAAI,EAAE7B,SADa;MAEnBgB,IAAI,EAAE,CAACiO,eAAD,EAAkB;QAAEsM,MAAM,EAAE;MAAV,CAAlB;IAFa,CAAD,CAnBX;IAsBPnE,kBAAkB,EAAE,CAAC;MACrBvV,IAAI,EAAE5B,eADe;MAErBe,IAAI,EAAE,CAACmB,YAAD,EAAe;QAAEqZ,WAAW,EAAE;MAAf,CAAf;IAFe,CAAD,CAtBb;IAyBPjE,eAAe,EAAE,CAAC;MAClB1V,IAAI,EAAE5B,eADY;MAElBe,IAAI,EAAE,CAACmG,SAAD,EAAY;QAAEqU,WAAW,EAAE;MAAf,CAAZ;IAFY,CAAD,CAzBV;IA4BPnE,qBAAqB,EAAE,CAAC;MACxBxV,IAAI,EAAE5B,eADkB;MAExBe,IAAI,EAAE,CAAC4F,eAAD,EAAkB;QAChB4U,WAAW,EAAE;MADG,CAAlB;IAFkB,CAAD,CA5BhB;IAiCPlE,qBAAqB,EAAE,CAAC;MACxBzV,IAAI,EAAE5B,eADkB;MAExBe,IAAI,EAAE,CAAC6F,eAAD,EAAkB;QAChB2U,WAAW,EAAE;MADG,CAAlB;IAFkB,CAAD,CAjChB;IAsCPb,UAAU,EAAE,CAAC;MACb9Y,IAAI,EAAExC,YADO;MAEb2B,IAAI,EAAE,CAACgH,YAAD;IAFO,CAAD;EAtCL,CArCvB;AAAA;AA+EA;;;AACA,SAASkP,gBAAT,CAA0BuE,KAA1B,EAAiCjF,GAAjC,EAAsC;EAClC,OAAOiF,KAAK,CAACC,MAAN,CAAa7P,KAAK,CAACzL,IAAN,CAAWoW,GAAX,CAAb,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMmF,a;EACF,wBACA;EACA;EACA;EACAvZ,MAJA,EAIQwZ,QAJR,EAIkB;IAAA;;IACd,KAAKxZ,MAAL,GAAcA,MAAd;IACA,KAAKwZ,QAAL,GAAgBA,QAAhB;IACA;;IACA,KAAKC,OAAL,GAAe,OAAf;IACA,KAAKD,QAAL,GAAgBA,QAAQ,IAAI,EAA5B;EACH;EACD;;;;;SACA,eAAW;MACP,OAAO,KAAKtZ,KAAZ;IACH,C;SACD,aAASC,IAAT,EAAe;MACX,KAAKD,KAAL,GAAaC,IAAb,CADW,CAEX;MACA;;MACA,KAAKuZ,kBAAL;IACH;;;WACD,oBAAW;MACP,KAAKA,kBAAL;;MACA,IAAI,KAAKC,UAAL,KAAoB7Y,SAAxB,EAAmC;QAC/B,KAAK6Y,UAAL,GAAkB,KAAKC,wBAAL,EAAlB;MACH;;MACD,IAAI,CAAC,KAAKC,YAAV,EAAwB;QACpB,KAAKA,YAAL,GACI,KAAKL,QAAL,CAAcM,mBAAd,IAAsC,UAAC/N,IAAD,EAAO5L,IAAP;UAAA,OAAgB4L,IAAI,CAAC5L,IAAD,CAApB;QAAA,CAD1C;MAEH;;MACD,IAAI,KAAKH,MAAT,EAAiB;QACb;QACA;QACA;QACA,KAAKqB,SAAL,CAAeJ,IAAf,GAAsB,KAAKA,IAA3B;QACA,KAAKI,SAAL,CAAeH,UAAf,GAA4B,KAAKA,UAAjC;;QACA,KAAKlB,MAAL,CAAY+Z,YAAZ,CAAyB,KAAK1Y,SAA9B;MACH,CAPD,MAQK,IAAI,OAAO4N,SAAP,KAAqB,WAArB,IAAoCA,SAAxC,EAAmD;QACpD,MAAM7C,yCAAyC,EAA/C;MACH;IACJ;;;WACD,uBAAc;MACV,IAAI,KAAKpM,MAAT,EAAiB;QACb,KAAKA,MAAL,CAAYga,eAAZ,CAA4B,KAAK3Y,SAAjC;MACH;IACJ;IACD;AACJ;AACA;AACA;;;;WACI,oCAA2B;MACvB,IAAMlB,IAAI,GAAG,KAAKA,IAAlB;;MACA,IAAI,CAACA,IAAD,KAAU,OAAO8O,SAAP,KAAqB,WAArB,IAAoCA,SAA9C,CAAJ,EAA8D;QAC1D,MAAM5C,kCAAkC,EAAxC;MACH;;MACD,IAAI,KAAKmN,QAAL,IAAiB,KAAKA,QAAL,CAAcS,0BAAnC,EAA+D;QAC3D,OAAO,KAAKT,QAAL,CAAcS,0BAAd,CAAyC9Z,IAAzC,CAAP;MACH;;MACD,OAAOA,IAAI,CAAC,CAAD,CAAJ,CAAQ+Z,WAAR,KAAwB/Z,IAAI,CAACwI,KAAL,CAAW,CAAX,CAA/B;IACH;IACD;;;;WACA,8BAAqB;MACjB,IAAI,KAAKtH,SAAT,EAAoB;QAChB,KAAKA,SAAL,CAAelB,IAAf,GAAsB,KAAKA,IAA3B;MACH;IACJ;;;;;;AAELoZ,aAAa,CAACja,IAAd;EAAA,iBAA+Gia,aAA/G,EAljEkG5c,EAkjElG,mBAA8IqQ,QAA9I,MAljEkGrQ,EAkjElG,mBAAmLwC,mBAAnL;AAAA;;AACAoa,aAAa,CAAClU,IAAd,kBAnjEkG1I,EAmjElG;EAAA,MAAmG4c,aAAnG;EAAA;EAAA;IAAA;MAnjEkG5c,EAmjElG,aAAwToD,YAAxT;MAnjEkGpD,EAmjElG,aAAyZyC,UAAzZ;MAnjEkGzC,EAmjElG,aAA8fgD,gBAA9f;IAAA;;IAAA;MAAA;;MAnjEkGhD,EAmjElG,qBAnjEkGA,EAmjElG;MAnjEkGA,EAmjElG,qBAnjEkGA,EAmjElG;MAnjEkGA,EAmjElG,qBAnjEkGA,EAmjElG;IAAA;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA;EAAA;EAAA;EAAA;IAAA;MAnjEkGA,EAojE9F,8BADJ;MAnjEkGA,EAqjE5F,0DAFN;MAnjEkGA,EAwjE5F,0DALN;MAnjEkGA,EA2jE9F,wBARJ;IAAA;EAAA;EAAA,eAS+DyC,UAT/D,EASkIO,gBATlI,EASiNI,YATjN,EASyUsC,OATzU,EASmZX,aATnZ;EAAA;AAAA;;AAUA;EAAA,mDA7jEkG/E,EA6jElG,mBAAgG4c,aAAhG,EAA2H,CAAC;IAChH9Z,IAAI,EAAEtC,SAD0G;IAEhHyB,IAAI,EAAE,CAAC;MACCc,QAAQ,EAAE,iBADX;MAECL,QAAQ,gTAFT;MAYCmG,aAAa,EAAEnI,iBAAiB,CAACoI,IAZlC;MAaC;MACA;MACA;MACA;MACA;MACA;MACAH,eAAe,EAAElI,uBAAuB,CAACmI;IAnB1C,CAAD;EAF0G,CAAD,CAA3H,EAuB4B,YAAY;IAChC,OAAO,CAAC;MAAE9F,IAAI,EAAEuN,QAAR;MAAkBjM,UAAU,EAAE,CAAC;QACvBtB,IAAI,EAAE1C;MADiB,CAAD;IAA9B,CAAD,EAEW;MAAE0C,IAAI,EAAEqB,SAAR;MAAmBC,UAAU,EAAE,CAAC;QAClCtB,IAAI,EAAE1C;MAD4B,CAAD,EAElC;QACC0C,IAAI,EAAE3C,MADP;QAEC8B,IAAI,EAAE,CAACO,mBAAD;MAFP,CAFkC;IAA/B,CAFX,CAAP;EAQH,CAhCL,EAgCuB;IAAEgB,IAAI,EAAE,CAAC;MAChBV,IAAI,EAAEzC;IADU,CAAD,CAAR;IAEP2c,UAAU,EAAE,CAAC;MACbla,IAAI,EAAEzC;IADO,CAAD,CAFL;IAIP6c,YAAY,EAAE,CAAC;MACfpa,IAAI,EAAEzC;IADS,CAAD,CAJP;IAMPyc,OAAO,EAAE,CAAC;MACVha,IAAI,EAAEzC;IADI,CAAD,CANF;IAQPqE,SAAS,EAAE,CAAC;MACZ5B,IAAI,EAAE7B,SADM;MAEZgB,IAAI,EAAE,CAACmB,YAAD,EAAe;QAAEoZ,MAAM,EAAE;MAAV,CAAf;IAFM,CAAD,CARJ;IAWPlY,IAAI,EAAE,CAAC;MACPxB,IAAI,EAAE7B,SADC;MAEPgB,IAAI,EAAE,CAACQ,UAAD,EAAa;QAAE+Z,MAAM,EAAE;MAAV,CAAb;IAFC,CAAD,CAXC;IAcPjY,UAAU,EAAE,CAAC;MACbzB,IAAI,EAAE7B,SADO;MAEbgB,IAAI,EAAE,CAACe,gBAAD,EAAmB;QAAEwZ,MAAM,EAAE;MAAV,CAAnB;IAFO,CAAD;EAdL,CAhCvB;AAAA;AAmDA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMgB,qBAAqB,GAAG,CAC1BnN,QAD0B,EAE1BjI,SAF0B,EAG1B3F,UAH0B,EAI1B4F,aAJ0B,EAK1BrF,gBAL0B,EAM1BC,gBAN0B,EAO1BG,YAP0B,EAQ1BsC,OAR0B,EAS1BsD,MAT0B,EAU1BjE,aAV0B,EAW1BG,aAX0B,EAY1BuD,YAZ0B,EAa1BZ,eAb0B,EAc1BkB,YAd0B,EAe1BjB,eAf0B,EAgB1BgI,aAhB0B,EAiB1BE,eAjB0B,EAkB1BC,eAlB0B,EAmB1B2M,aAnB0B,EAoB1B3T,YApB0B,EAqB1B2G,cArB0B,EAsB1BM,eAtB0B,CAA9B;;IAwBMuN,c;;;;AAENA,cAAc,CAAC9a,IAAf;EAAA,iBAAgH8a,cAAhH;AAAA;;AACAA,cAAc,CAACC,IAAf,kBAlpEkG1d,EAkpElG;EAAA,MAAiHyd;AAAjH;AA2CAA,cAAc,CAACE,IAAf,kBA7rEkG3d,EA6rElG;EAAA,UAA2I8B,eAA3I;AAAA;;AACA;EAAA,mDA9rEkG9B,EA8rElG,mBAAgGyd,cAAhG,EAA4H,CAAC;IACjH3a,IAAI,EAAE3B,QAD2G;IAEjHc,IAAI,EAAE,CAAC;MACC2b,OAAO,EAAEJ,qBADV;MAECK,YAAY,EAAEL,qBAFf;MAGCM,OAAO,EAAE,CAAChc,eAAD;IAHV,CAAD;EAF2G,CAAD,CAA5H;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAAS2C,WAAT,EAAsB0C,UAAtB,EAAkCD,gBAAlC,EAAoD3E,SAApD,EAA+D4N,kBAA/D,EAAmFzK,OAAnF,EAA4FjD,UAA5F,EAAwG4F,aAAxG,EAAuHjF,YAAvH,EAAqI8B,aAArI,EAAoJjC,gBAApJ,EAAsK8F,YAAtK,EAAoLjB,eAApL,EAAqM/C,aAArM,EAAoN/B,gBAApN,EAAsOyF,YAAtO,EAAoPZ,eAApP,EAAqQoB,YAArQ,EAAmR2G,cAAnR,EAAmS5G,MAAnS,EAA2SZ,SAA3S,EAAsTiI,QAAtT,EAAgUoN,cAAhU,EAAgVb,aAAhV,EAA+V9M,aAA/V,EAA8WG,eAA9W,EAA+XD,eAA/X,EAAgZE,eAAhZ,EAAia9G,iBAAja,EAAobuG,2BAApb,EAAidtG,YAAjd,EAA+d7G,mBAA/d,EAAofsD,0BAApf,EAAghBC,wBAAhhB,EAA0iBJ,SAA1iB,EAAqjB5D,mBAArjB"},"metadata":{},"sourceType":"module"}
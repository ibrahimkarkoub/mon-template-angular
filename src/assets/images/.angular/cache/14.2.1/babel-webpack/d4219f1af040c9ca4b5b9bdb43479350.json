{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createClass from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { A, Z, ZERO, NINE, SPACE, HOME, END, ENTER, ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { Directive, InjectionToken, EventEmitter, forwardRef, ElementRef, Component, ChangeDetectionStrategy, Inject, Optional, Input, Output, ViewChild, ContentChild, HostBinding, NgModule } from '@angular/core';\nimport * as i8 from '@angular/forms';\nimport { FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\nimport * as i10 from '@angular/material/core';\nimport { _countGroupLabelsBeforeOption, MatOption } from '@angular/material/core';\nimport * as i11 from '@angular/material/form-field';\nimport { MatFormField } from '@angular/material/form-field';\nimport * as i9 from '@angular/material/select';\nimport { MatSelect } from '@angular/material/select';\nimport { BehaviorSubject, of, combineLatest, Subject } from 'rxjs';\nimport { switchMap, map, startWith, delay, takeUntil, take, filter, tap } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/scrolling';\nimport * as i2 from '@angular/material/checkbox';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport * as i3 from '@angular/material/progress-spinner';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport * as i4 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i5 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i6 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i7 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\n\nvar _c0 = [\"searchSelectInput\"];\nvar _c1 = [\"innerSelectSearch\"];\n\nfunction MatSelectSearchComponent_mat_checkbox_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-checkbox\", 9);\n    i0.ɵɵlistener(\"change\", function MatSelectSearchComponent_mat_checkbox_3_Template_mat_checkbox_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      var ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6._emitSelectAllBooleanToParent($event.checked));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r1.matFormField == null ? null : ctx_r1.matFormField.color)(\"checked\", ctx_r1.toggleAllCheckboxChecked)(\"indeterminate\", ctx_r1.toggleAllCheckboxIndeterminate)(\"matTooltip\", ctx_r1.toggleAllCheckboxTooltipMessage)(\"matTooltipPosition\", ctx_r1.toggleAllCheckboxTooltipPosition);\n  }\n}\n\nfunction MatSelectSearchComponent_mat_spinner_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 10);\n  }\n}\n\nfunction MatSelectSearchComponent_button_7_ng_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 1, [\"*ngIf\", \"clearIcon; else defaultIcon\"]);\n  }\n}\n\nfunction MatSelectSearchComponent_button_7_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"svgIcon\", ctx_r10.closeSvgIcon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", !ctx_r10.closeSvgIcon ? ctx_r10.closeIcon : null, \" \");\n  }\n}\n\nfunction MatSelectSearchComponent_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function MatSelectSearchComponent_button_7_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      var ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11._reset(true));\n    });\n    i0.ɵɵtemplate(1, MatSelectSearchComponent_button_7_ng_content_1_Template, 1, 0, \"ng-content\", 12);\n    i0.ɵɵtemplate(2, MatSelectSearchComponent_button_7_ng_template_2_Template, 2, 2, \"ng-template\", null, 13, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var _r9 = i0.ɵɵreference(3);\n\n    var ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.clearIcon)(\"ngIfElse\", _r9);\n  }\n}\n\nfunction MatSelectSearchComponent_div_9_ng_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 2, [\"*ngIf\", \"noEntriesFound; else defaultNoEntriesFound\"]);\n  }\n}\n\nfunction MatSelectSearchComponent_div_9_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    var ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵtextInterpolate(ctx_r15.noEntriesFoundLabel);\n  }\n}\n\nfunction MatSelectSearchComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, MatSelectSearchComponent_div_9_ng_content_1_Template, 1, 0, \"ng-content\", 12);\n    i0.ɵɵtemplate(2, MatSelectSearchComponent_div_9_ng_template_2_Template, 1, 1, \"ng-template\", null, 16, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var _r14 = i0.ɵɵreference(3);\n\n    var ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.noEntriesFound)(\"ngIfElse\", _r14);\n  }\n}\n\nvar _c2 = [[[\"\", 8, \"mat-select-search-custom-header-content\"]], [[\"\", \"ngxMatSelectSearchClear\", \"\"]], [[\"\", \"ngxMatSelectNoEntriesFound\", \"\"]]];\n\nvar _c3 = function _c3(a0, a1) {\n  return {\n    \"mat-select-search-inner-multiple\": a0,\n    \"mat-select-search-inner-toggle-all\": a1\n  };\n};\n\nvar _c4 = [\".mat-select-search-custom-header-content\", \"[ngxMatSelectSearchClear]\", \"[ngxMatSelectNoEntriesFound]\"];\n\nvar MatSelectSearchClearDirective = /*#__PURE__*/_createClass(function MatSelectSearchClearDirective() {\n  _classCallCheck(this, MatSelectSearchClearDirective);\n});\n\nMatSelectSearchClearDirective.ɵfac = function MatSelectSearchClearDirective_Factory(t) {\n  return new (t || MatSelectSearchClearDirective)();\n};\n\nMatSelectSearchClearDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatSelectSearchClearDirective,\n  selectors: [[\"\", \"ngxMatSelectSearchClear\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelectSearchClearDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxMatSelectSearchClear]'\n    }]\n  }], null, null);\n})();\n/** List of inputs of NgxMatSelectSearchComponent that can be configured with a global default. */\n\n\nvar configurableDefaultOptions = ['ariaLabel', 'clearSearchInput', 'closeIcon', 'closeSvgIcon', 'disableInitialFocus', 'disableScrollToActiveOnOptionsChanged', 'enableClearOnEscapePressed', 'hideClearSearchButton', 'noEntriesFoundLabel', 'placeholderLabel', 'preventHomeEndKeyPropagation', 'searching'];\n/**\n * InjectionToken that can be used to specify global options. e.g.\n *\n * ```typescript\n * providers: [\n *   {\n *     provide: MAT_SELECTSEARCH_DEFAULT_OPTIONS,\n *     useValue: <MatSelectSearchOptions>{\n *       closeIcon: 'delete',\n *       noEntriesFoundLabel: 'No options found'\n *     }\n *   }\n * ]\n * ```\n *\n * See the corresponding inputs of `MatSelectSearchComponent` for documentation.\n */\n\nvar MAT_SELECTSEARCH_DEFAULT_OPTIONS = new InjectionToken('mat-selectsearch-default-options');\n/** @deprecated */\n\nvar configurableGlobalOptions = configurableDefaultOptions;\n/** @deprecated */\n\nvar MATSELECTSEARCH_GLOBAL_OPTIONS = MAT_SELECTSEARCH_DEFAULT_OPTIONS;\n/**\n * Directive for providing a custom no entries found element.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <span ngxMatSelectNoEntriesFound>\n *     No entries found <button>Add</button>\n *   </span>\n * </ngx-mat-select-search>\n */\n\nvar MatSelectNoEntriesFoundDirective = /*#__PURE__*/_createClass(function MatSelectNoEntriesFoundDirective() {\n  _classCallCheck(this, MatSelectNoEntriesFoundDirective);\n});\n\nMatSelectNoEntriesFoundDirective.ɵfac = function MatSelectNoEntriesFoundDirective_Factory(t) {\n  return new (t || MatSelectNoEntriesFoundDirective)();\n};\n\nMatSelectNoEntriesFoundDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatSelectNoEntriesFoundDirective,\n  selectors: [[\"\", \"ngxMatSelectNoEntriesFound\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelectNoEntriesFoundDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxMatSelectNoEntriesFound]'\n    }]\n  }], null, null);\n})();\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The max height of the select's overlay panel. */\n\n\nvar SELECT_PANEL_MAX_HEIGHT = 256;\n/* tslint:disable:member-ordering component-selector */\n\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <mat-option>\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         </mat-option>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\n\nvar MatSelectSearchComponent = /*#__PURE__*/function () {\n  function MatSelectSearchComponent(matSelect, changeDetectorRef, _viewportRuler) {\n    var _this = this;\n\n    var matOption = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var matFormField = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    var defaultOptions = arguments.length > 5 ? arguments[5] : undefined;\n\n    _classCallCheck(this, MatSelectSearchComponent);\n\n    this.matSelect = matSelect;\n    this.changeDetectorRef = changeDetectorRef;\n    this._viewportRuler = _viewportRuler;\n    this.matOption = matOption;\n    this.matFormField = matFormField;\n    /** Label of the search placeholder */\n\n    this.placeholderLabel = 'Suche';\n    /** Type of the search input field */\n\n    this.type = 'text';\n    /** Font-based icon used for displaying Close-Icon */\n\n    this.closeIcon = 'close';\n    /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n\n    this.noEntriesFoundLabel = 'Keine Optionen gefunden';\n    /**\n      * Whether or not the search field should be cleared after the dropdown menu is closed.\n      * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n      */\n\n    this.clearSearchInput = true;\n    /** Whether to show the search-in-progress indicator */\n\n    this.searching = false;\n    /** Disables initial focusing of the input field */\n\n    this.disableInitialFocus = false;\n    /** Enable clear input on escape pressed */\n\n    this.enableClearOnEscapePressed = false;\n    /**\n     * Prevents home / end key being propagated to mat-select,\n     * allowing to move the cursor within the search input instead of navigating the options\n     */\n\n    this.preventHomeEndKeyPropagation = false;\n    /** Disables scrolling to active options when option list changes. Useful for server-side search */\n\n    this.disableScrollToActiveOnOptionsChanged = false;\n    /** Adds 508 screen reader support for search box */\n\n    this.ariaLabel = 'dropdown search';\n    /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n\n    this.showToggleAllCheckbox = false;\n    /** select all checkbox checked state */\n\n    this.toggleAllCheckboxChecked = false;\n    /** select all checkbox indeterminate state */\n\n    this.toggleAllCheckboxIndeterminate = false;\n    /** Display a message in a tooltip on the toggle-all checkbox */\n\n    this.toggleAllCheckboxTooltipMessage = '';\n    /** Define the position of the tooltip on the toggle-all checkbox. */\n\n    this.toggleAllCheckboxTooltipPosition = 'below';\n    /** Show/Hide the search clear button of the search input */\n\n    this.hideClearSearchButton = false;\n    /**\n     * Always restore selected options on selectionChange for mode multi (e.g. for lazy loading/infinity scrolling).\n     * Defaults to false, so selected options are only restored while filtering is active.\n     */\n\n    this.alwaysRestoreSelectedOptionsMulti = false;\n    /** Output emitter to send to parent component with the toggle all boolean */\n\n    this.toggleAll = new EventEmitter();\n\n    this.onTouched = function (_) {};\n\n    this._options$ = new BehaviorSubject(null);\n    this.optionsList$ = this._options$.pipe(switchMap(function (_options) {\n      return _options ? _options.changes.pipe(map(function (options) {\n        return options.toArray();\n      }), startWith(_options.toArray())) : of(null);\n    }));\n    this.optionsLength$ = this.optionsList$.pipe(map(function (options) {\n      return options ? options.length : 0;\n    }));\n    this._formControl = new FormControl('');\n    /** whether to show the no entries found message */\n\n    this._showNoEntriesFound$ = combineLatest([this._formControl.valueChanges, this.optionsLength$]).pipe(map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          value = _ref2[0],\n          optionsLength = _ref2[1];\n\n      return _this.noEntriesFoundLabel && value && optionsLength === _this.getOptionsLengthOffset();\n    }));\n    /** Subject that emits when the component has been destroyed. */\n\n    this._onDestroy = new Subject();\n    this.applyDefaultOptions(defaultOptions);\n  }\n\n  _createClass(MatSelectSearchComponent, [{\n    key: \"isInsideMatOption\",\n    get: function get() {\n      return !!this.matOption;\n    }\n    /** Current search value */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._formControl.value;\n    }\n    /** Reference to the MatSelect options */\n\n  }, {\n    key: \"_options\",\n    get: function get() {\n      return this._options$.getValue();\n    },\n    set: function set(_options) {\n      this._options$.next(_options);\n    }\n  }, {\n    key: \"applyDefaultOptions\",\n    value: function applyDefaultOptions(defaultOptions) {\n      if (!defaultOptions) {\n        return;\n      }\n\n      var _iterator = _createForOfIteratorHelper(configurableDefaultOptions),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var key = _step.value;\n\n          if (defaultOptions.hasOwnProperty(key)) {\n            this[key] = defaultOptions[key];\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this2 = this;\n\n      // set custom panel class\n      var panelClass = 'mat-select-search-panel';\n\n      if (this.matSelect.panelClass) {\n        if (Array.isArray(this.matSelect.panelClass)) {\n          this.matSelect.panelClass.push(panelClass);\n        } else if (typeof this.matSelect.panelClass === 'string') {\n          this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n        } else if (typeof this.matSelect.panelClass === 'object') {\n          this.matSelect.panelClass[panelClass] = true;\n        }\n      } else {\n        this.matSelect.panelClass = panelClass;\n      } // set custom mat-option class if the component was placed inside a mat-option\n\n\n      if (this.matOption) {\n        this.matOption.disabled = true;\n\n        this.matOption._getHostElement().classList.add('contains-mat-select-search');\n\n        this.matOption._getHostElement().setAttribute('aria-hidden', 'true');\n      } else {\n        console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\n      } // when the select dropdown panel is opened or closed\n\n\n      this.matSelect.openedChange.pipe(delay(1), takeUntil(this._onDestroy)).subscribe(function (opened) {\n        if (opened) {\n          _this2.updateInputWidth(); // focus the search field when opening\n\n\n          if (!_this2.disableInitialFocus) {\n            _this2._focus();\n          }\n        } else {\n          // clear it when closing\n          if (_this2.clearSearchInput) {\n            _this2._reset();\n          }\n        }\n      }); // set the first item active after the options changed\n\n      this.matSelect.openedChange.pipe(take(1)).pipe(takeUntil(this._onDestroy)).subscribe(function () {\n        if (_this2.matSelect._keyManager) {\n          _this2.matSelect._keyManager.change.pipe(takeUntil(_this2._onDestroy)).subscribe(function () {\n            return _this2.adjustScrollTopToFitActiveOptionIntoView();\n          });\n        } else {\n          console.log('_keyManager was not initialized.');\n        }\n\n        _this2._options = _this2.matSelect.options; // Closure variable for tracking the most recent first option.\n        // In order to avoid avoid causing the list to\n        // scroll to the top when options are added to the bottom of\n        // the list (eg: infinite scroll), we compare only\n        // the changes to the first options to determine if we\n        // should set the first item as active.\n        // This prevents unnecessary scrolling to the top of the list\n        // when options are appended, but allows the first item\n        // in the list to be set as active by default when there\n        // is no active selection\n\n        var previousFirstOption = _this2._options.toArray()[_this2.getOptionsLengthOffset()];\n\n        _this2._options.changes.pipe(takeUntil(_this2._onDestroy)).subscribe(function () {\n          // avoid \"expression has been changed\" error\n          setTimeout(function () {\n            // Convert the QueryList to an array\n            var options = _this2._options.toArray(); // The true first item is offset by 1\n\n\n            var currentFirstOption = options[_this2.getOptionsLengthOffset()];\n\n            var keyManager = _this2.matSelect._keyManager;\n\n            if (keyManager && _this2.matSelect.panelOpen) {\n              // set first item active and input width\n              // Check to see if the first option in these changes is different from the previous.\n              var firstOptionIsChanged = !_this2.matSelect.compareWith(previousFirstOption, currentFirstOption); // CASE: The first option is different now.\n              // Indiciates we should set it as active and scroll to the top.\n\n              if (firstOptionIsChanged || !keyManager.activeItem || !options.find(function (option) {\n                return _this2.matSelect.compareWith(option, keyManager.activeItem);\n              })) {\n                keyManager.setFirstItemActive();\n              } // wait for panel width changes\n\n\n              setTimeout(function () {\n                _this2.updateInputWidth();\n              });\n\n              if (!_this2.disableScrollToActiveOnOptionsChanged) {\n                _this2.adjustScrollTopToFitActiveOptionIntoView();\n              }\n            } // Update our reference\n\n\n            previousFirstOption = currentFirstOption;\n          });\n        });\n      }); // add or remove css class depending on whether to show the no entries found message\n      // note: this is hacky\n\n      this._showNoEntriesFound$.pipe(takeUntil(this._onDestroy)).subscribe(function (showNoEntriesFound) {\n        // set no entries found class on mat option\n        if (_this2.matOption) {\n          if (showNoEntriesFound) {\n            _this2.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n          } else {\n            _this2.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n          }\n        }\n      }); // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n\n\n      this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(function () {\n        if (_this2.matSelect.panelOpen) {\n          _this2.updateInputWidth();\n        }\n      });\n\n      this.initMultipleHandling();\n      this.optionsList$.pipe(takeUntil(this._onDestroy)).subscribe(function () {\n        // update view when available options change\n        _this2.changeDetectorRef.markForCheck();\n      });\n    }\n  }, {\n    key: \"_emitSelectAllBooleanToParent\",\n    value: function _emitSelectAllBooleanToParent(state) {\n      this.toggleAll.emit(state);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._onDestroy.next();\n\n      this._onDestroy.complete();\n    }\n  }, {\n    key: \"_isToggleAllCheckboxVisible\",\n    value: function _isToggleAllCheckboxVisible() {\n      return this.matSelect.multiple && this.showToggleAllCheckbox;\n    }\n    /**\n     * Handles the key down event with MatSelect.\n     * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n     * @param event\n     */\n\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(event) {\n      var _this3 = this;\n\n      // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n      if (event.key && event.key.length === 1 || event.keyCode >= A && event.keyCode <= Z || event.keyCode >= ZERO && event.keyCode <= NINE || event.keyCode === SPACE || this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END)) {\n        event.stopPropagation();\n      }\n\n      if (this.matSelect.multiple && event.key && event.keyCode === ENTER) {\n        // Regain focus after multiselect, so we can further type\n        setTimeout(function () {\n          return _this3._focus();\n        });\n      } // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\n\n\n      if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\n        this._reset(true);\n\n        event.stopPropagation();\n      }\n    }\n    /**\n     * Handles the key up event with MatSelect.\n     * Allows e.g. the announcing of the currently activeDescendant by screen readers.\n     */\n\n  }, {\n    key: \"_handleKeyup\",\n    value: function _handleKeyup(event) {\n      if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n        var ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\n\n        var index = this._options.toArray().findIndex(function (item) {\n          return item.id === ariaActiveDescendantId;\n        });\n\n        if (index !== -1) {\n          this.unselectActiveDescendant();\n          this.activeDescendant = this._options.toArray()[index]._getHostElement();\n          this.activeDescendant.setAttribute('aria-selected', 'true');\n          this.searchSelectInput.nativeElement.setAttribute('aria-activedescendant', ariaActiveDescendantId);\n        }\n      }\n    }\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this._lastExternalInputValue = value;\n\n      this._formControl.setValue(value);\n\n      this.changeDetectorRef.markForCheck();\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur() {\n      this.unselectActiveDescendant();\n      this.onTouched();\n    }\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      var _this4 = this;\n\n      this._formControl.valueChanges.pipe(filter(function (value) {\n        return value !== _this4._lastExternalInputValue;\n      }), tap(function () {\n        return _this4._lastExternalInputValue = undefined;\n      }), takeUntil(this._onDestroy)).subscribe(fn);\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * Focuses the search input field\n     */\n\n  }, {\n    key: \"_focus\",\n    value: function _focus() {\n      if (!this.searchSelectInput || !this.matSelect.panel) {\n        return;\n      } // save and restore scrollTop of panel, since it will be reset by focus()\n      // note: this is hacky\n\n\n      var panel = this.matSelect.panel.nativeElement;\n      var scrollTop = panel.scrollTop; // focus\n\n      this.searchSelectInput.nativeElement.focus();\n      panel.scrollTop = scrollTop;\n    }\n    /**\n     * Resets the current search value\n     * @param focus whether to focus after resetting\n     */\n\n  }, {\n    key: \"_reset\",\n    value: function _reset(focus) {\n      this._formControl.setValue('');\n\n      if (focus) {\n        this._focus();\n      }\n    }\n    /**\n     * Initializes handling <mat-select [multiple]=\"true\">\n     * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n     */\n\n  }, {\n    key: \"initMultipleHandling\",\n    value: function initMultipleHandling() {\n      var _this5 = this;\n\n      if (!this.matSelect.ngControl) {\n        if (this.matSelect.multiple) {\n          // note: the access to matSelect.ngControl (instead of matSelect.value / matSelect.valueChanges)\n          // is necessary to properly work in multi-selection mode.\n          console.error('the mat-select containing ngx-mat-select-search must have a ngModel or formControl directive when multiple=true');\n        }\n\n        return;\n      } // if <mat-select [multiple]=\"true\">\n      // store previously selected values and restore them when they are deselected\n      // because the option is not available while we are currently filtering\n\n\n      this.previousSelectedValues = this.matSelect.ngControl.value;\n      this.matSelect.ngControl.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(function (values) {\n        var restoreSelectedValues = false;\n\n        if (_this5.matSelect.multiple) {\n          if ((_this5.alwaysRestoreSelectedOptionsMulti || _this5._formControl.value && _this5._formControl.value.length) && _this5.previousSelectedValues && Array.isArray(_this5.previousSelectedValues)) {\n            if (!values || !Array.isArray(values)) {\n              values = [];\n            }\n\n            var optionValues = _this5.matSelect.options.map(function (option) {\n              return option.value;\n            });\n\n            _this5.previousSelectedValues.forEach(function (previousValue) {\n              if (!values.some(function (v) {\n                return _this5.matSelect.compareWith(v, previousValue);\n              }) && !optionValues.some(function (v) {\n                return _this5.matSelect.compareWith(v, previousValue);\n              })) {\n                // if a value that was selected before is deselected and not found in the options, it was deselected\n                // due to the filtering, so we restore it.\n                values.push(previousValue);\n                restoreSelectedValues = true;\n              }\n            });\n          }\n        }\n\n        _this5.previousSelectedValues = values;\n\n        if (restoreSelectedValues) {\n          _this5.matSelect._onChange(values);\n        }\n      });\n    }\n    /**\n     * Scrolls the currently active option into the view if it is not yet visible.\n     */\n\n  }, {\n    key: \"adjustScrollTopToFitActiveOptionIntoView\",\n    value: function adjustScrollTopToFitActiveOptionIntoView() {\n      if (this.matSelect.panel && this.matSelect.options.length > 0) {\n        var matOptionHeight = this.getMatOptionHeight();\n        var activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\n\n        var labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups); // If the component is in a MatOption, the activeItemIndex will be offset by one.\n\n\n        var indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\n        var currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\n        var searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight;\n        var amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\n        var indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\n\n        if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\n          this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\n        } else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\n          this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\n        }\n      }\n    }\n    /**\n     *  Set the width of the innerSelectSearch to fit even custom scrollbars\n     *  And support all Operation Systems\n     */\n\n  }, {\n    key: \"updateInputWidth\",\n    value: function updateInputWidth() {\n      if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n        return;\n      }\n\n      var element = this.innerSelectSearch.nativeElement;\n      var panelElement;\n\n      while (element = element.parentElement) {\n        if (element.classList.contains('mat-select-panel')) {\n          panelElement = element;\n          break;\n        }\n      }\n\n      if (panelElement) {\n        this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n      }\n    }\n  }, {\n    key: \"getMatOptionHeight\",\n    value: function getMatOptionHeight() {\n      if (this.matSelect.options.length > 0) {\n        return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\n      }\n\n      return 0;\n    }\n    /**\n     * Determine the offset to length that can be caused by the optional matOption used as a search input.\n     */\n\n  }, {\n    key: \"getOptionsLengthOffset\",\n    value: function getOptionsLengthOffset() {\n      if (this.matOption) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: \"unselectActiveDescendant\",\n    value: function unselectActiveDescendant() {\n      var _a;\n\n      (_a = this.activeDescendant) === null || _a === void 0 ? void 0 : _a.removeAttribute('aria-selected');\n      this.searchSelectInput.nativeElement.removeAttribute('aria-activedescendant');\n    }\n  }]);\n\n  return MatSelectSearchComponent;\n}();\n\nMatSelectSearchComponent.ɵfac = function MatSelectSearchComponent_Factory(t) {\n  return new (t || MatSelectSearchComponent)(i0.ɵɵdirectiveInject(MatSelect), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.ViewportRuler), i0.ɵɵdirectiveInject(MatOption, 8), i0.ɵɵdirectiveInject(MatFormField, 8), i0.ɵɵdirectiveInject(MAT_SELECTSEARCH_DEFAULT_OPTIONS, 8));\n};\n\nMatSelectSearchComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatSelectSearchComponent,\n  selectors: [[\"ngx-mat-select-search\"]],\n  contentQueries: function MatSelectSearchComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatSelectSearchClearDirective, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatSelectNoEntriesFoundDirective, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.clearIcon = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.noEntriesFound = _t.first);\n    }\n  },\n  viewQuery: function MatSelectSearchComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7, ElementRef);\n      i0.ɵɵviewQuery(_c1, 7, ElementRef);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchSelectInput = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.innerSelectSearch = _t.first);\n    }\n  },\n  hostVars: 2,\n  hostBindings: function MatSelectSearchComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-select-search-inside-mat-option\", ctx.isInsideMatOption);\n    }\n  },\n  inputs: {\n    placeholderLabel: \"placeholderLabel\",\n    type: \"type\",\n    closeIcon: \"closeIcon\",\n    closeSvgIcon: \"closeSvgIcon\",\n    noEntriesFoundLabel: \"noEntriesFoundLabel\",\n    clearSearchInput: \"clearSearchInput\",\n    searching: \"searching\",\n    disableInitialFocus: \"disableInitialFocus\",\n    enableClearOnEscapePressed: \"enableClearOnEscapePressed\",\n    preventHomeEndKeyPropagation: \"preventHomeEndKeyPropagation\",\n    disableScrollToActiveOnOptionsChanged: \"disableScrollToActiveOnOptionsChanged\",\n    ariaLabel: \"ariaLabel\",\n    showToggleAllCheckbox: \"showToggleAllCheckbox\",\n    toggleAllCheckboxChecked: \"toggleAllCheckboxChecked\",\n    toggleAllCheckboxIndeterminate: \"toggleAllCheckboxIndeterminate\",\n    toggleAllCheckboxTooltipMessage: \"toggleAllCheckboxTooltipMessage\",\n    toggleAllCheckboxTooltipPosition: \"toggleAllCheckboxTooltipPosition\",\n    hideClearSearchButton: \"hideClearSearchButton\",\n    alwaysRestoreSelectedOptionsMulti: \"alwaysRestoreSelectedOptionsMulti\"\n  },\n  outputs: {\n    toggleAll: \"toggleAll\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () {\n      return MatSelectSearchComponent;\n    }),\n    multi: true\n  }])],\n  ngContentSelectors: _c4,\n  decls: 11,\n  vars: 14,\n  consts: [[\"matInput\", \"\", 1, \"mat-select-search-input\", \"mat-select-search-hidden\"], [1, \"mat-select-search-inner\", \"mat-typography\", \"mat-datepicker-content\", \"mat-tab-header\", 3, \"ngClass\"], [\"innerSelectSearch\", \"\"], [\"class\", \"mat-select-search-toggle-all-checkbox\", \"matTooltipClass\", \"ngx-mat-select-search-toggle-all-tooltip\", 3, \"color\", \"checked\", \"indeterminate\", \"matTooltip\", \"matTooltipPosition\", \"change\", 4, \"ngIf\"], [\"autocomplete\", \"off\", 1, \"mat-select-search-input\", \"mat-input-element\", 3, \"type\", \"formControl\", \"placeholder\", \"keydown\", \"keyup\", \"blur\"], [\"searchSelectInput\", \"\"], [\"class\", \"mat-select-search-spinner\", \"diameter\", \"16\", 4, \"ngIf\"], [\"mat-button\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", \"class\", \"mat-select-search-clear\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"mat-select-search-no-entries-found\", 4, \"ngIf\"], [\"matTooltipClass\", \"ngx-mat-select-search-toggle-all-tooltip\", 1, \"mat-select-search-toggle-all-checkbox\", 3, \"color\", \"checked\", \"indeterminate\", \"matTooltip\", \"matTooltipPosition\", \"change\"], [\"diameter\", \"16\", 1, \"mat-select-search-spinner\"], [\"mat-button\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 1, \"mat-select-search-clear\", 3, \"click\"], [4, \"ngIf\", \"ngIfElse\"], [\"defaultIcon\", \"\"], [3, \"svgIcon\"], [1, \"mat-select-search-no-entries-found\"], [\"defaultNoEntriesFound\", \"\"]],\n  template: function MatSelectSearchComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c2);\n      i0.ɵɵelement(0, \"input\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1, 2);\n      i0.ɵɵtemplate(3, MatSelectSearchComponent_mat_checkbox_3_Template, 1, 5, \"mat-checkbox\", 3);\n      i0.ɵɵelementStart(4, \"input\", 4, 5);\n      i0.ɵɵlistener(\"keydown\", function MatSelectSearchComponent_Template_input_keydown_4_listener($event) {\n        return ctx._handleKeydown($event);\n      })(\"keyup\", function MatSelectSearchComponent_Template_input_keyup_4_listener($event) {\n        return ctx._handleKeyup($event);\n      })(\"blur\", function MatSelectSearchComponent_Template_input_blur_4_listener() {\n        return ctx.onBlur();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, MatSelectSearchComponent_mat_spinner_6_Template, 1, 0, \"mat-spinner\", 6);\n      i0.ɵɵtemplate(7, MatSelectSearchComponent_button_7_Template, 4, 2, \"button\", 7);\n      i0.ɵɵprojection(8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(9, MatSelectSearchComponent_div_9_Template, 4, 2, \"div\", 8);\n      i0.ɵɵpipe(10, \"async\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(11, _c3, ctx.matSelect.multiple, ctx._isToggleAllCheckboxVisible()));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx._isToggleAllCheckboxVisible());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"type\", ctx.type)(\"formControl\", ctx._formControl)(\"placeholder\", ctx.placeholderLabel);\n      i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.searching);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.hideClearSearchButton && ctx.value && !ctx.searching);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(10, 9, ctx._showNoEntriesFound$));\n    }\n  },\n  dependencies: [i2.MatCheckbox, i3.MatProgressSpinner, i4.MatButton, i5.MatIcon, i6.NgClass, i6.NgIf, i7.MatTooltip, i8.DefaultValueAccessor, i8.NgControlStatus, i8.FormControlDirective, i6.AsyncPipe],\n  styles: [\".mat-select-search-hidden[_ngcontent-%COMP%]{visibility:hidden}.mat-select-search-inner[_ngcontent-%COMP%]{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple[_ngcontent-%COMP%]{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all[_ngcontent-%COMP%]{display:flex;align-items:center}.mat-select-search-inner[_ngcontent-%COMP%]   .mat-input-element[_ngcontent-%COMP%]{flex-basis:auto}.mat-select-search-inner[_ngcontent-%COMP%]   .mat-input-element[_ngcontent-%COMP%]:-ms-input-placeholder{-ms-user-select:text}  .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input[_ngcontent-%COMP%]{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}[dir=rtl][_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%]{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found[_ngcontent-%COMP%]{padding:16px}.mat-select-search-clear[_ngcontent-%COMP%]{position:absolute;right:4px;top:5px}[dir=rtl][_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%]{right:auto;left:4px}.mat-select-search-spinner[_ngcontent-%COMP%]{position:absolute;right:16px;top:calc(50% - 8px)}[dir=rtl][_nghost-%COMP%]   .mat-select-search-spinner[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-spinner[_ngcontent-%COMP%]{right:auto;left:16px}.mat-select-search-inside-mat-option[_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%]{padding-top:0;padding-bottom:0;height:3em;line-height:3em}.mat-select-search-inside-mat-option[_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%]{top:3px}  .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}  .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}  .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}  .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%]{padding-left:16px;padding-bottom:2px}[dir=rtl][_nghost-%COMP%]   .mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%]{padding-left:0;padding-right:16px}\"],\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelectSearchComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-select-search',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return MatSelectSearchComponent;\n        }),\n        multi: true\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\n\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\n<div\\n      #innerSelectSearch\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\n\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\n                [color]=\\\"matFormField?.color\\\"\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\n                [matTooltip]=\\\"toggleAllCheckboxTooltipMessage\\\"\\n                matTooltipClass=\\\"ngx-mat-select-search-toggle-all-tooltip\\\"\\n                [matTooltipPosition]=\\\"toggleAllCheckboxTooltipPosition\\\"\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\n  ></mat-checkbox>\\n\\n  <input class=\\\"mat-select-search-input mat-input-element\\\"\\n         autocomplete=\\\"off\\\"\\n         [type]=\\\"type\\\"\\n         [formControl]=\\\"_formControl\\\"\\n         #searchSelectInput\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\n         (keyup)=\\\"_handleKeyup($event)\\\"\\n         (blur)=\\\"onBlur()\\\"\\n         [placeholder]=\\\"placeholderLabel\\\"\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\n  />\\n  <mat-spinner *ngIf=\\\"searching\\\"\\n          class=\\\"mat-select-search-spinner\\\"\\n          diameter=\\\"16\\\"></mat-spinner>\\n\\n  <button mat-button\\n          *ngIf=\\\"!hideClearSearchButton && value && !searching\\\"\\n          mat-icon-button\\n          aria-label=\\\"Clear\\\"\\n          (click)=\\\"_reset(true)\\\"\\n          class=\\\"mat-select-search-clear\\\">\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\n    <ng-template #defaultIcon>\\n      <mat-icon [svgIcon]=\\\"closeSvgIcon\\\">\\n        {{!closeSvgIcon ? closeIcon : null}}\\n      </mat-icon>\\n    </ng-template>\\n  </button>\\n\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\n\\n</div>\\n\\n<div *ngIf=\\\"_showNoEntriesFound$ | async\\\"\\n     class=\\\"mat-select-search-no-entries-found\\\">\\n  <ng-content *ngIf=\\\"noEntriesFound; else defaultNoEntriesFound\\\"\\n              select=\\\"[ngxMatSelectNoEntriesFound]\\\"></ng-content>\\n  <ng-template #defaultNoEntriesFound>{{noEntriesFoundLabel}}</ng-template>\\n</div>\\n<!--\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\n\\nUse of this source code is governed by an MIT-style license that can be\\nfound in the LICENSE file at https://angular.io/license\\n-->\\n\",\n      styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-inner .mat-input-element{flex-basis:auto}.mat-select-search-inner .mat-input-element:-ms-input-placeholder{-ms-user-select:text}::ng-deep .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}:host-context([dir=rtl]) .mat-select-search-input{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found{padding:16px}.mat-select-search-clear{position:absolute;right:4px;top:5px}:host-context([dir=rtl]) .mat-select-search-clear{right:auto;left:4px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host-context([dir=rtl]) .mat-select-search-spinner{right:auto;left:16px}:host.mat-select-search-inside-mat-option .mat-select-search-input{padding-top:0;padding-bottom:0;height:3em;line-height:3em}:host.mat-select-search-inside-mat-option .mat-select-search-clear{top:3px}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox{padding-left:16px;padding-bottom:2px}:host-context([dir=rtl]) .mat-select-search-toggle-all-checkbox{padding-left:0;padding-right:16px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i9.MatSelect,\n      decorators: [{\n        type: Inject,\n        args: [MatSelect]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.ViewportRuler\n    }, {\n      type: i10.MatOption,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MatOption]\n      }]\n    }, {\n      type: i11.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MatFormField]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_SELECTSEARCH_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    placeholderLabel: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    closeIcon: [{\n      type: Input\n    }],\n    closeSvgIcon: [{\n      type: Input\n    }],\n    noEntriesFoundLabel: [{\n      type: Input\n    }],\n    clearSearchInput: [{\n      type: Input\n    }],\n    searching: [{\n      type: Input\n    }],\n    disableInitialFocus: [{\n      type: Input\n    }],\n    enableClearOnEscapePressed: [{\n      type: Input\n    }],\n    preventHomeEndKeyPropagation: [{\n      type: Input\n    }],\n    disableScrollToActiveOnOptionsChanged: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    showToggleAllCheckbox: [{\n      type: Input\n    }],\n    toggleAllCheckboxChecked: [{\n      type: Input\n    }],\n    toggleAllCheckboxIndeterminate: [{\n      type: Input\n    }],\n    toggleAllCheckboxTooltipMessage: [{\n      type: Input\n    }],\n    toggleAllCheckboxTooltipPosition: [{\n      type: Input\n    }],\n    hideClearSearchButton: [{\n      type: Input\n    }],\n    alwaysRestoreSelectedOptionsMulti: [{\n      type: Input\n    }],\n    toggleAll: [{\n      type: Output\n    }],\n    searchSelectInput: [{\n      type: ViewChild,\n      args: ['searchSelectInput', {\n        read: ElementRef,\n        static: true\n      }]\n    }],\n    innerSelectSearch: [{\n      type: ViewChild,\n      args: ['innerSelectSearch', {\n        read: ElementRef,\n        static: true\n      }]\n    }],\n    clearIcon: [{\n      type: ContentChild,\n      args: [MatSelectSearchClearDirective]\n    }],\n    noEntriesFound: [{\n      type: ContentChild,\n      args: [MatSelectNoEntriesFoundDirective]\n    }],\n    isInsideMatOption: [{\n      type: HostBinding,\n      args: ['class.mat-select-search-inside-mat-option']\n    }]\n  });\n})();\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatSelectSearchVersion = '5.0.0';\n\nvar NgxMatSelectSearchModule = /*#__PURE__*/_createClass(function NgxMatSelectSearchModule() {\n  _classCallCheck(this, NgxMatSelectSearchModule);\n});\n\nNgxMatSelectSearchModule.ɵfac = function NgxMatSelectSearchModule_Factory(t) {\n  return new (t || NgxMatSelectSearchModule)();\n};\n\nNgxMatSelectSearchModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxMatSelectSearchModule\n});\nNgxMatSelectSearchModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, ReactiveFormsModule, MatButtonModule, MatCheckboxModule, MatIconModule, MatProgressSpinnerModule, MatTooltipModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatSelectSearchModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, ReactiveFormsModule, MatButtonModule, MatCheckboxModule, MatIconModule, MatProgressSpinnerModule, MatTooltipModule],\n      declarations: [MatSelectSearchComponent, MatSelectSearchClearDirective, MatSelectNoEntriesFoundDirective],\n      exports: [MatSelectSearchComponent, MatSelectSearchClearDirective, MatSelectNoEntriesFoundDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MATSELECTSEARCH_GLOBAL_OPTIONS, MAT_SELECTSEARCH_DEFAULT_OPTIONS, MatSelectNoEntriesFoundDirective, MatSelectSearchClearDirective, MatSelectSearchComponent, MatSelectSearchVersion, NgxMatSelectSearchModule, configurableDefaultOptions, configurableGlobalOptions };","map":{"version":3,"names":["A","Z","ZERO","NINE","SPACE","HOME","END","ENTER","ESCAPE","UP_ARROW","DOWN_ARROW","i0","Directive","InjectionToken","EventEmitter","forwardRef","ElementRef","Component","ChangeDetectionStrategy","Inject","Optional","Input","Output","ViewChild","ContentChild","HostBinding","NgModule","i8","FormControl","NG_VALUE_ACCESSOR","ReactiveFormsModule","i10","_countGroupLabelsBeforeOption","MatOption","i11","MatFormField","i9","MatSelect","BehaviorSubject","of","combineLatest","Subject","switchMap","map","startWith","delay","takeUntil","take","filter","tap","i1","i2","MatCheckboxModule","i3","MatProgressSpinnerModule","i4","MatButtonModule","i5","MatIconModule","i6","CommonModule","i7","MatTooltipModule","MatSelectSearchClearDirective","ɵfac","ɵdir","type","args","selector","configurableDefaultOptions","MAT_SELECTSEARCH_DEFAULT_OPTIONS","configurableGlobalOptions","MATSELECTSEARCH_GLOBAL_OPTIONS","MatSelectNoEntriesFoundDirective","SELECT_PANEL_MAX_HEIGHT","MatSelectSearchComponent","matSelect","changeDetectorRef","_viewportRuler","matOption","matFormField","defaultOptions","placeholderLabel","closeIcon","noEntriesFoundLabel","clearSearchInput","searching","disableInitialFocus","enableClearOnEscapePressed","preventHomeEndKeyPropagation","disableScrollToActiveOnOptionsChanged","ariaLabel","showToggleAllCheckbox","toggleAllCheckboxChecked","toggleAllCheckboxIndeterminate","toggleAllCheckboxTooltipMessage","toggleAllCheckboxTooltipPosition","hideClearSearchButton","alwaysRestoreSelectedOptionsMulti","toggleAll","onTouched","_","_options$","optionsList$","pipe","_options","changes","options","toArray","optionsLength$","length","_formControl","_showNoEntriesFound$","valueChanges","value","optionsLength","getOptionsLengthOffset","_onDestroy","applyDefaultOptions","getValue","next","key","hasOwnProperty","panelClass","Array","isArray","push","disabled","_getHostElement","classList","add","setAttribute","console","error","openedChange","subscribe","opened","updateInputWidth","_focus","_reset","_keyManager","change","adjustScrollTopToFitActiveOptionIntoView","log","previousFirstOption","setTimeout","currentFirstOption","keyManager","panelOpen","firstOptionIsChanged","compareWith","activeItem","find","option","setFirstItemActive","showNoEntriesFound","remove","initMultipleHandling","markForCheck","state","emit","complete","multiple","event","keyCode","stopPropagation","ariaActiveDescendantId","_getAriaActiveDescendant","index","findIndex","item","id","unselectActiveDescendant","activeDescendant","searchSelectInput","nativeElement","_lastExternalInputValue","setValue","fn","undefined","panel","scrollTop","focus","ngControl","previousSelectedValues","values","restoreSelectedValues","optionValues","forEach","previousValue","some","v","_onChange","matOptionHeight","getMatOptionHeight","activeOptionIndex","activeItemIndex","labelCount","optionGroups","indexOfOptionToFitIntoView","currentScrollTop","searchInputHeight","innerSelectSearch","offsetHeight","amountOfVisibleOptions","Math","floor","indexOfFirstVisibleOption","round","element","panelElement","parentElement","contains","style","width","clientWidth","first","getBoundingClientRect","height","_a","removeAttribute","ChangeDetectorRef","ViewportRuler","ɵcmp","provide","useExisting","multi","MatCheckbox","MatProgressSpinner","MatButton","MatIcon","NgClass","NgIf","MatTooltip","DefaultValueAccessor","NgControlStatus","FormControlDirective","AsyncPipe","providers","changeDetection","OnPush","template","styles","decorators","closeSvgIcon","read","static","clearIcon","noEntriesFound","isInsideMatOption","MatSelectSearchVersion","NgxMatSelectSearchModule","ɵmod","ɵinj","imports","declarations","exports"],"sources":["C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/ngx-mat-select-search/fesm2015/ngx-mat-select-search.mjs"],"sourcesContent":["import { A, Z, ZERO, NINE, SPACE, HOME, END, ENTER, ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { Directive, InjectionToken, EventEmitter, forwardRef, ElementRef, Component, ChangeDetectionStrategy, Inject, Optional, Input, Output, ViewChild, ContentChild, HostBinding, NgModule } from '@angular/core';\nimport * as i8 from '@angular/forms';\nimport { FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\nimport * as i10 from '@angular/material/core';\nimport { _countGroupLabelsBeforeOption, MatOption } from '@angular/material/core';\nimport * as i11 from '@angular/material/form-field';\nimport { MatFormField } from '@angular/material/form-field';\nimport * as i9 from '@angular/material/select';\nimport { MatSelect } from '@angular/material/select';\nimport { BehaviorSubject, of, combineLatest, Subject } from 'rxjs';\nimport { switchMap, map, startWith, delay, takeUntil, take, filter, tap } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/scrolling';\nimport * as i2 from '@angular/material/checkbox';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport * as i3 from '@angular/material/progress-spinner';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport * as i4 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i5 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i6 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i7 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\nclass MatSelectSearchClearDirective {\n}\nMatSelectSearchClearDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectSearchClearDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectSearchClearDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.10\", type: MatSelectSearchClearDirective, selector: \"[ngxMatSelectSearchClear]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectSearchClearDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngxMatSelectSearchClear]'\n                }]\n        }] });\n\n/** List of inputs of NgxMatSelectSearchComponent that can be configured with a global default. */\nconst configurableDefaultOptions = [\n    'ariaLabel',\n    'clearSearchInput',\n    'closeIcon',\n    'closeSvgIcon',\n    'disableInitialFocus',\n    'disableScrollToActiveOnOptionsChanged',\n    'enableClearOnEscapePressed',\n    'hideClearSearchButton',\n    'noEntriesFoundLabel',\n    'placeholderLabel',\n    'preventHomeEndKeyPropagation',\n    'searching',\n];\n/**\n * InjectionToken that can be used to specify global options. e.g.\n *\n * ```typescript\n * providers: [\n *   {\n *     provide: MAT_SELECTSEARCH_DEFAULT_OPTIONS,\n *     useValue: <MatSelectSearchOptions>{\n *       closeIcon: 'delete',\n *       noEntriesFoundLabel: 'No options found'\n *     }\n *   }\n * ]\n * ```\n *\n * See the corresponding inputs of `MatSelectSearchComponent` for documentation.\n */\nconst MAT_SELECTSEARCH_DEFAULT_OPTIONS = new InjectionToken('mat-selectsearch-default-options');\n/** @deprecated */\nconst configurableGlobalOptions = configurableDefaultOptions;\n/** @deprecated */\nconst MATSELECTSEARCH_GLOBAL_OPTIONS = MAT_SELECTSEARCH_DEFAULT_OPTIONS;\n\n/**\n * Directive for providing a custom no entries found element.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <span ngxMatSelectNoEntriesFound>\n *     No entries found <button>Add</button>\n *   </span>\n * </ngx-mat-select-search>\n */\nclass MatSelectNoEntriesFoundDirective {\n}\nMatSelectNoEntriesFoundDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectNoEntriesFoundDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectNoEntriesFoundDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.10\", type: MatSelectNoEntriesFoundDirective, selector: \"[ngxMatSelectNoEntriesFound]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectNoEntriesFoundDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngxMatSelectNoEntriesFound]'\n                }]\n        }] });\n\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/* tslint:disable:member-ordering component-selector */\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <mat-option>\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         </mat-option>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\nclass MatSelectSearchComponent {\n    constructor(matSelect, changeDetectorRef, _viewportRuler, matOption = null, matFormField = null, defaultOptions) {\n        this.matSelect = matSelect;\n        this.changeDetectorRef = changeDetectorRef;\n        this._viewportRuler = _viewportRuler;\n        this.matOption = matOption;\n        this.matFormField = matFormField;\n        /** Label of the search placeholder */\n        this.placeholderLabel = 'Suche';\n        /** Type of the search input field */\n        this.type = 'text';\n        /** Font-based icon used for displaying Close-Icon */\n        this.closeIcon = 'close';\n        /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n        this.noEntriesFoundLabel = 'Keine Optionen gefunden';\n        /**\n          * Whether or not the search field should be cleared after the dropdown menu is closed.\n          * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n          */\n        this.clearSearchInput = true;\n        /** Whether to show the search-in-progress indicator */\n        this.searching = false;\n        /** Disables initial focusing of the input field */\n        this.disableInitialFocus = false;\n        /** Enable clear input on escape pressed */\n        this.enableClearOnEscapePressed = false;\n        /**\n         * Prevents home / end key being propagated to mat-select,\n         * allowing to move the cursor within the search input instead of navigating the options\n         */\n        this.preventHomeEndKeyPropagation = false;\n        /** Disables scrolling to active options when option list changes. Useful for server-side search */\n        this.disableScrollToActiveOnOptionsChanged = false;\n        /** Adds 508 screen reader support for search box */\n        this.ariaLabel = 'dropdown search';\n        /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n        this.showToggleAllCheckbox = false;\n        /** select all checkbox checked state */\n        this.toggleAllCheckboxChecked = false;\n        /** select all checkbox indeterminate state */\n        this.toggleAllCheckboxIndeterminate = false;\n        /** Display a message in a tooltip on the toggle-all checkbox */\n        this.toggleAllCheckboxTooltipMessage = '';\n        /** Define the position of the tooltip on the toggle-all checkbox. */\n        this.toggleAllCheckboxTooltipPosition = 'below';\n        /** Show/Hide the search clear button of the search input */\n        this.hideClearSearchButton = false;\n        /**\n         * Always restore selected options on selectionChange for mode multi (e.g. for lazy loading/infinity scrolling).\n         * Defaults to false, so selected options are only restored while filtering is active.\n         */\n        this.alwaysRestoreSelectedOptionsMulti = false;\n        /** Output emitter to send to parent component with the toggle all boolean */\n        this.toggleAll = new EventEmitter();\n        this.onTouched = (_) => { };\n        this._options$ = new BehaviorSubject(null);\n        this.optionsList$ = this._options$.pipe(switchMap(_options => _options ?\n            _options.changes.pipe(map(options => options.toArray()), startWith(_options.toArray())) : of(null)));\n        this.optionsLength$ = this.optionsList$.pipe(map(options => options ? options.length : 0));\n        this._formControl = new FormControl('');\n        /** whether to show the no entries found message */\n        this._showNoEntriesFound$ = combineLatest([\n            this._formControl.valueChanges,\n            this.optionsLength$\n        ]).pipe(map(([value, optionsLength]) => this.noEntriesFoundLabel && value\n            && optionsLength === this.getOptionsLengthOffset()));\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        this.applyDefaultOptions(defaultOptions);\n    }\n    get isInsideMatOption() {\n        return !!this.matOption;\n    }\n    /** Current search value */\n    get value() {\n        return this._formControl.value;\n    }\n    /** Reference to the MatSelect options */\n    set _options(_options) {\n        this._options$.next(_options);\n    }\n    get _options() {\n        return this._options$.getValue();\n    }\n    applyDefaultOptions(defaultOptions) {\n        if (!defaultOptions) {\n            return;\n        }\n        for (const key of configurableDefaultOptions) {\n            if (defaultOptions.hasOwnProperty(key)) {\n                this[key] = defaultOptions[key];\n            }\n        }\n    }\n    ngOnInit() {\n        // set custom panel class\n        const panelClass = 'mat-select-search-panel';\n        if (this.matSelect.panelClass) {\n            if (Array.isArray(this.matSelect.panelClass)) {\n                this.matSelect.panelClass.push(panelClass);\n            }\n            else if (typeof this.matSelect.panelClass === 'string') {\n                this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n            }\n            else if (typeof this.matSelect.panelClass === 'object') {\n                this.matSelect.panelClass[panelClass] = true;\n            }\n        }\n        else {\n            this.matSelect.panelClass = panelClass;\n        }\n        // set custom mat-option class if the component was placed inside a mat-option\n        if (this.matOption) {\n            this.matOption.disabled = true;\n            this.matOption._getHostElement().classList.add('contains-mat-select-search');\n            this.matOption._getHostElement().setAttribute('aria-hidden', 'true');\n        }\n        else {\n            console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\n        }\n        // when the select dropdown panel is opened or closed\n        this.matSelect.openedChange\n            .pipe(delay(1), takeUntil(this._onDestroy))\n            .subscribe((opened) => {\n            if (opened) {\n                this.updateInputWidth();\n                // focus the search field when opening\n                if (!this.disableInitialFocus) {\n                    this._focus();\n                }\n            }\n            else {\n                // clear it when closing\n                if (this.clearSearchInput) {\n                    this._reset();\n                }\n            }\n        });\n        // set the first item active after the options changed\n        this.matSelect.openedChange\n            .pipe(take(1))\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            if (this.matSelect._keyManager) {\n                this.matSelect._keyManager.change.pipe(takeUntil(this._onDestroy))\n                    .subscribe(() => this.adjustScrollTopToFitActiveOptionIntoView());\n            }\n            else {\n                console.log('_keyManager was not initialized.');\n            }\n            this._options = this.matSelect.options;\n            // Closure variable for tracking the most recent first option.\n            // In order to avoid avoid causing the list to\n            // scroll to the top when options are added to the bottom of\n            // the list (eg: infinite scroll), we compare only\n            // the changes to the first options to determine if we\n            // should set the first item as active.\n            // This prevents unnecessary scrolling to the top of the list\n            // when options are appended, but allows the first item\n            // in the list to be set as active by default when there\n            // is no active selection\n            let previousFirstOption = this._options.toArray()[this.getOptionsLengthOffset()];\n            this._options.changes\n                .pipe(takeUntil(this._onDestroy))\n                .subscribe(() => {\n                // avoid \"expression has been changed\" error\n                setTimeout(() => {\n                    // Convert the QueryList to an array\n                    const options = this._options.toArray();\n                    // The true first item is offset by 1\n                    const currentFirstOption = options[this.getOptionsLengthOffset()];\n                    const keyManager = this.matSelect._keyManager;\n                    if (keyManager && this.matSelect.panelOpen) {\n                        // set first item active and input width\n                        // Check to see if the first option in these changes is different from the previous.\n                        const firstOptionIsChanged = !this.matSelect.compareWith(previousFirstOption, currentFirstOption);\n                        // CASE: The first option is different now.\n                        // Indiciates we should set it as active and scroll to the top.\n                        if (firstOptionIsChanged\n                            || !keyManager.activeItem\n                            || !options.find(option => this.matSelect.compareWith(option, keyManager.activeItem))) {\n                            keyManager.setFirstItemActive();\n                        }\n                        // wait for panel width changes\n                        setTimeout(() => {\n                            this.updateInputWidth();\n                        });\n                        if (!this.disableScrollToActiveOnOptionsChanged) {\n                            this.adjustScrollTopToFitActiveOptionIntoView();\n                        }\n                    }\n                    // Update our reference\n                    previousFirstOption = currentFirstOption;\n                });\n            });\n        });\n        // add or remove css class depending on whether to show the no entries found message\n        // note: this is hacky\n        this._showNoEntriesFound$.pipe(takeUntil(this._onDestroy)).subscribe(showNoEntriesFound => {\n            // set no entries found class on mat option\n            if (this.matOption) {\n                if (showNoEntriesFound) {\n                    this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n                }\n                else {\n                    this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n                }\n            }\n        });\n        // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n        this._viewportRuler.change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            if (this.matSelect.panelOpen) {\n                this.updateInputWidth();\n            }\n        });\n        this.initMultipleHandling();\n        this.optionsList$.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n            // update view when available options change\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n    _emitSelectAllBooleanToParent(state) {\n        this.toggleAll.emit(state);\n    }\n    ngOnDestroy() {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n    _isToggleAllCheckboxVisible() {\n        return this.matSelect.multiple && this.showToggleAllCheckbox;\n    }\n    /**\n     * Handles the key down event with MatSelect.\n     * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n     * @param event\n     */\n    _handleKeydown(event) {\n        // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n        if ((event.key && event.key.length === 1) ||\n            (event.keyCode >= A && event.keyCode <= Z) ||\n            (event.keyCode >= ZERO && event.keyCode <= NINE) ||\n            (event.keyCode === SPACE)\n            || (this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END))) {\n            event.stopPropagation();\n        }\n        if (this.matSelect.multiple && event.key && event.keyCode === ENTER) {\n            // Regain focus after multiselect, so we can further type\n            setTimeout(() => this._focus());\n        }\n        // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\n        if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\n            this._reset(true);\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handles the key up event with MatSelect.\n     * Allows e.g. the announcing of the currently activeDescendant by screen readers.\n     */\n    _handleKeyup(event) {\n        if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n            const ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\n            const index = this._options.toArray().findIndex(item => item.id === ariaActiveDescendantId);\n            if (index !== -1) {\n                this.unselectActiveDescendant();\n                this.activeDescendant = this._options.toArray()[index]._getHostElement();\n                this.activeDescendant.setAttribute('aria-selected', 'true');\n                this.searchSelectInput.nativeElement.setAttribute('aria-activedescendant', ariaActiveDescendantId);\n            }\n        }\n    }\n    writeValue(value) {\n        this._lastExternalInputValue = value;\n        this._formControl.setValue(value);\n        this.changeDetectorRef.markForCheck();\n    }\n    onBlur() {\n        this.unselectActiveDescendant();\n        this.onTouched();\n    }\n    registerOnChange(fn) {\n        this._formControl.valueChanges.pipe(filter(value => value !== this._lastExternalInputValue), tap(() => this._lastExternalInputValue = undefined), takeUntil(this._onDestroy)).subscribe(fn);\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Focuses the search input field\n     */\n    _focus() {\n        if (!this.searchSelectInput || !this.matSelect.panel) {\n            return;\n        }\n        // save and restore scrollTop of panel, since it will be reset by focus()\n        // note: this is hacky\n        const panel = this.matSelect.panel.nativeElement;\n        const scrollTop = panel.scrollTop;\n        // focus\n        this.searchSelectInput.nativeElement.focus();\n        panel.scrollTop = scrollTop;\n    }\n    /**\n     * Resets the current search value\n     * @param focus whether to focus after resetting\n     */\n    _reset(focus) {\n        this._formControl.setValue('');\n        if (focus) {\n            this._focus();\n        }\n    }\n    /**\n     * Initializes handling <mat-select [multiple]=\"true\">\n     * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n     */\n    initMultipleHandling() {\n        if (!this.matSelect.ngControl) {\n            if (this.matSelect.multiple) {\n                // note: the access to matSelect.ngControl (instead of matSelect.value / matSelect.valueChanges)\n                // is necessary to properly work in multi-selection mode.\n                console.error('the mat-select containing ngx-mat-select-search must have a ngModel or formControl directive when multiple=true');\n            }\n            return;\n        }\n        // if <mat-select [multiple]=\"true\">\n        // store previously selected values and restore them when they are deselected\n        // because the option is not available while we are currently filtering\n        this.previousSelectedValues = this.matSelect.ngControl.value;\n        this.matSelect.ngControl.valueChanges\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((values) => {\n            let restoreSelectedValues = false;\n            if (this.matSelect.multiple) {\n                if ((this.alwaysRestoreSelectedOptionsMulti || (this._formControl.value && this._formControl.value.length))\n                    && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n                    if (!values || !Array.isArray(values)) {\n                        values = [];\n                    }\n                    const optionValues = this.matSelect.options.map(option => option.value);\n                    this.previousSelectedValues.forEach(previousValue => {\n                        if (!values.some(v => this.matSelect.compareWith(v, previousValue))\n                            && !optionValues.some(v => this.matSelect.compareWith(v, previousValue))) {\n                            // if a value that was selected before is deselected and not found in the options, it was deselected\n                            // due to the filtering, so we restore it.\n                            values.push(previousValue);\n                            restoreSelectedValues = true;\n                        }\n                    });\n                }\n            }\n            this.previousSelectedValues = values;\n            if (restoreSelectedValues) {\n                this.matSelect._onChange(values);\n            }\n        });\n    }\n    /**\n     * Scrolls the currently active option into the view if it is not yet visible.\n     */\n    adjustScrollTopToFitActiveOptionIntoView() {\n        if (this.matSelect.panel && this.matSelect.options.length > 0) {\n            const matOptionHeight = this.getMatOptionHeight();\n            const activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\n            const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups);\n            // If the component is in a MatOption, the activeItemIndex will be offset by one.\n            const indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\n            const currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\n            const searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight;\n            const amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\n            const indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\n            if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\n                this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\n            }\n            else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\n                this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight\n                    - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\n            }\n        }\n    }\n    /**\n     *  Set the width of the innerSelectSearch to fit even custom scrollbars\n     *  And support all Operation Systems\n     */\n    updateInputWidth() {\n        if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n            return;\n        }\n        let element = this.innerSelectSearch.nativeElement;\n        let panelElement;\n        while (element = element.parentElement) {\n            if (element.classList.contains('mat-select-panel')) {\n                panelElement = element;\n                break;\n            }\n        }\n        if (panelElement) {\n            this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n        }\n    }\n    getMatOptionHeight() {\n        if (this.matSelect.options.length > 0) {\n            return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\n        }\n        return 0;\n    }\n    /**\n     * Determine the offset to length that can be caused by the optional matOption used as a search input.\n     */\n    getOptionsLengthOffset() {\n        if (this.matOption) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    unselectActiveDescendant() {\n        var _a;\n        (_a = this.activeDescendant) === null || _a === void 0 ? void 0 : _a.removeAttribute('aria-selected');\n        this.searchSelectInput.nativeElement.removeAttribute('aria-activedescendant');\n    }\n}\nMatSelectSearchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectSearchComponent, deps: [{ token: MatSelect }, { token: i0.ChangeDetectorRef }, { token: i1.ViewportRuler }, { token: MatOption, optional: true }, { token: MatFormField, optional: true }, { token: MAT_SELECTSEARCH_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatSelectSearchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.10\", type: MatSelectSearchComponent, selector: \"ngx-mat-select-search\", inputs: { placeholderLabel: \"placeholderLabel\", type: \"type\", closeIcon: \"closeIcon\", closeSvgIcon: \"closeSvgIcon\", noEntriesFoundLabel: \"noEntriesFoundLabel\", clearSearchInput: \"clearSearchInput\", searching: \"searching\", disableInitialFocus: \"disableInitialFocus\", enableClearOnEscapePressed: \"enableClearOnEscapePressed\", preventHomeEndKeyPropagation: \"preventHomeEndKeyPropagation\", disableScrollToActiveOnOptionsChanged: \"disableScrollToActiveOnOptionsChanged\", ariaLabel: \"ariaLabel\", showToggleAllCheckbox: \"showToggleAllCheckbox\", toggleAllCheckboxChecked: \"toggleAllCheckboxChecked\", toggleAllCheckboxIndeterminate: \"toggleAllCheckboxIndeterminate\", toggleAllCheckboxTooltipMessage: \"toggleAllCheckboxTooltipMessage\", toggleAllCheckboxTooltipPosition: \"toggleAllCheckboxTooltipPosition\", hideClearSearchButton: \"hideClearSearchButton\", alwaysRestoreSelectedOptionsMulti: \"alwaysRestoreSelectedOptionsMulti\" }, outputs: { toggleAll: \"toggleAll\" }, host: { properties: { \"class.mat-select-search-inside-mat-option\": \"this.isInsideMatOption\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MatSelectSearchComponent),\n            multi: true\n        }\n    ], queries: [{ propertyName: \"clearIcon\", first: true, predicate: MatSelectSearchClearDirective, descendants: true }, { propertyName: \"noEntriesFound\", first: true, predicate: MatSelectNoEntriesFoundDirective, descendants: true }], viewQueries: [{ propertyName: \"searchSelectInput\", first: true, predicate: [\"searchSelectInput\"], descendants: true, read: ElementRef, static: true }, { propertyName: \"innerSelectSearch\", first: true, predicate: [\"innerSelectSearch\"], descendants: true, read: ElementRef, static: true }], ngImport: i0, template: \"<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\n\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\n<div\\n      #innerSelectSearch\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\n\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\n                [color]=\\\"matFormField?.color\\\"\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\n                [matTooltip]=\\\"toggleAllCheckboxTooltipMessage\\\"\\n                matTooltipClass=\\\"ngx-mat-select-search-toggle-all-tooltip\\\"\\n                [matTooltipPosition]=\\\"toggleAllCheckboxTooltipPosition\\\"\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\n  ></mat-checkbox>\\n\\n  <input class=\\\"mat-select-search-input mat-input-element\\\"\\n         autocomplete=\\\"off\\\"\\n         [type]=\\\"type\\\"\\n         [formControl]=\\\"_formControl\\\"\\n         #searchSelectInput\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\n         (keyup)=\\\"_handleKeyup($event)\\\"\\n         (blur)=\\\"onBlur()\\\"\\n         [placeholder]=\\\"placeholderLabel\\\"\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\n  />\\n  <mat-spinner *ngIf=\\\"searching\\\"\\n          class=\\\"mat-select-search-spinner\\\"\\n          diameter=\\\"16\\\"></mat-spinner>\\n\\n  <button mat-button\\n          *ngIf=\\\"!hideClearSearchButton && value && !searching\\\"\\n          mat-icon-button\\n          aria-label=\\\"Clear\\\"\\n          (click)=\\\"_reset(true)\\\"\\n          class=\\\"mat-select-search-clear\\\">\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\n    <ng-template #defaultIcon>\\n      <mat-icon [svgIcon]=\\\"closeSvgIcon\\\">\\n        {{!closeSvgIcon ? closeIcon : null}}\\n      </mat-icon>\\n    </ng-template>\\n  </button>\\n\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\n\\n</div>\\n\\n<div *ngIf=\\\"_showNoEntriesFound$ | async\\\"\\n     class=\\\"mat-select-search-no-entries-found\\\">\\n  <ng-content *ngIf=\\\"noEntriesFound; else defaultNoEntriesFound\\\"\\n              select=\\\"[ngxMatSelectNoEntriesFound]\\\"></ng-content>\\n  <ng-template #defaultNoEntriesFound>{{noEntriesFoundLabel}}</ng-template>\\n</div>\\n<!--\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\n\\nUse of this source code is governed by an MIT-style license that can be\\nfound in the LICENSE file at https://angular.io/license\\n-->\\n\", styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-inner .mat-input-element{flex-basis:auto}.mat-select-search-inner .mat-input-element:-ms-input-placeholder{-ms-user-select:text}::ng-deep .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}:host-context([dir=rtl]) .mat-select-search-input{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found{padding:16px}.mat-select-search-clear{position:absolute;right:4px;top:5px}:host-context([dir=rtl]) .mat-select-search-clear{right:auto;left:4px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host-context([dir=rtl]) .mat-select-search-spinner{right:auto;left:16px}:host.mat-select-search-inside-mat-option .mat-select-search-input{padding-top:0;padding-bottom:0;height:3em;line-height:3em}:host.mat-select-search-inside-mat-option .mat-select-search-clear{top:3px}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox{padding-left:16px;padding-bottom:2px}:host-context([dir=rtl]) .mat-select-search-toggle-all-checkbox{padding-left:0;padding-right:16px}\\n\"], components: [{ type: i2.MatCheckbox, selector: \"mat-checkbox\", inputs: [\"disableRipple\", \"color\", \"tabIndex\", \"aria-label\", \"aria-labelledby\", \"aria-describedby\", \"id\", \"required\", \"labelPosition\", \"name\", \"value\", \"checked\", \"disabled\", \"indeterminate\"], outputs: [\"change\", \"indeterminateChange\"], exportAs: [\"matCheckbox\"] }, { type: i3.MatProgressSpinner, selector: \"mat-progress-spinner, mat-spinner\", inputs: [\"color\", \"diameter\", \"strokeWidth\", \"mode\", \"value\"], exportAs: [\"matProgressSpinner\"] }, { type: i4.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i5.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }], directives: [{ type: i6.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i6.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i7.MatTooltip, selector: \"[matTooltip]\", exportAs: [\"matTooltip\"] }, { type: i8.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i8.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i8.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }], pipes: { \"async\": i6.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: MatSelectSearchComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-mat-select-search', providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => MatSelectSearchComponent),\n                            multi: true\n                        }\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, template: \"<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\n\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\n<div\\n      #innerSelectSearch\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\n\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\n                [color]=\\\"matFormField?.color\\\"\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\n                [matTooltip]=\\\"toggleAllCheckboxTooltipMessage\\\"\\n                matTooltipClass=\\\"ngx-mat-select-search-toggle-all-tooltip\\\"\\n                [matTooltipPosition]=\\\"toggleAllCheckboxTooltipPosition\\\"\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\n  ></mat-checkbox>\\n\\n  <input class=\\\"mat-select-search-input mat-input-element\\\"\\n         autocomplete=\\\"off\\\"\\n         [type]=\\\"type\\\"\\n         [formControl]=\\\"_formControl\\\"\\n         #searchSelectInput\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\n         (keyup)=\\\"_handleKeyup($event)\\\"\\n         (blur)=\\\"onBlur()\\\"\\n         [placeholder]=\\\"placeholderLabel\\\"\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\n  />\\n  <mat-spinner *ngIf=\\\"searching\\\"\\n          class=\\\"mat-select-search-spinner\\\"\\n          diameter=\\\"16\\\"></mat-spinner>\\n\\n  <button mat-button\\n          *ngIf=\\\"!hideClearSearchButton && value && !searching\\\"\\n          mat-icon-button\\n          aria-label=\\\"Clear\\\"\\n          (click)=\\\"_reset(true)\\\"\\n          class=\\\"mat-select-search-clear\\\">\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\n    <ng-template #defaultIcon>\\n      <mat-icon [svgIcon]=\\\"closeSvgIcon\\\">\\n        {{!closeSvgIcon ? closeIcon : null}}\\n      </mat-icon>\\n    </ng-template>\\n  </button>\\n\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\n\\n</div>\\n\\n<div *ngIf=\\\"_showNoEntriesFound$ | async\\\"\\n     class=\\\"mat-select-search-no-entries-found\\\">\\n  <ng-content *ngIf=\\\"noEntriesFound; else defaultNoEntriesFound\\\"\\n              select=\\\"[ngxMatSelectNoEntriesFound]\\\"></ng-content>\\n  <ng-template #defaultNoEntriesFound>{{noEntriesFoundLabel}}</ng-template>\\n</div>\\n<!--\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\n\\nUse of this source code is governed by an MIT-style license that can be\\nfound in the LICENSE file at https://angular.io/license\\n-->\\n\", styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-inner .mat-input-element{flex-basis:auto}.mat-select-search-inner .mat-input-element:-ms-input-placeholder{-ms-user-select:text}::ng-deep .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}:host-context([dir=rtl]) .mat-select-search-input{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found{padding:16px}.mat-select-search-clear{position:absolute;right:4px;top:5px}:host-context([dir=rtl]) .mat-select-search-clear{right:auto;left:4px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host-context([dir=rtl]) .mat-select-search-spinner{right:auto;left:16px}:host.mat-select-search-inside-mat-option .mat-select-search-input{padding-top:0;padding-bottom:0;height:3em;line-height:3em}:host.mat-select-search-inside-mat-option .mat-select-search-clear{top:3px}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox{padding-left:16px;padding-bottom:2px}:host-context([dir=rtl]) .mat-select-search-toggle-all-checkbox{padding-left:0;padding-right:16px}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i9.MatSelect, decorators: [{\n                        type: Inject,\n                        args: [MatSelect]\n                    }] }, { type: i0.ChangeDetectorRef }, { type: i1.ViewportRuler }, { type: i10.MatOption, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MatOption]\n                    }] }, { type: i11.MatFormField, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MatFormField]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_SELECTSEARCH_DEFAULT_OPTIONS]\n                    }] }];\n    }, propDecorators: { placeholderLabel: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], closeIcon: [{\n                type: Input\n            }], closeSvgIcon: [{\n                type: Input\n            }], noEntriesFoundLabel: [{\n                type: Input\n            }], clearSearchInput: [{\n                type: Input\n            }], searching: [{\n                type: Input\n            }], disableInitialFocus: [{\n                type: Input\n            }], enableClearOnEscapePressed: [{\n                type: Input\n            }], preventHomeEndKeyPropagation: [{\n                type: Input\n            }], disableScrollToActiveOnOptionsChanged: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], showToggleAllCheckbox: [{\n                type: Input\n            }], toggleAllCheckboxChecked: [{\n                type: Input\n            }], toggleAllCheckboxIndeterminate: [{\n                type: Input\n            }], toggleAllCheckboxTooltipMessage: [{\n                type: Input\n            }], toggleAllCheckboxTooltipPosition: [{\n                type: Input\n            }], hideClearSearchButton: [{\n                type: Input\n            }], alwaysRestoreSelectedOptionsMulti: [{\n                type: Input\n            }], toggleAll: [{\n                type: Output\n            }], searchSelectInput: [{\n                type: ViewChild,\n                args: ['searchSelectInput', { read: ElementRef, static: true }]\n            }], innerSelectSearch: [{\n                type: ViewChild,\n                args: ['innerSelectSearch', { read: ElementRef, static: true }]\n            }], clearIcon: [{\n                type: ContentChild,\n                args: [MatSelectSearchClearDirective]\n            }], noEntriesFound: [{\n                type: ContentChild,\n                args: [MatSelectNoEntriesFoundDirective]\n            }], isInsideMatOption: [{\n                type: HostBinding,\n                args: ['class.mat-select-search-inside-mat-option']\n            }] } });\n\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MatSelectSearchVersion = '5.0.0';\nclass NgxMatSelectSearchModule {\n}\nNgxMatSelectSearchModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: NgxMatSelectSearchModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxMatSelectSearchModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: NgxMatSelectSearchModule, declarations: [MatSelectSearchComponent,\n        MatSelectSearchClearDirective,\n        MatSelectNoEntriesFoundDirective], imports: [CommonModule,\n        ReactiveFormsModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        MatIconModule,\n        MatProgressSpinnerModule,\n        MatTooltipModule], exports: [MatSelectSearchComponent,\n        MatSelectSearchClearDirective,\n        MatSelectNoEntriesFoundDirective] });\nNgxMatSelectSearchModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: NgxMatSelectSearchModule, imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            MatButtonModule,\n            MatCheckboxModule,\n            MatIconModule,\n            MatProgressSpinnerModule,\n            MatTooltipModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.10\", ngImport: i0, type: NgxMatSelectSearchModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        MatButtonModule,\n                        MatCheckboxModule,\n                        MatIconModule,\n                        MatProgressSpinnerModule,\n                        MatTooltipModule\n                    ],\n                    declarations: [\n                        MatSelectSearchComponent,\n                        MatSelectSearchClearDirective,\n                        MatSelectNoEntriesFoundDirective\n                    ],\n                    exports: [\n                        MatSelectSearchComponent,\n                        MatSelectSearchClearDirective,\n                        MatSelectNoEntriesFoundDirective\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MATSELECTSEARCH_GLOBAL_OPTIONS, MAT_SELECTSEARCH_DEFAULT_OPTIONS, MatSelectNoEntriesFoundDirective, MatSelectSearchClearDirective, MatSelectSearchComponent, MatSelectSearchVersion, NgxMatSelectSearchModule, configurableDefaultOptions, configurableGlobalOptions };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _inherits from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, SkipSelf, ErrorHandler, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\n\nvar _c0 = [\"*\"];\nvar policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\n\nfunction getPolicy() {\n  if (policy === undefined) {\n    policy = null;\n\n    if (typeof window !== 'undefined') {\n      var ttWindow = window;\n\n      if (ttWindow.trustedTypes !== undefined) {\n        policy = ttWindow.trustedTypes.createPolicy('angular#components', {\n          createHTML: function createHTML(s) {\n            return s;\n          }\n        });\n      }\n    }\n  }\n\n  return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\n\n\nfunction trustedHTMLFromString(html) {\n  var _a;\n\n  return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createHTML(html)) || html;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\n\n\nfunction getMatIconNameNotFoundError(iconName) {\n  return Error(\"Unable to find icon with the name \\\"\".concat(iconName, \"\\\"\"));\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\n\n\nfunction getMatIconNoHttpProviderError() {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' + 'Please include the HttpClientModule from @angular/common/http in your ' + 'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\n\n\nfunction getMatIconFailedToSanitizeUrlError(url) {\n  return Error(\"The URL provided to MatIconRegistry was not trusted as a resource URL \" + \"via Angular's DomSanitizer. Attempted URL was \\\"\".concat(url, \"\\\".\"));\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\n\n\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n  return Error(\"The literal provided to MatIconRegistry was not trusted as safe HTML by \" + \"Angular's DomSanitizer. Attempted literal was \\\"\".concat(literal, \"\\\".\"));\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\n\n\nvar SvgIconConfig = /*#__PURE__*/_createClass(function SvgIconConfig(url, svgText, options) {\n  _classCallCheck(this, SvgIconConfig);\n\n  this.url = url;\n  this.svgText = svgText;\n  this.options = options;\n});\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n\n\nvar MatIconRegistry = /*#__PURE__*/function () {\n  function MatIconRegistry(_httpClient, _sanitizer, document, _errorHandler) {\n    _classCallCheck(this, MatIconRegistry);\n\n    this._httpClient = _httpClient;\n    this._sanitizer = _sanitizer;\n    this._errorHandler = _errorHandler;\n    /**\n     * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n     */\n\n    this._svgIconConfigs = new Map();\n    /**\n     * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n     * Multiple icon sets can be registered under the same namespace.\n     */\n\n    this._iconSetConfigs = new Map();\n    /** Cache for icons loaded by direct URLs. */\n\n    this._cachedIconsByUrl = new Map();\n    /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n\n    this._inProgressUrlFetches = new Map();\n    /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n\n    this._fontCssClassesByAlias = new Map();\n    /** Registered icon resolver functions. */\n\n    this._resolvers = [];\n    /**\n     * The CSS classes to apply when an `<mat-icon>` component has no icon name, url, or font\n     * specified. The default 'material-icons' value assumes that the material icon font has been\n     * loaded as described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n     */\n\n    this._defaultFontSetClass = ['material-icons', 'mat-ligature-font'];\n    this._document = document;\n  }\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n\n\n  _createClass(MatIconRegistry, [{\n    key: \"addSvgIcon\",\n    value: function addSvgIcon(iconName, url, options) {\n      return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n\n  }, {\n    key: \"addSvgIconLiteral\",\n    value: function addSvgIconLiteral(iconName, literal, options) {\n      return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n\n  }, {\n    key: \"addSvgIconInNamespace\",\n    value: function addSvgIconInNamespace(namespace, iconName, url, options) {\n      return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n\n  }, {\n    key: \"addSvgIconResolver\",\n    value: function addSvgIconResolver(resolver) {\n      this._resolvers.push(resolver);\n\n      return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n\n  }, {\n    key: \"addSvgIconLiteralInNamespace\",\n    value: function addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n      var cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal); // TODO: add an ngDevMode check\n\n\n      if (!cleanLiteral) {\n        throw getMatIconFailedToSanitizeLiteralError(literal);\n      } // Security: The literal is passed in as SafeHtml, and is thus trusted.\n\n\n      var trustedLiteral = trustedHTMLFromString(cleanLiteral);\n      return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n\n  }, {\n    key: \"addSvgIconSet\",\n    value: function addSvgIconSet(url, options) {\n      return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n\n  }, {\n    key: \"addSvgIconSetLiteral\",\n    value: function addSvgIconSetLiteral(literal, options) {\n      return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n\n  }, {\n    key: \"addSvgIconSetInNamespace\",\n    value: function addSvgIconSetInNamespace(namespace, url, options) {\n      return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n\n  }, {\n    key: \"addSvgIconSetLiteralInNamespace\",\n    value: function addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n      var cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n      if (!cleanLiteral) {\n        throw getMatIconFailedToSanitizeLiteralError(literal);\n      } // Security: The literal is passed in as SafeHtml, and is thus trusted.\n\n\n      var trustedLiteral = trustedHTMLFromString(cleanLiteral);\n      return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Defines an alias for CSS class names to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * If the registered font is a ligature font, then don't forget to also include the special\n     * class `mat-ligature-font` to allow the usage via attribute. So register like this:\n     *\n     * ```ts\n     * iconRegistry.registerFontClassAlias('f1', 'font1 mat-ligature-font');\n     * ```\n     *\n     * And use like this:\n     *\n     * ```html\n     * <mat-icon fontSet=\"f1\" fontIcon=\"home\"></mat-icon>\n     * ```\n     *\n     * @param alias Alias for the font.\n     * @param classNames Class names override to be used instead of the alias.\n     */\n\n  }, {\n    key: \"registerFontClassAlias\",\n    value: function registerFontClassAlias(alias) {\n      var classNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : alias;\n\n      this._fontCssClassesByAlias.set(alias, classNames);\n\n      return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n\n  }, {\n    key: \"classNameForFontAlias\",\n    value: function classNameForFontAlias(alias) {\n      return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n\n  }, {\n    key: \"setDefaultFontSetClass\",\n    value: function setDefaultFontSetClass() {\n      for (var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++) {\n        classNames[_key] = arguments[_key];\n      }\n\n      this._defaultFontSetClass = classNames;\n      return this;\n    }\n    /**\n     * Returns the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n\n  }, {\n    key: \"getDefaultFontSetClass\",\n    value: function getDefaultFontSetClass() {\n      return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n\n  }, {\n    key: \"getSvgIconFromUrl\",\n    value: function getSvgIconFromUrl(safeUrl) {\n      var _this = this;\n\n      var url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n      if (!url) {\n        throw getMatIconFailedToSanitizeUrlError(safeUrl);\n      }\n\n      var cachedIcon = this._cachedIconsByUrl.get(url);\n\n      if (cachedIcon) {\n        return of(cloneSvg(cachedIcon));\n      }\n\n      return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(function (svg) {\n        return _this._cachedIconsByUrl.set(url, svg);\n      }), map(function (svg) {\n        return cloneSvg(svg);\n      }));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n\n  }, {\n    key: \"getNamedSvgIcon\",\n    value: function getNamedSvgIcon(name) {\n      var namespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var key = iconKey(namespace, name);\n\n      var config = this._svgIconConfigs.get(key); // Return (copy of) cached icon if possible.\n\n\n      if (config) {\n        return this._getSvgFromConfig(config);\n      } // Otherwise try to resolve the config from one of the resolver functions.\n\n\n      config = this._getIconConfigFromResolvers(namespace, name);\n\n      if (config) {\n        this._svgIconConfigs.set(key, config);\n\n        return this._getSvgFromConfig(config);\n      } // See if we have any icon sets registered for the namespace.\n\n\n      var iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n      if (iconSetConfigs) {\n        return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n      }\n\n      return throwError(getMatIconNameNotFoundError(key));\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._resolvers = [];\n\n      this._svgIconConfigs.clear();\n\n      this._iconSetConfigs.clear();\n\n      this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n\n  }, {\n    key: \"_getSvgFromConfig\",\n    value: function _getSvgFromConfig(config) {\n      if (config.svgText) {\n        // We already have the SVG element for this icon, return a copy.\n        return of(cloneSvg(this._svgElementFromConfig(config)));\n      } else {\n        // Fetch the icon from the config's URL, cache it, and return a copy.\n        return this._loadSvgIconFromConfig(config).pipe(map(function (svg) {\n          return cloneSvg(svg);\n        }));\n      }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n\n  }, {\n    key: \"_getSvgFromIconSetConfigs\",\n    value: function _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n      var _this2 = this;\n\n      // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n      // requested name.\n      var namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (namedIcon) {\n        // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n        // time anyway, there's probably not much advantage compared to just always extracting\n        // it from the icon set.\n        return of(namedIcon);\n      } // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n      // fetched, fetch them now and look for iconName in the results.\n\n\n      var iconSetFetchRequests = iconSetConfigs.filter(function (iconSetConfig) {\n        return !iconSetConfig.svgText;\n      }).map(function (iconSetConfig) {\n        return _this2._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError(function (err) {\n          var url = _this2._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url); // Swallow errors fetching individual URLs so the\n          // combined Observable won't necessarily fail.\n\n\n          var errorMessage = \"Loading icon set URL: \".concat(url, \" failed: \").concat(err.message);\n\n          _this2._errorHandler.handleError(new Error(errorMessage));\n\n          return of(null);\n        }));\n      }); // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n      // cached SVG element (unless the request failed), and we can check again for the icon.\n\n      return forkJoin(iconSetFetchRequests).pipe(map(function () {\n        var foundIcon = _this2._extractIconWithNameFromAnySet(name, iconSetConfigs); // TODO: add an ngDevMode check\n\n\n        if (!foundIcon) {\n          throw getMatIconNameNotFoundError(name);\n        }\n\n        return foundIcon;\n      }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n\n  }, {\n    key: \"_extractIconWithNameFromAnySet\",\n    value: function _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n      // Iterate backwards, so icon sets added later have precedence.\n      for (var i = iconSetConfigs.length - 1; i >= 0; i--) {\n        var config = iconSetConfigs[i]; // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n        // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n        // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n        // some of the parsing.\n\n        if (config.svgText && config.svgText.toString().indexOf(iconName) > -1) {\n          var svg = this._svgElementFromConfig(config);\n\n          var foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n\n          if (foundIcon) {\n            return foundIcon;\n          }\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n\n  }, {\n    key: \"_loadSvgIconFromConfig\",\n    value: function _loadSvgIconFromConfig(config) {\n      var _this3 = this;\n\n      return this._fetchIcon(config).pipe(tap(function (svgText) {\n        return config.svgText = svgText;\n      }), map(function () {\n        return _this3._svgElementFromConfig(config);\n      }));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n\n  }, {\n    key: \"_loadSvgIconSetFromConfig\",\n    value: function _loadSvgIconSetFromConfig(config) {\n      if (config.svgText) {\n        return of(null);\n      }\n\n      return this._fetchIcon(config).pipe(tap(function (svgText) {\n        return config.svgText = svgText;\n      }));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n\n  }, {\n    key: \"_extractSvgIconFromSet\",\n    value: function _extractSvgIconFromSet(iconSet, iconName, options) {\n      // Use the `id=\"iconName\"` syntax in order to escape special\n      // characters in the ID (versus using the #iconName syntax).\n      var iconSource = iconSet.querySelector(\"[id=\\\"\".concat(iconName, \"\\\"]\"));\n\n      if (!iconSource) {\n        return null;\n      } // Clone the element and remove the ID to prevent multiple elements from being added\n      // to the page with the same ID.\n\n\n      var iconElement = iconSource.cloneNode(true);\n      iconElement.removeAttribute('id'); // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n      // the content of a new <svg> node.\n\n      if (iconElement.nodeName.toLowerCase() === 'svg') {\n        return this._setSvgAttributes(iconElement, options);\n      } // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n      // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n      // tag is problematic on Firefox, because it needs to include the current page path.\n\n\n      if (iconElement.nodeName.toLowerCase() === 'symbol') {\n        return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n      } // createElement('SVG') doesn't work as expected; the DOM ends up with\n      // the correct nodes, but the SVG content doesn't render. Instead we\n      // have to create an empty SVG node using innerHTML and append its content.\n      // Elements created using DOMParser.parseFromString have the same problem.\n      // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n\n\n      var svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>')); // Clone the node so we don't remove it from the parent icon set element.\n\n\n      svg.appendChild(iconElement);\n      return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n\n  }, {\n    key: \"_svgElementFromString\",\n    value: function _svgElementFromString(str) {\n      var div = this._document.createElement('DIV');\n\n      div.innerHTML = str;\n      var svg = div.querySelector('svg'); // TODO: add an ngDevMode check\n\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n\n      return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n\n  }, {\n    key: \"_toSvgElement\",\n    value: function _toSvgElement(element) {\n      var svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n\n      var attributes = element.attributes; // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n\n      for (var i = 0; i < attributes.length; i++) {\n        var _attributes$i = attributes[i],\n            name = _attributes$i.name,\n            value = _attributes$i.value;\n\n        if (name !== 'id') {\n          svg.setAttribute(name, value);\n        }\n      }\n\n      for (var _i = 0; _i < element.childNodes.length; _i++) {\n        if (element.childNodes[_i].nodeType === this._document.ELEMENT_NODE) {\n          svg.appendChild(element.childNodes[_i].cloneNode(true));\n        }\n      }\n\n      return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n\n  }, {\n    key: \"_setSvgAttributes\",\n    value: function _setSvgAttributes(svg, options) {\n      svg.setAttribute('fit', '');\n      svg.setAttribute('height', '100%');\n      svg.setAttribute('width', '100%');\n      svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n      svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n      if (options && options.viewBox) {\n        svg.setAttribute('viewBox', options.viewBox);\n      }\n\n      return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n\n  }, {\n    key: \"_fetchIcon\",\n    value: function _fetchIcon(iconConfig) {\n      var _this4 = this;\n\n      var _a;\n\n      var safeUrl = iconConfig.url,\n          options = iconConfig.options;\n      var withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;\n\n      if (!this._httpClient) {\n        throw getMatIconNoHttpProviderError();\n      } // TODO: add an ngDevMode check\n\n\n      if (safeUrl == null) {\n        throw Error(\"Cannot fetch icon from URL \\\"\".concat(safeUrl, \"\\\".\"));\n      }\n\n      var url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl); // TODO: add an ngDevMode check\n\n\n      if (!url) {\n        throw getMatIconFailedToSanitizeUrlError(safeUrl);\n      } // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n      // already a request in progress for that URL. It's necessary to call share() on the\n      // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n\n\n      var inProgressFetch = this._inProgressUrlFetches.get(url);\n\n      if (inProgressFetch) {\n        return inProgressFetch;\n      }\n\n      var req = this._httpClient.get(url, {\n        responseType: 'text',\n        withCredentials: withCredentials\n      }).pipe(map(function (svg) {\n        // Security: This SVG is fetched from a SafeResourceUrl, and is thus\n        // trusted HTML.\n        return trustedHTMLFromString(svg);\n      }), finalize(function () {\n        return _this4._inProgressUrlFetches.delete(url);\n      }), share());\n\n      this._inProgressUrlFetches.set(url, req);\n\n      return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n\n  }, {\n    key: \"_addSvgIconConfig\",\n    value: function _addSvgIconConfig(namespace, iconName, config) {\n      this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n\n      return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n\n  }, {\n    key: \"_addSvgIconSetConfig\",\n    value: function _addSvgIconSetConfig(namespace, config) {\n      var configNamespace = this._iconSetConfigs.get(namespace);\n\n      if (configNamespace) {\n        configNamespace.push(config);\n      } else {\n        this._iconSetConfigs.set(namespace, [config]);\n      }\n\n      return this;\n    }\n    /** Parses a config's text into an SVG element. */\n\n  }, {\n    key: \"_svgElementFromConfig\",\n    value: function _svgElementFromConfig(config) {\n      if (!config.svgElement) {\n        var svg = this._svgElementFromString(config.svgText);\n\n        this._setSvgAttributes(svg, config.options);\n\n        config.svgElement = svg;\n      }\n\n      return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n\n  }, {\n    key: \"_getIconConfigFromResolvers\",\n    value: function _getIconConfigFromResolvers(namespace, name) {\n      for (var i = 0; i < this._resolvers.length; i++) {\n        var result = this._resolvers[i](name, namespace);\n\n        if (result) {\n          return isSafeUrlWithOptions(result) ? new SvgIconConfig(result.url, null, result.options) : new SvgIconConfig(result, null);\n        }\n      }\n\n      return undefined;\n    }\n  }]);\n\n  return MatIconRegistry;\n}();\n\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) {\n  return new (t || MatIconRegistry)(i0.ɵɵinject(i1.HttpClient, 8), i0.ɵɵinject(i2.DomSanitizer), i0.ɵɵinject(DOCUMENT, 8), i0.ɵɵinject(i0.ErrorHandler));\n};\n\nMatIconRegistry.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MatIconRegistry,\n  factory: MatIconRegistry.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatIconRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.DomSanitizer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.ErrorHandler\n    }];\n  }, null);\n})();\n/** @docs-private */\n\n\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\n\n\nvar ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MatIconRegistry], [new Optional(), HttpClient], DomSanitizer, ErrorHandler, [new Optional(), DOCUMENT]],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/** Clones an SVGElement while preserving type information. */\n\nfunction cloneSvg(svg) {\n  return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\n\n\nfunction iconKey(namespace, name) {\n  return namespace + ':' + name;\n}\n\nfunction isSafeUrlWithOptions(value) {\n  return !!(value.url && value.options);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n\n/** @docs-private */\n\n\nvar _MatIconBase = mixinColor( /*#__PURE__*/function () {\n  function _class(_elementRef) {\n    _classCallCheck(this, _class);\n\n    this._elementRef = _elementRef;\n  }\n\n  return _createClass(_class);\n}());\n/** Injection token to be used to override the default options for `mat-icon`. */\n\n\nvar MAT_ICON_DEFAULT_OPTIONS = new InjectionToken('MAT_ICON_DEFAULT_OPTIONS');\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\n\nvar MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_ICON_LOCATION_FACTORY() {\n  var _document = inject(DOCUMENT);\n\n  var _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: function getPathname() {\n      return _location ? _location.pathname + _location.search : '';\n    }\n  };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\n\n\nvar funcIriAttributes = ['clip-path', 'color-profile', 'src', 'cursor', 'fill', 'filter', 'marker', 'marker-start', 'marker-mid', 'marker-end', 'mask', 'stroke'];\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\n\nvar funcIriAttributeSelector = funcIriAttributes.map(function (attr) {\n  return \"[\".concat(attr, \"]\");\n}).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\n\nvar funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the `fontIcon` attribute or the\n *   content of the `<mat-icon>` component. If you register a custom font class, don't forget to also\n *   include the special class `mat-ligature-font`. It is recommended to use the attribute alternative\n *   to prevent the ligature text to be selectable and to appear in search engine results.\n *   By default, the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon fontIcon=\"home\"></mat-icon>\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\" fontIcon=\"sun\"></mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n\nvar MatIcon = /*#__PURE__*/function (_MatIconBase2) {\n  _inherits(MatIcon, _MatIconBase2);\n\n  var _super = _createSuper(MatIcon);\n\n  function MatIcon(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler, defaults) {\n    var _this5;\n\n    _classCallCheck(this, MatIcon);\n\n    _this5 = _super.call(this, elementRef);\n    _this5._iconRegistry = _iconRegistry;\n    _this5._location = _location;\n    _this5._errorHandler = _errorHandler;\n    _this5._inline = false;\n    _this5._previousFontSetClass = [];\n    /** Subscription to the current in-progress SVG icon request. */\n\n    _this5._currentIconFetch = Subscription.EMPTY;\n\n    if (defaults) {\n      if (defaults.color) {\n        _this5.color = _this5.defaultColor = defaults.color;\n      }\n\n      if (defaults.fontSet) {\n        _this5.fontSet = defaults.fontSet;\n      }\n    } // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n\n\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n\n    return _this5;\n  }\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n\n\n  _createClass(MatIcon, [{\n    key: \"inline\",\n    get: function get() {\n      return this._inline;\n    },\n    set: function set(inline) {\n      this._inline = coerceBooleanProperty(inline);\n    }\n    /** Name of the icon in the SVG icon set. */\n\n  }, {\n    key: \"svgIcon\",\n    get: function get() {\n      return this._svgIcon;\n    },\n    set: function set(value) {\n      if (value !== this._svgIcon) {\n        if (value) {\n          this._updateSvgIcon(value);\n        } else if (this._svgIcon) {\n          this._clearSvgElement();\n        }\n\n        this._svgIcon = value;\n      }\n    }\n    /** Font set that the icon is a part of. */\n\n  }, {\n    key: \"fontSet\",\n    get: function get() {\n      return this._fontSet;\n    },\n    set: function set(value) {\n      var newValue = this._cleanupFontValue(value);\n\n      if (newValue !== this._fontSet) {\n        this._fontSet = newValue;\n\n        this._updateFontIconClasses();\n      }\n    }\n    /** Name of an icon within a font set. */\n\n  }, {\n    key: \"fontIcon\",\n    get: function get() {\n      return this._fontIcon;\n    },\n    set: function set(value) {\n      var newValue = this._cleanupFontValue(value);\n\n      if (newValue !== this._fontIcon) {\n        this._fontIcon = newValue;\n\n        this._updateFontIconClasses();\n      }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n\n  }, {\n    key: \"_splitIconName\",\n    value: function _splitIconName(iconName) {\n      if (!iconName) {\n        return ['', ''];\n      }\n\n      var parts = iconName.split(':');\n\n      switch (parts.length) {\n        case 1:\n          return ['', parts[0]];\n        // Use default namespace.\n\n        case 2:\n          return parts;\n\n        default:\n          throw Error(\"Invalid icon name: \\\"\".concat(iconName, \"\\\"\"));\n        // TODO: add an ngDevMode check\n      }\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n      // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n      this._updateFontIconClasses();\n    }\n  }, {\n    key: \"ngAfterViewChecked\",\n    value: function ngAfterViewChecked() {\n      var cachedElements = this._elementsWithExternalReferences;\n\n      if (cachedElements && cachedElements.size) {\n        var newPath = this._location.getPathname(); // We need to check whether the URL has changed on each change detection since\n        // the browser doesn't have an API that will let us react on link clicks and\n        // we can't depend on the Angular router. The references need to be updated,\n        // because while most browsers don't care whether the URL is correct after\n        // the first render, Safari will break if the user navigates to a different\n        // page and the SVG isn't re-rendered.\n\n\n        if (newPath !== this._previousPath) {\n          this._previousPath = newPath;\n\n          this._prependPathToReferences(newPath);\n        }\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._currentIconFetch.unsubscribe();\n\n      if (this._elementsWithExternalReferences) {\n        this._elementsWithExternalReferences.clear();\n      }\n    }\n  }, {\n    key: \"_usingFontIcon\",\n    value: function _usingFontIcon() {\n      return !this.svgIcon;\n    }\n  }, {\n    key: \"_setSvgElement\",\n    value: function _setSvgElement(svg) {\n      this._clearSvgElement(); // Note: we do this fix here, rather than the icon registry, because the\n      // references have to point to the URL at the time that the icon was created.\n\n\n      var path = this._location.getPathname();\n\n      this._previousPath = path;\n\n      this._cacheChildrenWithExternalReferences(svg);\n\n      this._prependPathToReferences(path);\n\n      this._elementRef.nativeElement.appendChild(svg);\n    }\n  }, {\n    key: \"_clearSvgElement\",\n    value: function _clearSvgElement() {\n      var layoutElement = this._elementRef.nativeElement;\n      var childCount = layoutElement.childNodes.length;\n\n      if (this._elementsWithExternalReferences) {\n        this._elementsWithExternalReferences.clear();\n      } // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n      // we can't use innerHTML, because IE will throw if the element has a data binding.\n\n\n      while (childCount--) {\n        var child = layoutElement.childNodes[childCount]; // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n        // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n\n        if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n          child.remove();\n        }\n      }\n    }\n  }, {\n    key: \"_updateFontIconClasses\",\n    value: function _updateFontIconClasses() {\n      if (!this._usingFontIcon()) {\n        return;\n      }\n\n      var elem = this._elementRef.nativeElement;\n      var fontSetClasses = (this.fontSet ? this._iconRegistry.classNameForFontAlias(this.fontSet).split(/ +/) : this._iconRegistry.getDefaultFontSetClass()).filter(function (className) {\n        return className.length > 0;\n      });\n\n      this._previousFontSetClass.forEach(function (className) {\n        return elem.classList.remove(className);\n      });\n\n      fontSetClasses.forEach(function (className) {\n        return elem.classList.add(className);\n      });\n      this._previousFontSetClass = fontSetClasses;\n\n      if (this.fontIcon !== this._previousFontIconClass && !fontSetClasses.includes('mat-ligature-font')) {\n        if (this._previousFontIconClass) {\n          elem.classList.remove(this._previousFontIconClass);\n        }\n\n        if (this.fontIcon) {\n          elem.classList.add(this.fontIcon);\n        }\n\n        this._previousFontIconClass = this.fontIcon;\n      }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n\n  }, {\n    key: \"_cleanupFontValue\",\n    value: function _cleanupFontValue(value) {\n      return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n\n  }, {\n    key: \"_prependPathToReferences\",\n    value: function _prependPathToReferences(path) {\n      var elements = this._elementsWithExternalReferences;\n\n      if (elements) {\n        elements.forEach(function (attrs, element) {\n          attrs.forEach(function (attr) {\n            element.setAttribute(attr.name, \"url('\".concat(path, \"#\").concat(attr.value, \"')\"));\n          });\n        });\n      }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n\n  }, {\n    key: \"_cacheChildrenWithExternalReferences\",\n    value: function _cacheChildrenWithExternalReferences(element) {\n      var elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n      var elements = this._elementsWithExternalReferences = this._elementsWithExternalReferences || new Map();\n\n      var _loop = function _loop(i) {\n        funcIriAttributes.forEach(function (attr) {\n          var elementWithReference = elementsWithFuncIri[i];\n          var value = elementWithReference.getAttribute(attr);\n          var match = value ? value.match(funcIriPattern) : null;\n\n          if (match) {\n            var attributes = elements.get(elementWithReference);\n\n            if (!attributes) {\n              attributes = [];\n              elements.set(elementWithReference, attributes);\n            }\n\n            attributes.push({\n              name: attr,\n              value: match[1]\n            });\n          }\n        });\n      };\n\n      for (var i = 0; i < elementsWithFuncIri.length; i++) {\n        _loop(i);\n      }\n    }\n    /** Sets a new SVG icon with a particular name. */\n\n  }, {\n    key: \"_updateSvgIcon\",\n    value: function _updateSvgIcon(rawName) {\n      var _this6 = this;\n\n      this._svgNamespace = null;\n      this._svgName = null;\n\n      this._currentIconFetch.unsubscribe();\n\n      if (rawName) {\n        var _this$_splitIconName = this._splitIconName(rawName),\n            _this$_splitIconName2 = _slicedToArray(_this$_splitIconName, 2),\n            namespace = _this$_splitIconName2[0],\n            iconName = _this$_splitIconName2[1];\n\n        if (namespace) {\n          this._svgNamespace = namespace;\n        }\n\n        if (iconName) {\n          this._svgName = iconName;\n        }\n\n        this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(function (svg) {\n          return _this6._setSvgElement(svg);\n        }, function (err) {\n          var errorMessage = \"Error retrieving icon \".concat(namespace, \":\").concat(iconName, \"! \").concat(err.message);\n\n          _this6._errorHandler.handleError(new Error(errorMessage));\n        });\n      }\n    }\n  }]);\n\n  return MatIcon;\n}(_MatIconBase);\n\nMatIcon.ɵfac = function MatIcon_Factory(t) {\n  return new (t || MatIcon)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MatIconRegistry), i0.ɵɵinjectAttribute('aria-hidden'), i0.ɵɵdirectiveInject(MAT_ICON_LOCATION), i0.ɵɵdirectiveInject(i0.ErrorHandler), i0.ɵɵdirectiveInject(MAT_ICON_DEFAULT_OPTIONS, 8));\n};\n\nMatIcon.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatIcon,\n  selectors: [[\"mat-icon\"]],\n  hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"],\n  hostVars: 7,\n  hostBindings: function MatIcon_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"data-mat-icon-type\", ctx._usingFontIcon() ? \"font\" : \"svg\")(\"data-mat-icon-name\", ctx._svgName || ctx.fontIcon)(\"data-mat-icon-namespace\", ctx._svgNamespace || ctx.fontSet);\n      i0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n    }\n  },\n  inputs: {\n    color: \"color\",\n    inline: \"inline\",\n    svgIcon: \"svgIcon\",\n    fontSet: \"fontSet\",\n    fontIcon: \"fontIcon\"\n  },\n  exportAs: [\"matIcon\"],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatIcon_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  styles: [\".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatIcon, [{\n    type: Component,\n    args: [{\n      template: '<ng-content></ng-content>',\n      selector: 'mat-icon',\n      exportAs: 'matIcon',\n      inputs: ['color'],\n      host: {\n        'role': 'img',\n        'class': 'mat-icon notranslate',\n        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n        '[class.mat-icon-inline]': 'inline',\n        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: MatIconRegistry\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['aria-hidden']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_ICON_LOCATION]\n      }]\n    }, {\n      type: i0.ErrorHandler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_ICON_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    inline: [{\n      type: Input\n    }],\n    svgIcon: [{\n      type: Input\n    }],\n    fontSet: [{\n      type: Input\n    }],\n    fontIcon: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatIconModule = /*#__PURE__*/_createClass(function MatIconModule() {\n  _classCallCheck(this, MatIconModule);\n});\n\nMatIconModule.ɵfac = function MatIconModule_Factory(t) {\n  return new (t || MatIconModule)();\n};\n\nMatIconModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatIconModule\n});\nMatIconModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [MatCommonModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatIconModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule],\n      exports: [MatIcon, MatCommonModule],\n      declarations: [MatIcon]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_DEFAULT_OPTIONS, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError };","map":{"version":3,"names":["i0","SecurityContext","Injectable","Optional","Inject","SkipSelf","ErrorHandler","InjectionToken","inject","Component","ViewEncapsulation","ChangeDetectionStrategy","Attribute","Input","NgModule","mixinColor","MatCommonModule","coerceBooleanProperty","DOCUMENT","of","throwError","forkJoin","Subscription","tap","map","catchError","finalize","share","take","i1","HttpClient","i2","DomSanitizer","policy","getPolicy","undefined","window","ttWindow","trustedTypes","createPolicy","createHTML","s","trustedHTMLFromString","html","_a","getMatIconNameNotFoundError","iconName","Error","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","svgText","options","MatIconRegistry","_httpClient","_sanitizer","document","_errorHandler","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_resolvers","_defaultFontSetClass","_document","addSvgIconInNamespace","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","resolver","push","cleanLiteral","sanitize","HTML","trustedLiteral","addSvgIconSetInNamespace","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","alias","classNames","set","get","safeUrl","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","pipe","svg","name","key","iconKey","config","_getSvgFromConfig","_getIconConfigFromResolvers","iconSetConfigs","_getSvgFromIconSetConfigs","clear","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","_loadSvgIconSetFromConfig","err","errorMessage","message","handleError","foundIcon","i","length","toString","indexOf","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","nodeName","toLowerCase","_setSvgAttributes","_toSvgElement","_svgElementFromString","appendChild","str","div","createElement","innerHTML","element","attributes","value","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","iconConfig","withCredentials","inProgressFetch","req","responseType","delete","configNamespace","svgElement","result","isSafeUrlWithOptions","ɵfac","ɵprov","type","args","providedIn","decorators","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","errorHandler","ICON_REGISTRY_PROVIDER","provide","deps","useFactory","_MatIconBase","_elementRef","MAT_ICON_DEFAULT_OPTIONS","MAT_ICON_LOCATION","factory","MAT_ICON_LOCATION_FACTORY","_location","location","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","attr","join","funcIriPattern","MatIcon","elementRef","_iconRegistry","ariaHidden","defaults","_inline","_previousFontSetClass","_currentIconFetch","EMPTY","color","defaultColor","fontSet","nativeElement","inline","_svgIcon","_updateSvgIcon","_clearSvgElement","_fontSet","newValue","_cleanupFontValue","_updateFontIconClasses","_fontIcon","parts","split","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","unsubscribe","svgIcon","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","remove","_usingFontIcon","elem","fontSetClasses","classNameForFontAlias","getDefaultFontSetClass","className","forEach","classList","add","fontIcon","_previousFontIconClass","includes","trim","elements","attrs","elementsWithFuncIri","querySelectorAll","elementWithReference","getAttribute","match","rawName","_svgNamespace","_svgName","_splitIconName","getNamedSvgIcon","subscribe","_setSvgElement","ElementRef","ɵcmp","template","selector","exportAs","inputs","host","encapsulation","None","changeDetection","OnPush","styles","MatIconModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@angular/material/fesm2015/icon.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, SkipSelf, ErrorHandler, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n    if (policy === undefined) {\n        policy = null;\n        if (typeof window !== 'undefined') {\n            const ttWindow = window;\n            if (ttWindow.trustedTypes !== undefined) {\n                policy = ttWindow.trustedTypes.createPolicy('angular#components', {\n                    createHTML: (s) => s,\n                });\n            }\n        }\n    }\n    return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nfunction trustedHTMLFromString(html) {\n    var _a;\n    return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createHTML(html)) || html;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /** Registered icon resolver functions. */\n        this._resolvers = [];\n        /**\n         * The CSS classes to apply when an `<mat-icon>` component has no icon name, url, or font\n         * specified. The default 'material-icons' value assumes that the material icon font has been\n         * loaded as described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = ['material-icons', 'mat-ligature-font'];\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n    addSvgIconResolver(resolver) {\n        this._resolvers.push(resolver);\n        return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Defines an alias for CSS class names to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * If the registered font is a ligature font, then don't forget to also include the special\n     * class `mat-ligature-font` to allow the usage via attribute. So register like this:\n     *\n     * ```ts\n     * iconRegistry.registerFontClassAlias('f1', 'font1 mat-ligature-font');\n     * ```\n     *\n     * And use like this:\n     *\n     * ```html\n     * <mat-icon fontSet=\"f1\" fontIcon=\"home\"></mat-icon>\n     * ```\n     *\n     * @param alias Alias for the font.\n     * @param classNames Class names override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, classNames = alias) {\n        this._fontCssClassesByAlias.set(alias, classNames);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    setDefaultFontSetClass(...classNames) {\n        this._defaultFontSetClass = classNames;\n        return this;\n    }\n    /**\n     * Returns the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        const key = iconKey(namespace, name);\n        let config = this._svgIconConfigs.get(key);\n        // Return (copy of) cached icon if possible.\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // Otherwise try to resolve the config from one of the resolver functions.\n        config = this._getIconConfigFromResolvers(namespace, name);\n        if (config) {\n            this._svgIconConfigs.set(key, config);\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._resolvers = [];\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.toString().indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        var _a;\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(map(svg => {\n            // Security: This SVG is fetched from a SafeResourceUrl, and is thus\n            // trusted HTML.\n            return trustedHTMLFromString(svg);\n        }), finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n    _getIconConfigFromResolvers(namespace, name) {\n        for (let i = 0; i < this._resolvers.length; i++) {\n            const result = this._resolvers[i](name, namespace);\n            if (result) {\n                return isSafeUrlWithOptions(result)\n                    ? new SvgIconConfig(result.url, null, result.options)\n                    : new SvgIconConfig(result, null);\n            }\n        }\n        return undefined;\n    }\n}\nMatIconRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatIconRegistry, deps: [{ token: i1.HttpClient, optional: true }, { token: i2.DomSanitizer }, { token: DOCUMENT, optional: true }, { token: i0.ErrorHandler }], target: i0.ɵɵFactoryTarget.Injectable });\nMatIconRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatIconRegistry, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatIconRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.HttpClient, decorators: [{\n                        type: Optional\n                    }] }, { type: i2.DomSanitizer }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i0.ErrorHandler }];\n    } });\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\nfunction isSafeUrlWithOptions(value) {\n    return !!(value.url && value.options);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nconst _MatIconBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n});\n/** Injection token to be used to override the default options for `mat-icon`. */\nconst MAT_ICON_DEFAULT_OPTIONS = new InjectionToken('MAT_ICON_DEFAULT_OPTIONS');\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY,\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_location ? _location.pathname + _location.search : ''),\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke',\n];\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the `fontIcon` attribute or the\n *   content of the `<mat-icon>` component. If you register a custom font class, don't forget to also\n *   include the special class `mat-ligature-font`. It is recommended to use the attribute alternative\n *   to prevent the ligature text to be selectable and to appear in search engine results.\n *   By default, the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon fontIcon=\"home\"></mat-icon>\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\" fontIcon=\"sun\"></mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconBase {\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler, defaults) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        this._previousFontSetClass = [];\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this.defaultColor = defaults.color;\n            }\n            if (defaults.fontSet) {\n                this.fontSet = defaults.fontSet;\n            }\n        }\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n        return this._inline;\n    }\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() {\n        return this._svgIcon;\n    }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() {\n        return this._fontSet;\n    }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() {\n        return this._fontIcon;\n    }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1:\n                return ['', parts[0]]; // Use default namespace.\n            case 2:\n                return parts;\n            default:\n                throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                child.remove();\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClasses = (this.fontSet\n            ? this._iconRegistry.classNameForFontAlias(this.fontSet).split(/ +/)\n            : this._iconRegistry.getDefaultFontSetClass()).filter(className => className.length > 0);\n        this._previousFontSetClass.forEach(className => elem.classList.remove(className));\n        fontSetClasses.forEach(className => elem.classList.add(className));\n        this._previousFontSetClass = fontSetClasses;\n        if (this.fontIcon !== this._previousFontIconClass &&\n            !fontSetClasses.includes('mat-ligature-font')) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = (this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map());\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry\n                .getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n}\nMatIcon.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatIcon, deps: [{ token: i0.ElementRef }, { token: MatIconRegistry }, { token: 'aria-hidden', attribute: true }, { token: MAT_ICON_LOCATION }, { token: i0.ErrorHandler }, { token: MAT_ICON_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatIcon.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatIcon, selector: \"mat-icon\", inputs: { color: \"color\", inline: \"inline\", svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, host: { attributes: { \"role\": \"img\" }, properties: { \"attr.data-mat-icon-type\": \"_usingFontIcon() ? \\\"font\\\" : \\\"svg\\\"\", \"attr.data-mat-icon-name\": \"_svgName || fontIcon\", \"attr.data-mat-icon-namespace\": \"_svgNamespace || fontSet\", \"class.mat-icon-inline\": \"inline\", \"class.mat-icon-no-color\": \"color !== \\\"primary\\\" && color !== \\\"accent\\\" && color !== \\\"warn\\\"\" }, classAttribute: \"mat-icon notranslate\" }, exportAs: [\"matIcon\"], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatIcon, decorators: [{\n            type: Component,\n            args: [{ template: '<ng-content></ng-content>', selector: 'mat-icon', exportAs: 'matIcon', inputs: ['color'], host: {\n                        'role': 'img',\n                        'class': 'mat-icon notranslate',\n                        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                        '[class.mat-icon-inline]': 'inline',\n                        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: MatIconRegistry }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['aria-hidden']\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_ICON_LOCATION]\n                    }] }, { type: i0.ErrorHandler }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_ICON_DEFAULT_OPTIONS]\n                    }] }];\n    }, propDecorators: { inline: [{\n                type: Input\n            }], svgIcon: [{\n                type: Input\n            }], fontSet: [{\n                type: Input\n            }], fontIcon: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatIconModule {\n}\nMatIconModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatIconModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatIconModule, declarations: [MatIcon], imports: [MatCommonModule], exports: [MatIcon, MatCommonModule] });\nMatIconModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatIconModule, imports: [MatCommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule],\n                    exports: [MatIcon, MatCommonModule],\n                    declarations: [MatIcon],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_DEFAULT_OPTIONS, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError };\n"],"mappings":";;;;;AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,SAASC,eAAT,EAA0BC,UAA1B,EAAsCC,QAAtC,EAAgDC,MAAhD,EAAwDC,QAAxD,EAAkEC,YAAlE,EAAgFC,cAAhF,EAAgGC,MAAhG,EAAwGC,SAAxG,EAAmHC,iBAAnH,EAAsIC,uBAAtI,EAA+JC,SAA/J,EAA0KC,KAA1K,EAAiLC,QAAjL,QAAiM,eAAjM;AACA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,wBAA5C;AACA,SAASC,qBAAT,QAAsC,uBAAtC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,EAAT,EAAaC,UAAb,EAAyBC,QAAzB,EAAmCC,YAAnC,QAAuD,MAAvD;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,UAAnB,EAA+BC,QAA/B,EAAyCC,KAAzC,EAAgDC,IAAhD,QAA4D,gBAA5D;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,OAAO,KAAKC,EAAZ,MAAoB,2BAApB;AACA,SAASC,YAAT,QAA6B,2BAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,IAAIC,MAAJ;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,GAAqB;EACjB,IAAID,MAAM,KAAKE,SAAf,EAA0B;IACtBF,MAAM,GAAG,IAAT;;IACA,IAAI,OAAOG,MAAP,KAAkB,WAAtB,EAAmC;MAC/B,IAAMC,QAAQ,GAAGD,MAAjB;;MACA,IAAIC,QAAQ,CAACC,YAAT,KAA0BH,SAA9B,EAAyC;QACrCF,MAAM,GAAGI,QAAQ,CAACC,YAAT,CAAsBC,YAAtB,CAAmC,oBAAnC,EAAyD;UAC9DC,UAAU,EAAE,oBAACC,CAAD;YAAA,OAAOA,CAAP;UAAA;QADkD,CAAzD,CAAT;MAGH;IACJ;EACJ;;EACD,OAAOR,MAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASS,qBAAT,CAA+BC,IAA/B,EAAqC;EACjC,IAAIC,EAAJ;;EACA,OAAO,CAAC,CAACA,EAAE,GAAGV,SAAS,EAAf,MAAuB,IAAvB,IAA+BU,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACJ,UAAH,CAAcG,IAAd,CAAzD,KAAiFA,IAAxF;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,2BAAT,CAAqCC,QAArC,EAA+C;EAC3C,OAAOC,KAAK,+CAAuCD,QAAvC,QAAZ;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASE,6BAAT,GAAyC;EACrC,OAAOD,KAAK,CAAC,6EACT,wEADS,GAET,cAFQ,CAAZ;AAGH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASE,kCAAT,CAA4CC,GAA5C,EAAiD;EAC7C,OAAOH,KAAK,CAAC,qIACyCG,GADzC,QAAD,CAAZ;AAEH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASC,sCAAT,CAAgDC,OAAhD,EAAyD;EACrD,OAAOL,KAAK,CAAC,uIACyCK,OADzC,QAAD,CAAZ;AAEH;AACD;AACA;AACA;AACA;;;IACMC,a,6BACF,uBAAYH,GAAZ,EAAiBI,OAAjB,EAA0BC,OAA1B,EAAmC;EAAA;;EAC/B,KAAKL,GAAL,GAAWA,GAAX;EACA,KAAKI,OAAL,GAAeA,OAAf;EACA,KAAKC,OAAL,GAAeA,OAAf;AACH,C;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMC,e;EACF,yBAAYC,WAAZ,EAAyBC,UAAzB,EAAqCC,QAArC,EAA+CC,aAA/C,EAA8D;IAAA;;IAC1D,KAAKH,WAAL,GAAmBA,WAAnB;IACA,KAAKC,UAAL,GAAkBA,UAAlB;IACA,KAAKE,aAAL,GAAqBA,aAArB;IACA;AACR;AACA;;IACQ,KAAKC,eAAL,GAAuB,IAAIC,GAAJ,EAAvB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,eAAL,GAAuB,IAAID,GAAJ,EAAvB;IACA;;IACA,KAAKE,iBAAL,GAAyB,IAAIF,GAAJ,EAAzB;IACA;;IACA,KAAKG,qBAAL,GAA6B,IAAIH,GAAJ,EAA7B;IACA;;IACA,KAAKI,sBAAL,GAA8B,IAAIJ,GAAJ,EAA9B;IACA;;IACA,KAAKK,UAAL,GAAkB,EAAlB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,oBAAL,GAA4B,CAAC,gBAAD,EAAmB,mBAAnB,CAA5B;IACA,KAAKC,SAAL,GAAiBV,QAAjB;EACH;EACD;AACJ;AACA;AACA;AACA;;;;;WACI,oBAAWb,QAAX,EAAqBI,GAArB,EAA0BK,OAA1B,EAAmC;MAC/B,OAAO,KAAKe,qBAAL,CAA2B,EAA3B,EAA+BxB,QAA/B,EAAyCI,GAAzC,EAA8CK,OAA9C,CAAP;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,2BAAkBT,QAAlB,EAA4BM,OAA5B,EAAqCG,OAArC,EAA8C;MAC1C,OAAO,KAAKgB,4BAAL,CAAkC,EAAlC,EAAsCzB,QAAtC,EAAgDM,OAAhD,EAAyDG,OAAzD,CAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,+BAAsBiB,SAAtB,EAAiC1B,QAAjC,EAA2CI,GAA3C,EAAgDK,OAAhD,EAAyD;MACrD,OAAO,KAAKkB,iBAAL,CAAuBD,SAAvB,EAAkC1B,QAAlC,EAA4C,IAAIO,aAAJ,CAAkBH,GAAlB,EAAuB,IAAvB,EAA6BK,OAA7B,CAA5C,CAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,4BAAmBmB,QAAnB,EAA6B;MACzB,KAAKP,UAAL,CAAgBQ,IAAhB,CAAqBD,QAArB;;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,sCAA6BF,SAA7B,EAAwC1B,QAAxC,EAAkDM,OAAlD,EAA2DG,OAA3D,EAAoE;MAChE,IAAMqB,YAAY,GAAG,KAAKlB,UAAL,CAAgBmB,QAAhB,CAAyB5E,eAAe,CAAC6E,IAAzC,EAA+C1B,OAA/C,CAArB,CADgE,CAEhE;;;MACA,IAAI,CAACwB,YAAL,EAAmB;QACf,MAAMzB,sCAAsC,CAACC,OAAD,CAA5C;MACH,CAL+D,CAMhE;;;MACA,IAAM2B,cAAc,GAAGrC,qBAAqB,CAACkC,YAAD,CAA5C;MACA,OAAO,KAAKH,iBAAL,CAAuBD,SAAvB,EAAkC1B,QAAlC,EAA4C,IAAIO,aAAJ,CAAkB,EAAlB,EAAsB0B,cAAtB,EAAsCxB,OAAtC,CAA5C,CAAP;IACH;IACD;AACJ;AACA;AACA;;;;WACI,uBAAcL,GAAd,EAAmBK,OAAnB,EAA4B;MACxB,OAAO,KAAKyB,wBAAL,CAA8B,EAA9B,EAAkC9B,GAAlC,EAAuCK,OAAvC,CAAP;IACH;IACD;AACJ;AACA;AACA;;;;WACI,8BAAqBH,OAArB,EAA8BG,OAA9B,EAAuC;MACnC,OAAO,KAAK0B,+BAAL,CAAqC,EAArC,EAAyC7B,OAAzC,EAAkDG,OAAlD,CAAP;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,kCAAyBiB,SAAzB,EAAoCtB,GAApC,EAAyCK,OAAzC,EAAkD;MAC9C,OAAO,KAAK2B,oBAAL,CAA0BV,SAA1B,EAAqC,IAAInB,aAAJ,CAAkBH,GAAlB,EAAuB,IAAvB,EAA6BK,OAA7B,CAArC,CAAP;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,yCAAgCiB,SAAhC,EAA2CpB,OAA3C,EAAoDG,OAApD,EAA6D;MACzD,IAAMqB,YAAY,GAAG,KAAKlB,UAAL,CAAgBmB,QAAhB,CAAyB5E,eAAe,CAAC6E,IAAzC,EAA+C1B,OAA/C,CAArB;;MACA,IAAI,CAACwB,YAAL,EAAmB;QACf,MAAMzB,sCAAsC,CAACC,OAAD,CAA5C;MACH,CAJwD,CAKzD;;;MACA,IAAM2B,cAAc,GAAGrC,qBAAqB,CAACkC,YAAD,CAA5C;MACA,OAAO,KAAKM,oBAAL,CAA0BV,SAA1B,EAAqC,IAAInB,aAAJ,CAAkB,EAAlB,EAAsB0B,cAAtB,EAAsCxB,OAAtC,CAArC,CAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,gCAAuB4B,KAAvB,EAAkD;MAAA,IAApBC,UAAoB,uEAAPD,KAAO;;MAC9C,KAAKjB,sBAAL,CAA4BmB,GAA5B,CAAgCF,KAAhC,EAAuCC,UAAvC;;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;;;;WACI,+BAAsBD,KAAtB,EAA6B;MACzB,OAAO,KAAKjB,sBAAL,CAA4BoB,GAA5B,CAAgCH,KAAhC,KAA0CA,KAAjD;IACH;IACD;AACJ;AACA;AACA;;;;WACI,kCAAsC;MAAA,kCAAZC,UAAY;QAAZA,UAAY;MAAA;;MAClC,KAAKhB,oBAAL,GAA4BgB,UAA5B;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;;;;WACI,kCAAyB;MACrB,OAAO,KAAKhB,oBAAZ;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,2BAAkBmB,OAAlB,EAA2B;MAAA;;MACvB,IAAMrC,GAAG,GAAG,KAAKQ,UAAL,CAAgBmB,QAAhB,CAAyB5E,eAAe,CAACuF,YAAzC,EAAuDD,OAAvD,CAAZ;;MACA,IAAI,CAACrC,GAAL,EAAU;QACN,MAAMD,kCAAkC,CAACsC,OAAD,CAAxC;MACH;;MACD,IAAME,UAAU,GAAG,KAAKzB,iBAAL,CAAuBsB,GAAvB,CAA2BpC,GAA3B,CAAnB;;MACA,IAAIuC,UAAJ,EAAgB;QACZ,OAAOtE,EAAE,CAACuE,QAAQ,CAACD,UAAD,CAAT,CAAT;MACH;;MACD,OAAO,KAAKE,sBAAL,CAA4B,IAAItC,aAAJ,CAAkBkC,OAAlB,EAA2B,IAA3B,CAA5B,EAA8DK,IAA9D,CAAmErE,GAAG,CAAC,UAAAsE,GAAG;QAAA,OAAI,KAAI,CAAC7B,iBAAL,CAAuBqB,GAAvB,CAA2BnC,GAA3B,EAAgC2C,GAAhC,CAAJ;MAAA,CAAJ,CAAtE,EAAqHrE,GAAG,CAAC,UAAAqE,GAAG;QAAA,OAAIH,QAAQ,CAACG,GAAD,CAAZ;MAAA,CAAJ,CAAxH,CAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,yBAAgBC,IAAhB,EAAsC;MAAA,IAAhBtB,SAAgB,uEAAJ,EAAI;MAClC,IAAMuB,GAAG,GAAGC,OAAO,CAACxB,SAAD,EAAYsB,IAAZ,CAAnB;;MACA,IAAIG,MAAM,GAAG,KAAKpC,eAAL,CAAqByB,GAArB,CAAyBS,GAAzB,CAAb,CAFkC,CAGlC;;;MACA,IAAIE,MAAJ,EAAY;QACR,OAAO,KAAKC,iBAAL,CAAuBD,MAAvB,CAAP;MACH,CANiC,CAOlC;;;MACAA,MAAM,GAAG,KAAKE,2BAAL,CAAiC3B,SAAjC,EAA4CsB,IAA5C,CAAT;;MACA,IAAIG,MAAJ,EAAY;QACR,KAAKpC,eAAL,CAAqBwB,GAArB,CAAyBU,GAAzB,EAA8BE,MAA9B;;QACA,OAAO,KAAKC,iBAAL,CAAuBD,MAAvB,CAAP;MACH,CAZiC,CAalC;;;MACA,IAAMG,cAAc,GAAG,KAAKrC,eAAL,CAAqBuB,GAArB,CAAyBd,SAAzB,CAAvB;;MACA,IAAI4B,cAAJ,EAAoB;QAChB,OAAO,KAAKC,yBAAL,CAA+BP,IAA/B,EAAqCM,cAArC,CAAP;MACH;;MACD,OAAOhF,UAAU,CAACyB,2BAA2B,CAACkD,GAAD,CAA5B,CAAjB;IACH;;;WACD,uBAAc;MACV,KAAK5B,UAAL,GAAkB,EAAlB;;MACA,KAAKN,eAAL,CAAqByC,KAArB;;MACA,KAAKvC,eAAL,CAAqBuC,KAArB;;MACA,KAAKtC,iBAAL,CAAuBsC,KAAvB;IACH;IACD;AACJ;AACA;;;;WACI,2BAAkBL,MAAlB,EAA0B;MACtB,IAAIA,MAAM,CAAC3C,OAAX,EAAoB;QAChB;QACA,OAAOnC,EAAE,CAACuE,QAAQ,CAAC,KAAKa,qBAAL,CAA2BN,MAA3B,CAAD,CAAT,CAAT;MACH,CAHD,MAIK;QACD;QACA,OAAO,KAAKN,sBAAL,CAA4BM,MAA5B,EAAoCL,IAApC,CAAyCpE,GAAG,CAAC,UAAAqE,GAAG;UAAA,OAAIH,QAAQ,CAACG,GAAD,CAAZ;QAAA,CAAJ,CAA5C,CAAP;MACH;IACJ;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,mCAA0BC,IAA1B,EAAgCM,cAAhC,EAAgD;MAAA;;MAC5C;MACA;MACA,IAAMI,SAAS,GAAG,KAAKC,8BAAL,CAAoCX,IAApC,EAA0CM,cAA1C,CAAlB;;MACA,IAAII,SAAJ,EAAe;QACX;QACA;QACA;QACA,OAAOrF,EAAE,CAACqF,SAAD,CAAT;MACH,CAT2C,CAU5C;MACA;;;MACA,IAAME,oBAAoB,GAAGN,cAAc,CACtCO,MADwB,CACjB,UAAAC,aAAa;QAAA,OAAI,CAACA,aAAa,CAACtD,OAAnB;MAAA,CADI,EAExB9B,GAFwB,CAEpB,UAAAoF,aAAa,EAAI;QACtB,OAAO,MAAI,CAACC,yBAAL,CAA+BD,aAA/B,EAA8ChB,IAA9C,CAAmDnE,UAAU,CAAC,UAACqF,GAAD,EAAS;UAC1E,IAAM5D,GAAG,GAAG,MAAI,CAACQ,UAAL,CAAgBmB,QAAhB,CAAyB5E,eAAe,CAACuF,YAAzC,EAAuDoB,aAAa,CAAC1D,GAArE,CAAZ,CAD0E,CAE1E;UACA;;;UACA,IAAM6D,YAAY,mCAA4B7D,GAA5B,sBAA2C4D,GAAG,CAACE,OAA/C,CAAlB;;UACA,MAAI,CAACpD,aAAL,CAAmBqD,WAAnB,CAA+B,IAAIlE,KAAJ,CAAUgE,YAAV,CAA/B;;UACA,OAAO5F,EAAE,CAAC,IAAD,CAAT;QACH,CAPmE,CAA7D,CAAP;MAQH,CAX4B,CAA7B,CAZ4C,CAwB5C;MACA;;MACA,OAAOE,QAAQ,CAACqF,oBAAD,CAAR,CAA+Bd,IAA/B,CAAoCpE,GAAG,CAAC,YAAM;QACjD,IAAM0F,SAAS,GAAG,MAAI,CAACT,8BAAL,CAAoCX,IAApC,EAA0CM,cAA1C,CAAlB,CADiD,CAEjD;;;QACA,IAAI,CAACc,SAAL,EAAgB;UACZ,MAAMrE,2BAA2B,CAACiD,IAAD,CAAjC;QACH;;QACD,OAAOoB,SAAP;MACH,CAP6C,CAAvC,CAAP;IAQH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,wCAA+BpE,QAA/B,EAAyCsD,cAAzC,EAAyD;MACrD;MACA,KAAK,IAAIe,CAAC,GAAGf,cAAc,CAACgB,MAAf,GAAwB,CAArC,EAAwCD,CAAC,IAAI,CAA7C,EAAgDA,CAAC,EAAjD,EAAqD;QACjD,IAAMlB,MAAM,GAAGG,cAAc,CAACe,CAAD,CAA7B,CADiD,CAEjD;QACA;QACA;QACA;;QACA,IAAIlB,MAAM,CAAC3C,OAAP,IAAkB2C,MAAM,CAAC3C,OAAP,CAAe+D,QAAf,GAA0BC,OAA1B,CAAkCxE,QAAlC,IAA8C,CAAC,CAArE,EAAwE;UACpE,IAAM+C,GAAG,GAAG,KAAKU,qBAAL,CAA2BN,MAA3B,CAAZ;;UACA,IAAMiB,SAAS,GAAG,KAAKK,sBAAL,CAA4B1B,GAA5B,EAAiC/C,QAAjC,EAA2CmD,MAAM,CAAC1C,OAAlD,CAAlB;;UACA,IAAI2D,SAAJ,EAAe;YACX,OAAOA,SAAP;UACH;QACJ;MACJ;;MACD,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;;;;WACI,gCAAuBjB,MAAvB,EAA+B;MAAA;;MAC3B,OAAO,KAAKuB,UAAL,CAAgBvB,MAAhB,EAAwBL,IAAxB,CAA6BrE,GAAG,CAAC,UAAA+B,OAAO;QAAA,OAAK2C,MAAM,CAAC3C,OAAP,GAAiBA,OAAtB;MAAA,CAAR,CAAhC,EAAyE9B,GAAG,CAAC;QAAA,OAAM,MAAI,CAAC+E,qBAAL,CAA2BN,MAA3B,CAAN;MAAA,CAAD,CAA5E,CAAP;IACH;IACD;AACJ;AACA;AACA;;;;WACI,mCAA0BA,MAA1B,EAAkC;MAC9B,IAAIA,MAAM,CAAC3C,OAAX,EAAoB;QAChB,OAAOnC,EAAE,CAAC,IAAD,CAAT;MACH;;MACD,OAAO,KAAKqG,UAAL,CAAgBvB,MAAhB,EAAwBL,IAAxB,CAA6BrE,GAAG,CAAC,UAAA+B,OAAO;QAAA,OAAK2C,MAAM,CAAC3C,OAAP,GAAiBA,OAAtB;MAAA,CAAR,CAAhC,CAAP;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,gCAAuBmE,OAAvB,EAAgC3E,QAAhC,EAA0CS,OAA1C,EAAmD;MAC/C;MACA;MACA,IAAMmE,UAAU,GAAGD,OAAO,CAACE,aAAR,iBAA8B7E,QAA9B,SAAnB;;MACA,IAAI,CAAC4E,UAAL,EAAiB;QACb,OAAO,IAAP;MACH,CAN8C,CAO/C;MACA;;;MACA,IAAME,WAAW,GAAGF,UAAU,CAACG,SAAX,CAAqB,IAArB,CAApB;MACAD,WAAW,CAACE,eAAZ,CAA4B,IAA5B,EAV+C,CAW/C;MACA;;MACA,IAAIF,WAAW,CAACG,QAAZ,CAAqBC,WAArB,OAAuC,KAA3C,EAAkD;QAC9C,OAAO,KAAKC,iBAAL,CAAuBL,WAAvB,EAAoCrE,OAApC,CAAP;MACH,CAf8C,CAgB/C;MACA;MACA;;;MACA,IAAIqE,WAAW,CAACG,QAAZ,CAAqBC,WAArB,OAAuC,QAA3C,EAAqD;QACjD,OAAO,KAAKC,iBAAL,CAAuB,KAAKC,aAAL,CAAmBN,WAAnB,CAAvB,EAAwDrE,OAAxD,CAAP;MACH,CArB8C,CAsB/C;MACA;MACA;MACA;MACA;;;MACA,IAAMsC,GAAG,GAAG,KAAKsC,qBAAL,CAA2BzF,qBAAqB,CAAC,aAAD,CAAhD,CAAZ,CA3B+C,CA4B/C;;;MACAmD,GAAG,CAACuC,WAAJ,CAAgBR,WAAhB;MACA,OAAO,KAAKK,iBAAL,CAAuBpC,GAAvB,EAA4BtC,OAA5B,CAAP;IACH;IACD;AACJ;AACA;;;;WACI,+BAAsB8E,GAAtB,EAA2B;MACvB,IAAMC,GAAG,GAAG,KAAKjE,SAAL,CAAekE,aAAf,CAA6B,KAA7B,CAAZ;;MACAD,GAAG,CAACE,SAAJ,GAAgBH,GAAhB;MACA,IAAMxC,GAAG,GAAGyC,GAAG,CAACX,aAAJ,CAAkB,KAAlB,CAAZ,CAHuB,CAIvB;;MACA,IAAI,CAAC9B,GAAL,EAAU;QACN,MAAM9C,KAAK,CAAC,qBAAD,CAAX;MACH;;MACD,OAAO8C,GAAP;IACH;IACD;AACJ;AACA;;;;WACI,uBAAc4C,OAAd,EAAuB;MACnB,IAAM5C,GAAG,GAAG,KAAKsC,qBAAL,CAA2BzF,qBAAqB,CAAC,aAAD,CAAhD,CAAZ;;MACA,IAAMgG,UAAU,GAAGD,OAAO,CAACC,UAA3B,CAFmB,CAGnB;;MACA,KAAK,IAAIvB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuB,UAAU,CAACtB,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;QACxC,oBAAwBuB,UAAU,CAACvB,CAAD,CAAlC;QAAA,IAAQrB,IAAR,iBAAQA,IAAR;QAAA,IAAc6C,KAAd,iBAAcA,KAAd;;QACA,IAAI7C,IAAI,KAAK,IAAb,EAAmB;UACfD,GAAG,CAAC+C,YAAJ,CAAiB9C,IAAjB,EAAuB6C,KAAvB;QACH;MACJ;;MACD,KAAK,IAAIxB,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGsB,OAAO,CAACI,UAAR,CAAmBzB,MAAvC,EAA+CD,EAAC,EAAhD,EAAoD;QAChD,IAAIsB,OAAO,CAACI,UAAR,CAAmB1B,EAAnB,EAAsB2B,QAAtB,KAAmC,KAAKzE,SAAL,CAAe0E,YAAtD,EAAoE;UAChElD,GAAG,CAACuC,WAAJ,CAAgBK,OAAO,CAACI,UAAR,CAAmB1B,EAAnB,EAAsBU,SAAtB,CAAgC,IAAhC,CAAhB;QACH;MACJ;;MACD,OAAOhC,GAAP;IACH;IACD;AACJ;AACA;;;;WACI,2BAAkBA,GAAlB,EAAuBtC,OAAvB,EAAgC;MAC5BsC,GAAG,CAAC+C,YAAJ,CAAiB,KAAjB,EAAwB,EAAxB;MACA/C,GAAG,CAAC+C,YAAJ,CAAiB,QAAjB,EAA2B,MAA3B;MACA/C,GAAG,CAAC+C,YAAJ,CAAiB,OAAjB,EAA0B,MAA1B;MACA/C,GAAG,CAAC+C,YAAJ,CAAiB,qBAAjB,EAAwC,eAAxC;MACA/C,GAAG,CAAC+C,YAAJ,CAAiB,WAAjB,EAA8B,OAA9B,EAL4B,CAKY;;MACxC,IAAIrF,OAAO,IAAIA,OAAO,CAACyF,OAAvB,EAAgC;QAC5BnD,GAAG,CAAC+C,YAAJ,CAAiB,SAAjB,EAA4BrF,OAAO,CAACyF,OAApC;MACH;;MACD,OAAOnD,GAAP;IACH;IACD;AACJ;AACA;AACA;;;;WACI,oBAAWoD,UAAX,EAAuB;MAAA;;MACnB,IAAIrG,EAAJ;;MACA,IAAa2C,OAAb,GAAkC0D,UAAlC,CAAQ/F,GAAR;MAAA,IAAsBK,OAAtB,GAAkC0F,UAAlC,CAAsB1F,OAAtB;MACA,IAAM2F,eAAe,GAAG,CAACtG,EAAE,GAAGW,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAAC2F,eAAhE,MAAqF,IAArF,IAA6FtG,EAAE,KAAK,KAAK,CAAzG,GAA6GA,EAA7G,GAAkH,KAA1I;;MACA,IAAI,CAAC,KAAKa,WAAV,EAAuB;QACnB,MAAMT,6BAA6B,EAAnC;MACH,CANkB,CAOnB;;;MACA,IAAIuC,OAAO,IAAI,IAAf,EAAqB;QACjB,MAAMxC,KAAK,wCAAgCwC,OAAhC,SAAX;MACH;;MACD,IAAMrC,GAAG,GAAG,KAAKQ,UAAL,CAAgBmB,QAAhB,CAAyB5E,eAAe,CAACuF,YAAzC,EAAuDD,OAAvD,CAAZ,CAXmB,CAYnB;;;MACA,IAAI,CAACrC,GAAL,EAAU;QACN,MAAMD,kCAAkC,CAACsC,OAAD,CAAxC;MACH,CAfkB,CAgBnB;MACA;MACA;;;MACA,IAAM4D,eAAe,GAAG,KAAKlF,qBAAL,CAA2BqB,GAA3B,CAA+BpC,GAA/B,CAAxB;;MACA,IAAIiG,eAAJ,EAAqB;QACjB,OAAOA,eAAP;MACH;;MACD,IAAMC,GAAG,GAAG,KAAK3F,WAAL,CAAiB6B,GAAjB,CAAqBpC,GAArB,EAA0B;QAAEmG,YAAY,EAAE,MAAhB;QAAwBH,eAAe,EAAfA;MAAxB,CAA1B,EAAqEtD,IAArE,CAA0EpE,GAAG,CAAC,UAAAqE,GAAG,EAAI;QAC7F;QACA;QACA,OAAOnD,qBAAqB,CAACmD,GAAD,CAA5B;MACH,CAJwF,CAA7E,EAIRnE,QAAQ,CAAC;QAAA,OAAM,MAAI,CAACuC,qBAAL,CAA2BqF,MAA3B,CAAkCpG,GAAlC,CAAN;MAAA,CAAD,CAJA,EAIgDvB,KAAK,EAJrD,CAAZ;;MAKA,KAAKsC,qBAAL,CAA2BoB,GAA3B,CAA+BnC,GAA/B,EAAoCkG,GAApC;;MACA,OAAOA,GAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,2BAAkB5E,SAAlB,EAA6B1B,QAA7B,EAAuCmD,MAAvC,EAA+C;MAC3C,KAAKpC,eAAL,CAAqBwB,GAArB,CAAyBW,OAAO,CAACxB,SAAD,EAAY1B,QAAZ,CAAhC,EAAuDmD,MAAvD;;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,8BAAqBzB,SAArB,EAAgCyB,MAAhC,EAAwC;MACpC,IAAMsD,eAAe,GAAG,KAAKxF,eAAL,CAAqBuB,GAArB,CAAyBd,SAAzB,CAAxB;;MACA,IAAI+E,eAAJ,EAAqB;QACjBA,eAAe,CAAC5E,IAAhB,CAAqBsB,MAArB;MACH,CAFD,MAGK;QACD,KAAKlC,eAAL,CAAqBsB,GAArB,CAAyBb,SAAzB,EAAoC,CAACyB,MAAD,CAApC;MACH;;MACD,OAAO,IAAP;IACH;IACD;;;;WACA,+BAAsBA,MAAtB,EAA8B;MAC1B,IAAI,CAACA,MAAM,CAACuD,UAAZ,EAAwB;QACpB,IAAM3D,GAAG,GAAG,KAAKsC,qBAAL,CAA2BlC,MAAM,CAAC3C,OAAlC,CAAZ;;QACA,KAAK2E,iBAAL,CAAuBpC,GAAvB,EAA4BI,MAAM,CAAC1C,OAAnC;;QACA0C,MAAM,CAACuD,UAAP,GAAoB3D,GAApB;MACH;;MACD,OAAOI,MAAM,CAACuD,UAAd;IACH;IACD;;;;WACA,qCAA4BhF,SAA5B,EAAuCsB,IAAvC,EAA6C;MACzC,KAAK,IAAIqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKhD,UAAL,CAAgBiD,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;QAC7C,IAAMsC,MAAM,GAAG,KAAKtF,UAAL,CAAgBgD,CAAhB,EAAmBrB,IAAnB,EAAyBtB,SAAzB,CAAf;;QACA,IAAIiF,MAAJ,EAAY;UACR,OAAOC,oBAAoB,CAACD,MAAD,CAApB,GACD,IAAIpG,aAAJ,CAAkBoG,MAAM,CAACvG,GAAzB,EAA8B,IAA9B,EAAoCuG,MAAM,CAAClG,OAA3C,CADC,GAED,IAAIF,aAAJ,CAAkBoG,MAAlB,EAA0B,IAA1B,CAFN;QAGH;MACJ;;MACD,OAAOtH,SAAP;IACH;;;;;;AAELqB,eAAe,CAACmG,IAAhB;EAAA,iBAAiHnG,eAAjH,EAAuGxD,EAAvG,UAAkJ6B,EAAE,CAACC,UAArJ,MAAuG9B,EAAvG,UAA4L+B,EAAE,CAACC,YAA/L,GAAuGhC,EAAvG,UAAwNkB,QAAxN,MAAuGlB,EAAvG,UAA6PA,EAAE,CAACM,YAAhQ;AAAA;;AACAkD,eAAe,CAACoG,KAAhB,kBADuG5J,EACvG;EAAA,OAAqHwD,eAArH;EAAA,SAAqHA,eAArH;EAAA,YAAkJ;AAAlJ;;AACA;EAAA,mDAFuGxD,EAEvG,mBAAgGwD,eAAhG,EAA6H,CAAC;IAClHqG,IAAI,EAAE3J,UAD4G;IAElH4J,IAAI,EAAE,CAAC;MAAEC,UAAU,EAAE;IAAd,CAAD;EAF4G,CAAD,CAA7H,EAG4B,YAAY;IAChC,OAAO,CAAC;MAAEF,IAAI,EAAEhI,EAAE,CAACC,UAAX;MAAuBkI,UAAU,EAAE,CAAC;QAC5BH,IAAI,EAAE1J;MADsB,CAAD;IAAnC,CAAD,EAEW;MAAE0J,IAAI,EAAE9H,EAAE,CAACC;IAAX,CAFX,EAEsC;MAAE6H,IAAI,EAAE1H,SAAR;MAAmB6H,UAAU,EAAE,CAAC;QAC7DH,IAAI,EAAE1J;MADuD,CAAD,EAE7D;QACC0J,IAAI,EAAEzJ,MADP;QAEC0J,IAAI,EAAE,CAAC5I,QAAD;MAFP,CAF6D;IAA/B,CAFtC,EAOW;MAAE2I,IAAI,EAAE7J,EAAE,CAACM;IAAX,CAPX,CAAP;EAQH,CAZL;AAAA;AAaA;;;AACA,SAAS2J,8BAAT,CAAwCC,cAAxC,EAAwDC,UAAxD,EAAoEC,SAApE,EAA+EC,YAA/E,EAA6F1G,QAA7F,EAAuG;EACnG,OAAOuG,cAAc,IAAI,IAAI1G,eAAJ,CAAoB2G,UAApB,EAAgCC,SAAhC,EAA2CzG,QAA3C,EAAqD0G,YAArD,CAAzB;AACH;AACD;;;AACA,IAAMC,sBAAsB,GAAG;EAC3B;EACAC,OAAO,EAAE/G,eAFkB;EAG3BgH,IAAI,EAAE,CACF,CAAC,IAAIrK,QAAJ,EAAD,EAAiB,IAAIE,QAAJ,EAAjB,EAAiCmD,eAAjC,CADE,EAEF,CAAC,IAAIrD,QAAJ,EAAD,EAAiB2B,UAAjB,CAFE,EAGFE,YAHE,EAIF1B,YAJE,EAKF,CAAC,IAAIH,QAAJ,EAAD,EAAiBe,QAAjB,CALE,CAHqB;EAU3BuJ,UAAU,EAAER;AAVe,CAA/B;AAYA;;AACA,SAASvE,QAAT,CAAkBG,GAAlB,EAAuB;EACnB,OAAOA,GAAG,CAACgC,SAAJ,CAAc,IAAd,CAAP;AACH;AACD;;;AACA,SAAS7B,OAAT,CAAiBxB,SAAjB,EAA4BsB,IAA5B,EAAkC;EAC9B,OAAOtB,SAAS,GAAG,GAAZ,GAAkBsB,IAAzB;AACH;;AACD,SAAS4D,oBAAT,CAA8Bf,KAA9B,EAAqC;EACjC,OAAO,CAAC,EAAEA,KAAK,CAACzF,GAAN,IAAayF,KAAK,CAACpF,OAArB,CAAR;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,IAAMmH,YAAY,GAAG3J,UAAU;EAC3B,gBAAY4J,WAAZ,EAAyB;IAAA;;IACrB,KAAKA,WAAL,GAAmBA,WAAnB;EACH;;EAH0B;AAAA,IAA/B;AAKA;;;AACA,IAAMC,wBAAwB,GAAG,IAAIrK,cAAJ,CAAmB,0BAAnB,CAAjC;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMsK,iBAAiB,GAAG,IAAItK,cAAJ,CAAmB,mBAAnB,EAAwC;EAC9DwJ,UAAU,EAAE,MADkD;EAE9De,OAAO,EAAEC;AAFqD,CAAxC,CAA1B;AAIA;;AACA,SAASA,yBAAT,GAAqC;EACjC,IAAM1G,SAAS,GAAG7D,MAAM,CAACU,QAAD,CAAxB;;EACA,IAAM8J,SAAS,GAAG3G,SAAS,GAAGA,SAAS,CAAC4G,QAAb,GAAwB,IAAnD;;EACA,OAAO;IACH;IACA;IACAC,WAAW,EAAE;MAAA,OAAOF,SAAS,GAAGA,SAAS,CAACG,QAAV,GAAqBH,SAAS,CAACI,MAAlC,GAA2C,EAA3D;IAAA;EAHV,CAAP;AAKH;AACD;;;AACA,IAAMC,iBAAiB,GAAG,CACtB,WADsB,EAEtB,eAFsB,EAGtB,KAHsB,EAItB,QAJsB,EAKtB,MALsB,EAMtB,QANsB,EAOtB,QAPsB,EAQtB,cARsB,EAStB,YATsB,EAUtB,YAVsB,EAWtB,MAXsB,EAYtB,QAZsB,CAA1B;AAcA;;AACA,IAAMC,wBAAwB,GAAGD,iBAAiB,CAAC7J,GAAlB,CAAsB,UAAA+J,IAAI;EAAA,kBAAQA,IAAR;AAAA,CAA1B,EAA2CC,IAA3C,CAAgD,IAAhD,CAAjC;AACA;;AACA,IAAMC,cAAc,GAAG,2BAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,O;;;;;EACF,iBAAYC,UAAZ,EAAwBC,aAAxB,EAAuCC,UAAvC,EAAmDb,SAAnD,EAA8DpH,aAA9D,EAA6EkI,QAA7E,EAAuF;IAAA;;IAAA;;IACnF,2BAAMH,UAAN;IACA,OAAKC,aAAL,GAAqBA,aAArB;IACA,OAAKZ,SAAL,GAAiBA,SAAjB;IACA,OAAKpH,aAAL,GAAqBA,aAArB;IACA,OAAKmI,OAAL,GAAe,KAAf;IACA,OAAKC,qBAAL,GAA6B,EAA7B;IACA;;IACA,OAAKC,iBAAL,GAAyB3K,YAAY,CAAC4K,KAAtC;;IACA,IAAIJ,QAAJ,EAAc;MACV,IAAIA,QAAQ,CAACK,KAAb,EAAoB;QAChB,OAAKA,KAAL,GAAa,OAAKC,YAAL,GAAoBN,QAAQ,CAACK,KAA1C;MACH;;MACD,IAAIL,QAAQ,CAACO,OAAb,EAAsB;QAClB,OAAKA,OAAL,GAAeP,QAAQ,CAACO,OAAxB;MACH;IACJ,CAhBkF,CAiBnF;IACA;;;IACA,IAAI,CAACR,UAAL,EAAiB;MACbF,UAAU,CAACW,aAAX,CAAyB1D,YAAzB,CAAsC,aAAtC,EAAqD,MAArD;IACH;;IArBkF;EAsBtF;EACD;AACJ;AACA;AACA;;;;;SACI,eAAa;MACT,OAAO,KAAKmD,OAAZ;IACH,C;SACD,aAAWQ,MAAX,EAAmB;MACf,KAAKR,OAAL,GAAe9K,qBAAqB,CAACsL,MAAD,CAApC;IACH;IACD;;;;SACA,eAAc;MACV,OAAO,KAAKC,QAAZ;IACH,C;SACD,aAAY7D,KAAZ,EAAmB;MACf,IAAIA,KAAK,KAAK,KAAK6D,QAAnB,EAA6B;QACzB,IAAI7D,KAAJ,EAAW;UACP,KAAK8D,cAAL,CAAoB9D,KAApB;QACH,CAFD,MAGK,IAAI,KAAK6D,QAAT,EAAmB;UACpB,KAAKE,gBAAL;QACH;;QACD,KAAKF,QAAL,GAAgB7D,KAAhB;MACH;IACJ;IACD;;;;SACA,eAAc;MACV,OAAO,KAAKgE,QAAZ;IACH,C;SACD,aAAYhE,KAAZ,EAAmB;MACf,IAAMiE,QAAQ,GAAG,KAAKC,iBAAL,CAAuBlE,KAAvB,CAAjB;;MACA,IAAIiE,QAAQ,KAAK,KAAKD,QAAtB,EAAgC;QAC5B,KAAKA,QAAL,GAAgBC,QAAhB;;QACA,KAAKE,sBAAL;MACH;IACJ;IACD;;;;SACA,eAAe;MACX,OAAO,KAAKC,SAAZ;IACH,C;SACD,aAAapE,KAAb,EAAoB;MAChB,IAAMiE,QAAQ,GAAG,KAAKC,iBAAL,CAAuBlE,KAAvB,CAAjB;;MACA,IAAIiE,QAAQ,KAAK,KAAKG,SAAtB,EAAiC;QAC7B,KAAKA,SAAL,GAAiBH,QAAjB;;QACA,KAAKE,sBAAL;MACH;IACJ;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,wBAAehK,QAAf,EAAyB;MACrB,IAAI,CAACA,QAAL,EAAe;QACX,OAAO,CAAC,EAAD,EAAK,EAAL,CAAP;MACH;;MACD,IAAMkK,KAAK,GAAGlK,QAAQ,CAACmK,KAAT,CAAe,GAAf,CAAd;;MACA,QAAQD,KAAK,CAAC5F,MAAd;QACI,KAAK,CAAL;UACI,OAAO,CAAC,EAAD,EAAK4F,KAAK,CAAC,CAAD,CAAV,CAAP;QAAuB;;QAC3B,KAAK,CAAL;UACI,OAAOA,KAAP;;QACJ;UACI,MAAMjK,KAAK,gCAAwBD,QAAxB,QAAX;QAAiD;MANzD;IAQH;;;WACD,oBAAW;MACP;MACA;MACA,KAAKgK,sBAAL;IACH;;;WACD,8BAAqB;MACjB,IAAMI,cAAc,GAAG,KAAKC,+BAA5B;;MACA,IAAID,cAAc,IAAIA,cAAc,CAACE,IAArC,EAA2C;QACvC,IAAMC,OAAO,GAAG,KAAKrC,SAAL,CAAeE,WAAf,EAAhB,CADuC,CAEvC;QACA;QACA;QACA;QACA;QACA;;;QACA,IAAImC,OAAO,KAAK,KAAKC,aAArB,EAAoC;UAChC,KAAKA,aAAL,GAAqBD,OAArB;;UACA,KAAKE,wBAAL,CAA8BF,OAA9B;QACH;MACJ;IACJ;;;WACD,uBAAc;MACV,KAAKpB,iBAAL,CAAuBuB,WAAvB;;MACA,IAAI,KAAKL,+BAAT,EAA0C;QACtC,KAAKA,+BAAL,CAAqC7G,KAArC;MACH;IACJ;;;WACD,0BAAiB;MACb,OAAO,CAAC,KAAKmH,OAAb;IACH;;;WACD,wBAAe5H,GAAf,EAAoB;MAChB,KAAK6G,gBAAL,GADgB,CAEhB;MACA;;;MACA,IAAMgB,IAAI,GAAG,KAAK1C,SAAL,CAAeE,WAAf,EAAb;;MACA,KAAKoC,aAAL,GAAqBI,IAArB;;MACA,KAAKC,oCAAL,CAA0C9H,GAA1C;;MACA,KAAK0H,wBAAL,CAA8BG,IAA9B;;MACA,KAAK/C,WAAL,CAAiB2B,aAAjB,CAA+BlE,WAA/B,CAA2CvC,GAA3C;IACH;;;WACD,4BAAmB;MACf,IAAM+H,aAAa,GAAG,KAAKjD,WAAL,CAAiB2B,aAAvC;MACA,IAAIuB,UAAU,GAAGD,aAAa,CAAC/E,UAAd,CAAyBzB,MAA1C;;MACA,IAAI,KAAK+F,+BAAT,EAA0C;QACtC,KAAKA,+BAAL,CAAqC7G,KAArC;MACH,CALc,CAMf;MACA;;;MACA,OAAOuH,UAAU,EAAjB,EAAqB;QACjB,IAAMC,KAAK,GAAGF,aAAa,CAAC/E,UAAd,CAAyBgF,UAAzB,CAAd,CADiB,CAEjB;QACA;;QACA,IAAIC,KAAK,CAAChF,QAAN,KAAmB,CAAnB,IAAwBgF,KAAK,CAAC/F,QAAN,CAAeC,WAAf,OAAiC,KAA7D,EAAoE;UAChE8F,KAAK,CAACC,MAAN;QACH;MACJ;IACJ;;;WACD,kCAAyB;MACrB,IAAI,CAAC,KAAKC,cAAL,EAAL,EAA4B;QACxB;MACH;;MACD,IAAMC,IAAI,GAAG,KAAKtD,WAAL,CAAiB2B,aAA9B;MACA,IAAM4B,cAAc,GAAG,CAAC,KAAK7B,OAAL,GAClB,KAAKT,aAAL,CAAmBuC,qBAAnB,CAAyC,KAAK9B,OAA9C,EAAuDY,KAAvD,CAA6D,IAA7D,CADkB,GAElB,KAAKrB,aAAL,CAAmBwC,sBAAnB,EAFiB,EAE4BzH,MAF5B,CAEmC,UAAA0H,SAAS;QAAA,OAAIA,SAAS,CAACjH,MAAV,GAAmB,CAAvB;MAAA,CAF5C,CAAvB;;MAGA,KAAK4E,qBAAL,CAA2BsC,OAA3B,CAAmC,UAAAD,SAAS;QAAA,OAAIJ,IAAI,CAACM,SAAL,CAAeR,MAAf,CAAsBM,SAAtB,CAAJ;MAAA,CAA5C;;MACAH,cAAc,CAACI,OAAf,CAAuB,UAAAD,SAAS;QAAA,OAAIJ,IAAI,CAACM,SAAL,CAAeC,GAAf,CAAmBH,SAAnB,CAAJ;MAAA,CAAhC;MACA,KAAKrC,qBAAL,GAA6BkC,cAA7B;;MACA,IAAI,KAAKO,QAAL,KAAkB,KAAKC,sBAAvB,IACA,CAACR,cAAc,CAACS,QAAf,CAAwB,mBAAxB,CADL,EACmD;QAC/C,IAAI,KAAKD,sBAAT,EAAiC;UAC7BT,IAAI,CAACM,SAAL,CAAeR,MAAf,CAAsB,KAAKW,sBAA3B;QACH;;QACD,IAAI,KAAKD,QAAT,EAAmB;UACfR,IAAI,CAACM,SAAL,CAAeC,GAAf,CAAmB,KAAKC,QAAxB;QACH;;QACD,KAAKC,sBAAL,GAA8B,KAAKD,QAAnC;MACH;IACJ;IACD;AACJ;AACA;AACA;AACA;;;;WACI,2BAAkB9F,KAAlB,EAAyB;MACrB,OAAO,OAAOA,KAAP,KAAiB,QAAjB,GAA4BA,KAAK,CAACiG,IAAN,GAAa3B,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAA5B,GAAyDtE,KAAhE;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,kCAAyB+E,IAAzB,EAA+B;MAC3B,IAAMmB,QAAQ,GAAG,KAAK1B,+BAAtB;;MACA,IAAI0B,QAAJ,EAAc;QACVA,QAAQ,CAACP,OAAT,CAAiB,UAACQ,KAAD,EAAQrG,OAAR,EAAoB;UACjCqG,KAAK,CAACR,OAAN,CAAc,UAAA/C,IAAI,EAAI;YAClB9C,OAAO,CAACG,YAAR,CAAqB2C,IAAI,CAACzF,IAA1B,iBAAwC4H,IAAxC,cAAgDnC,IAAI,CAAC5C,KAArD;UACH,CAFD;QAGH,CAJD;MAKH;IACJ;IACD;AACJ;AACA;AACA;;;;WACI,8CAAqCF,OAArC,EAA8C;MAC1C,IAAMsG,mBAAmB,GAAGtG,OAAO,CAACuG,gBAAR,CAAyB1D,wBAAzB,CAA5B;MACA,IAAMuD,QAAQ,GAAI,KAAK1B,+BAAL,GACd,KAAKA,+BAAL,IAAwC,IAAIrJ,GAAJ,EAD5C;;MAF0C,2BAIjCqD,CAJiC;QAKtCkE,iBAAiB,CAACiD,OAAlB,CAA0B,UAAA/C,IAAI,EAAI;UAC9B,IAAM0D,oBAAoB,GAAGF,mBAAmB,CAAC5H,CAAD,CAAhD;UACA,IAAMwB,KAAK,GAAGsG,oBAAoB,CAACC,YAArB,CAAkC3D,IAAlC,CAAd;UACA,IAAM4D,KAAK,GAAGxG,KAAK,GAAGA,KAAK,CAACwG,KAAN,CAAY1D,cAAZ,CAAH,GAAiC,IAApD;;UACA,IAAI0D,KAAJ,EAAW;YACP,IAAIzG,UAAU,GAAGmG,QAAQ,CAACvJ,GAAT,CAAa2J,oBAAb,CAAjB;;YACA,IAAI,CAACvG,UAAL,EAAiB;cACbA,UAAU,GAAG,EAAb;cACAmG,QAAQ,CAACxJ,GAAT,CAAa4J,oBAAb,EAAmCvG,UAAnC;YACH;;YACDA,UAAU,CAAC/D,IAAX,CAAgB;cAAEmB,IAAI,EAAEyF,IAAR;cAAc5C,KAAK,EAAEwG,KAAK,CAAC,CAAD;YAA1B,CAAhB;UACH;QACJ,CAZD;MALsC;;MAI1C,KAAK,IAAIhI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4H,mBAAmB,CAAC3H,MAAxC,EAAgDD,CAAC,EAAjD,EAAqD;QAAA,MAA5CA,CAA4C;MAcpD;IACJ;IACD;;;;WACA,wBAAeiI,OAAf,EAAwB;MAAA;;MACpB,KAAKC,aAAL,GAAqB,IAArB;MACA,KAAKC,QAAL,GAAgB,IAAhB;;MACA,KAAKrD,iBAAL,CAAuBuB,WAAvB;;MACA,IAAI4B,OAAJ,EAAa;QACT,2BAA8B,KAAKG,cAAL,CAAoBH,OAApB,CAA9B;QAAA;QAAA,IAAO5K,SAAP;QAAA,IAAkB1B,QAAlB;;QACA,IAAI0B,SAAJ,EAAe;UACX,KAAK6K,aAAL,GAAqB7K,SAArB;QACH;;QACD,IAAI1B,QAAJ,EAAc;UACV,KAAKwM,QAAL,GAAgBxM,QAAhB;QACH;;QACD,KAAKmJ,iBAAL,GAAyB,KAAKL,aAAL,CACpB4D,eADoB,CACJ1M,QADI,EACM0B,SADN,EAEpBoB,IAFoB,CAEfhE,IAAI,CAAC,CAAD,CAFW,EAGpB6N,SAHoB,CAGV,UAAA5J,GAAG;UAAA,OAAI,MAAI,CAAC6J,cAAL,CAAoB7J,GAApB,CAAJ;QAAA,CAHO,EAGuB,UAACiB,GAAD,EAAS;UACrD,IAAMC,YAAY,mCAA4BvC,SAA5B,cAAyC1B,QAAzC,eAAsDgE,GAAG,CAACE,OAA1D,CAAlB;;UACA,MAAI,CAACpD,aAAL,CAAmBqD,WAAnB,CAA+B,IAAIlE,KAAJ,CAAUgE,YAAV,CAA/B;QACH,CANwB,CAAzB;MAOH;IACJ;;;;EArPiB2D,Y;;AAuPtBgB,OAAO,CAAC/B,IAAR;EAAA,iBAAyG+B,OAAzG,EAzXuG1L,EAyXvG,mBAAkIA,EAAE,CAAC2P,UAArI,GAzXuG3P,EAyXvG,mBAA4JwD,eAA5J,GAzXuGxD,EAyXvG,mBAAwL,aAAxL,GAzXuGA,EAyXvG,mBAAmO6K,iBAAnO,GAzXuG7K,EAyXvG,mBAAiQA,EAAE,CAACM,YAApQ,GAzXuGN,EAyXvG,mBAA6R4K,wBAA7R;AAAA;;AACAc,OAAO,CAACkE,IAAR,kBA1XuG5P,EA0XvG;EAAA,MAA6F0L,OAA7F;EAAA;EAAA,oBAAsQ,KAAtQ;EAAA;EAAA;IAAA;MA1XuG1L,EA0XvG;MA1XuGA,EA0XvG;IAAA;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA;EAAA,WA1XuGA,EA0XvG;EAAA;EAAA;EAAA;EAAA;IAAA;MA1XuGA,EA0XvG;MA1XuGA,EA0XimB,gBAAxsB;IAAA;EAAA;EAAA;EAAA;EAAA;AAAA;;AACA;EAAA,mDA3XuGA,EA2XvG,mBAAgG0L,OAAhG,EAAqH,CAAC;IAC1G7B,IAAI,EAAEpJ,SADoG;IAE1GqJ,IAAI,EAAE,CAAC;MAAE+F,QAAQ,EAAE,2BAAZ;MAAyCC,QAAQ,EAAE,UAAnD;MAA+DC,QAAQ,EAAE,SAAzE;MAAoFC,MAAM,EAAE,CAAC,OAAD,CAA5F;MAAuGC,IAAI,EAAE;QACxG,QAAQ,KADgG;QAExG,SAAS,sBAF+F;QAGxG,6BAA6B,mCAH2E;QAIxG,6BAA6B,sBAJ2E;QAKxG,kCAAkC,0BALsE;QAMxG,2BAA2B,QAN6E;QAOxG,6BAA6B;MAP2E,CAA7G;MAQIC,aAAa,EAAExP,iBAAiB,CAACyP,IARrC;MAQ2CC,eAAe,EAAEzP,uBAAuB,CAAC0P,MARpF;MAQ4FC,MAAM,EAAE,CAAC,oxBAAD;IARpG,CAAD;EAFoG,CAAD,CAArH,EAW4B,YAAY;IAChC,OAAO,CAAC;MAAEzG,IAAI,EAAE7J,EAAE,CAAC2P;IAAX,CAAD,EAA0B;MAAE9F,IAAI,EAAErG;IAAR,CAA1B,EAAqD;MAAEqG,IAAI,EAAE1H,SAAR;MAAmB6H,UAAU,EAAE,CAAC;QAC5EH,IAAI,EAAEjJ,SADsE;QAE5EkJ,IAAI,EAAE,CAAC,aAAD;MAFsE,CAAD;IAA/B,CAArD,EAGW;MAAED,IAAI,EAAE1H,SAAR;MAAmB6H,UAAU,EAAE,CAAC;QAClCH,IAAI,EAAEzJ,MAD4B;QAElC0J,IAAI,EAAE,CAACe,iBAAD;MAF4B,CAAD;IAA/B,CAHX,EAMW;MAAEhB,IAAI,EAAE7J,EAAE,CAACM;IAAX,CANX,EAMsC;MAAEuJ,IAAI,EAAE1H,SAAR;MAAmB6H,UAAU,EAAE,CAAC;QAC7DH,IAAI,EAAE1J;MADuD,CAAD,EAE7D;QACC0J,IAAI,EAAEzJ,MADP;QAEC0J,IAAI,EAAE,CAACc,wBAAD;MAFP,CAF6D;IAA/B,CANtC,CAAP;EAYH,CAxBL,EAwBuB;IAAE2B,MAAM,EAAE,CAAC;MAClB1C,IAAI,EAAEhJ;IADY,CAAD,CAAV;IAEP4M,OAAO,EAAE,CAAC;MACV5D,IAAI,EAAEhJ;IADI,CAAD,CAFF;IAIPwL,OAAO,EAAE,CAAC;MACVxC,IAAI,EAAEhJ;IADI,CAAD,CAJF;IAMP4N,QAAQ,EAAE,CAAC;MACX5E,IAAI,EAAEhJ;IADK,CAAD;EANH,CAxBvB;AAAA;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACM0P,a;;;;AAENA,aAAa,CAAC5G,IAAd;EAAA,iBAA+G4G,aAA/G;AAAA;;AACAA,aAAa,CAACC,IAAd,kBAvauGxQ,EAuavG;EAAA,MAAgHuQ;AAAhH;AACAA,aAAa,CAACE,IAAd,kBAxauGzQ,EAwavG;EAAA,UAAyIgB,eAAzI,EAA0JA,eAA1J;AAAA;;AACA;EAAA,mDAzauGhB,EAyavG,mBAAgGuQ,aAAhG,EAA2H,CAAC;IAChH1G,IAAI,EAAE/I,QAD0G;IAEhHgJ,IAAI,EAAE,CAAC;MACC4G,OAAO,EAAE,CAAC1P,eAAD,CADV;MAEC2P,OAAO,EAAE,CAACjF,OAAD,EAAU1K,eAAV,CAFV;MAGC4P,YAAY,EAAE,CAAClF,OAAD;IAHf,CAAD;EAF0G,CAAD,CAA3H;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAASpB,sBAAT,EAAiCL,8BAAjC,EAAiEW,wBAAjE,EAA2FC,iBAA3F,EAA8GE,yBAA9G,EAAyIW,OAAzI,EAAkJ6E,aAAlJ,EAAiK/M,eAAjK,EAAkLL,sCAAlL,EAA0NF,kCAA1N,EAA8PJ,2BAA9P,EAA2RG,6BAA3R"},"metadata":{},"sourceType":"module"}
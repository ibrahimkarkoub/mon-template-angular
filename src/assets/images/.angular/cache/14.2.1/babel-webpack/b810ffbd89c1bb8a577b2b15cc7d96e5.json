{"ast":null,"code":"import _toConsumableArray from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _inherits from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, ViewChild, InjectionToken, Injector, TemplateRef, InjectFlags, Injectable, SkipSelf, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayRef, OverlayModule } from '@angular/cdk/overlay';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { startWith } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Configuration for opening a modal dialog. */\n\nfunction CdkDialogContainer_ng_template_0_Template(rf, ctx) {}\n\nvar DialogConfig = /*#__PURE__*/_createClass(function DialogConfig() {\n  _classCallCheck(this, DialogConfig);\n\n  /** The ARIA role of the dialog element. */\n  this.role = 'dialog';\n  /** Optional CSS class or classes applied to the overlay panel. */\n\n  this.panelClass = '';\n  /** Whether the dialog has a backdrop. */\n\n  this.hasBackdrop = true;\n  /** Optional CSS class or classes applied to the overlay backdrop. */\n\n  this.backdropClass = '';\n  /** Whether the dialog closes with the escape key or pointer events outside the panel element. */\n\n  this.disableClose = false;\n  /** Width of the dialog. */\n\n  this.width = '';\n  /** Height of the dialog. */\n\n  this.height = '';\n  /** Data being injected into the child component. */\n\n  this.data = null;\n  /** ID of the element that describes the dialog. */\n\n  this.ariaDescribedBy = null;\n  /** ID of the element that labels the dialog. */\n\n  this.ariaLabelledBy = null;\n  /** Dialog label applied via `aria-label` */\n\n  this.ariaLabel = null;\n  /** Whether this a modal dialog. Used to set the `aria-modal` attribute. */\n\n  this.ariaModal = true;\n  /**\n   * Where the dialog should focus on open.\n   * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n   * AutoFocusTarget instead.\n   */\n\n  this.autoFocus = 'first-tabbable';\n  /**\n   * Whether the dialog should restore focus to the previously-focused element upon closing.\n   * Has the following behavior based on the type that is passed in:\n   * - `boolean` - when true, will return focus to the element that was focused before the dialog\n   *    was opened, otherwise won't restore focus at all.\n   * - `string` - focus will be restored to the first element that matches the CSS selector.\n   * - `HTMLElement` - focus will be restored to the specific element.\n   */\n\n  this.restoreFocus = true;\n  /**\n   * Whether the dialog should close when the user navigates backwards or forwards through browser\n   * history. This does not apply to navigation via anchor element unless using URL-hash based\n   * routing (`HashLocationStrategy` in the Angular router).\n   */\n\n  this.closeOnNavigation = true;\n  /**\n   * Whether the dialog should close when the dialog service is destroyed. This is useful if\n   * another service is wrapping the dialog and is managing the destruction instead.\n   */\n\n  this.closeOnDestroy = true;\n});\n\nfunction throwDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\n\n\nvar CdkDialogContainer = /*#__PURE__*/function (_BasePortalOutlet) {\n  _inherits(CdkDialogContainer, _BasePortalOutlet);\n\n  var _super = _createSuper(CdkDialogContainer);\n\n  function CdkDialogContainer(_elementRef, _focusTrapFactory, _document, _config, _interactivityChecker, _ngZone, _overlayRef, _focusMonitor) {\n    var _this;\n\n    _classCallCheck(this, CdkDialogContainer);\n\n    _this = _super.call(this);\n    _this._elementRef = _elementRef;\n    _this._focusTrapFactory = _focusTrapFactory;\n    _this._config = _config;\n    _this._interactivityChecker = _interactivityChecker;\n    _this._ngZone = _ngZone;\n    _this._overlayRef = _overlayRef;\n    _this._focusMonitor = _focusMonitor;\n    /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n\n    _this._elementFocusedBeforeDialogWasOpened = null;\n    /**\n     * Type of interaction that led to the dialog being closed. This is used to determine\n     * whether the focus style will be applied when returning focus to its original location\n     * after the dialog is closed.\n     */\n\n    _this._closeInteractionType = null;\n    /**\n     * Attaches a DOM portal to the dialog container.\n     * @param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n\n    _this.attachDomPortal = function (portal) {\n      if (_this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwDialogContentAlreadyAttachedError();\n      }\n\n      var result = _this._portalOutlet.attachDomPortal(portal);\n\n      _this._contentAttached();\n\n      return result;\n    };\n\n    _this._ariaLabelledBy = _this._config.ariaLabelledBy || null;\n    _this._document = _document;\n    return _this;\n  }\n\n  _createClass(CdkDialogContainer, [{\n    key: \"_contentAttached\",\n    value: function _contentAttached() {\n      this._initializeFocusTrap();\n\n      this._handleBackdropClicks();\n\n      this._captureInitialFocus();\n    }\n    /**\n     * Can be used by child classes to customize the initial focus\n     * capturing behavior (e.g. if it's tied to an animation).\n     */\n\n  }, {\n    key: \"_captureInitialFocus\",\n    value: function _captureInitialFocus() {\n      this._trapFocus();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._restoreFocus();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n\n  }, {\n    key: \"attachComponentPortal\",\n    value: function attachComponentPortal(portal) {\n      if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwDialogContentAlreadyAttachedError();\n      }\n\n      var result = this._portalOutlet.attachComponentPortal(portal);\n\n      this._contentAttached();\n\n      return result;\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n\n  }, {\n    key: \"attachTemplatePortal\",\n    value: function attachTemplatePortal(portal) {\n      if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwDialogContentAlreadyAttachedError();\n      }\n\n      var result = this._portalOutlet.attachTemplatePortal(portal);\n\n      this._contentAttached();\n\n      return result;\n    } // TODO(crisbeto): this shouldn't be exposed, but there are internal references to it.\n\n    /** Captures focus if it isn't already inside the dialog. */\n\n  }, {\n    key: \"_recaptureFocus\",\n    value: function _recaptureFocus() {\n      if (!this._containsFocus()) {\n        this._trapFocus();\n      }\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n\n  }, {\n    key: \"_forceFocus\",\n    value: function _forceFocus(element, options) {\n      if (!this._interactivityChecker.isFocusable(element)) {\n        element.tabIndex = -1; // The tabindex attribute should be removed to avoid navigating to that element again\n\n        this._ngZone.runOutsideAngular(function () {\n          var callback = function callback() {\n            element.removeEventListener('blur', callback);\n            element.removeEventListener('mousedown', callback);\n            element.removeAttribute('tabindex');\n          };\n\n          element.addEventListener('blur', callback);\n          element.addEventListener('mousedown', callback);\n        });\n      }\n\n      element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n\n  }, {\n    key: \"_focusByCssSelector\",\n    value: function _focusByCssSelector(selector, options) {\n      var elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n\n      if (elementToFocus) {\n        this._forceFocus(elementToFocus, options);\n      }\n    }\n    /**\n     * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n     * cannot be moved then focus will go to the dialog container.\n     */\n\n  }, {\n    key: \"_trapFocus\",\n    value: function _trapFocus() {\n      var _this2 = this;\n\n      var element = this._elementRef.nativeElement; // If were to attempt to focus immediately, then the content of the dialog would not yet be\n      // ready in instances where change detection has to run first. To deal with this, we simply\n      // wait for the microtask queue to be empty when setting focus when autoFocus isn't set to\n      // dialog. If the element inside the dialog can't be focused, then the container is focused\n      // so the user can't tab into other elements behind it.\n\n      switch (this._config.autoFocus) {\n        case false:\n        case 'dialog':\n          // Ensure that focus is on the dialog container. It's possible that a different\n          // component tried to move focus while the open animation was running. See:\n          // https://github.com/angular/components/issues/16215. Note that we only want to do this\n          // if the focus isn't inside the dialog already, because it's possible that the consumer\n          // turned off `autoFocus` in order to move focus themselves.\n          if (!this._containsFocus()) {\n            element.focus();\n          }\n\n          break;\n\n        case true:\n        case 'first-tabbable':\n          this._focusTrap.focusInitialElementWhenReady().then(function (focusedSuccessfully) {\n            // If we weren't able to find a focusable element in the dialog, then focus the dialog\n            // container instead.\n            if (!focusedSuccessfully) {\n              _this2._focusDialogContainer();\n            }\n          });\n\n          break;\n\n        case 'first-heading':\n          this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n\n          break;\n\n        default:\n          this._focusByCssSelector(this._config.autoFocus);\n\n          break;\n      }\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n\n  }, {\n    key: \"_restoreFocus\",\n    value: function _restoreFocus() {\n      var focusConfig = this._config.restoreFocus;\n      var focusTargetElement = null;\n\n      if (typeof focusConfig === 'string') {\n        focusTargetElement = this._document.querySelector(focusConfig);\n      } else if (typeof focusConfig === 'boolean') {\n        focusTargetElement = focusConfig ? this._elementFocusedBeforeDialogWasOpened : null;\n      } else if (focusConfig) {\n        focusTargetElement = focusConfig;\n      } // We need the extra check, because IE can set the `activeElement` to null in some cases.\n\n\n      if (this._config.restoreFocus && focusTargetElement && typeof focusTargetElement.focus === 'function') {\n        var activeElement = _getFocusedElementPierceShadowDom();\n\n        var element = this._elementRef.nativeElement; // Make sure that focus is still inside the dialog or is on the body (usually because a\n        // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n        // the consumer moved it themselves before the animation was done, in which case we shouldn't\n        // do anything.\n\n        if (!activeElement || activeElement === this._document.body || activeElement === element || element.contains(activeElement)) {\n          if (this._focusMonitor) {\n            this._focusMonitor.focusVia(focusTargetElement, this._closeInteractionType);\n\n            this._closeInteractionType = null;\n          } else {\n            focusTargetElement.focus();\n          }\n        }\n      }\n\n      if (this._focusTrap) {\n        this._focusTrap.destroy();\n      }\n    }\n    /** Focuses the dialog container. */\n\n  }, {\n    key: \"_focusDialogContainer\",\n    value: function _focusDialogContainer() {\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        this._elementRef.nativeElement.focus();\n      }\n    }\n    /** Returns whether focus is inside the dialog. */\n\n  }, {\n    key: \"_containsFocus\",\n    value: function _containsFocus() {\n      var element = this._elementRef.nativeElement;\n\n      var activeElement = _getFocusedElementPierceShadowDom();\n\n      return element === activeElement || element.contains(activeElement);\n    }\n    /** Sets up the focus trap. */\n\n  }, {\n    key: \"_initializeFocusTrap\",\n    value: function _initializeFocusTrap() {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement); // Save the previously focused element. This element will be re-focused\n      // when the dialog closes.\n\n      if (this._document) {\n        this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n      }\n    }\n    /** Sets up the listener that handles clicks on the dialog backdrop. */\n\n  }, {\n    key: \"_handleBackdropClicks\",\n    value: function _handleBackdropClicks() {\n      var _this3 = this;\n\n      // Clicking on the backdrop will move focus out of dialog.\n      // Recapture it if closing via the backdrop is disabled.\n      this._overlayRef.backdropClick().subscribe(function () {\n        if (_this3._config.disableClose) {\n          _this3._recaptureFocus();\n        }\n      });\n    }\n  }]);\n\n  return CdkDialogContainer;\n}(BasePortalOutlet);\n\nCdkDialogContainer.ɵfac = function CdkDialogContainer_Factory(t) {\n  return new (t || CdkDialogContainer)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusTrapFactory), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(DialogConfig), i0.ɵɵdirectiveInject(i1.InteractivityChecker), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1$1.OverlayRef), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n};\n\nCdkDialogContainer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CdkDialogContainer,\n  selectors: [[\"cdk-dialog-container\"]],\n  viewQuery: function CdkDialogContainer_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"tabindex\", \"-1\", 1, \"cdk-dialog-container\"],\n  hostVars: 6,\n  hostBindings: function CdkDialogContainer_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"id\", ctx._config.id || null)(\"role\", ctx._config.role)(\"aria-modal\", ctx._config.ariaModal)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkPortalOutlet\", \"\"]],\n  template: function CdkDialogContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CdkDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    }\n  },\n  dependencies: [i3.CdkPortalOutlet],\n  styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDialogContainer, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-dialog-container',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      host: {\n        'class': 'cdk-dialog-container',\n        'tabindex': '-1',\n        '[attr.id]': '_config.id || null',\n        '[attr.role]': '_config.role',\n        '[attr.aria-modal]': '_config.ariaModal',\n        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n        '[attr.aria-label]': '_config.ariaLabel',\n        '[attr.aria-describedby]': '_config.ariaDescribedBy || null'\n      },\n      template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n      styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DialogConfig]\n      }]\n    }, {\n      type: i1.InteractivityChecker\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1$1.OverlayRef\n    }, {\n      type: i1.FocusMonitor\n    }];\n  }, {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Reference to a dialog opened via the Dialog service.\n */\n\n\nvar DialogRef = /*#__PURE__*/function () {\n  function DialogRef(overlayRef, config) {\n    var _this4 = this;\n\n    _classCallCheck(this, DialogRef);\n\n    this.overlayRef = overlayRef;\n    this.config = config;\n    /** Emits when the dialog has been closed. */\n\n    this.closed = new Subject();\n    this.disableClose = config.disableClose;\n    this.backdropClick = overlayRef.backdropClick();\n    this.keydownEvents = overlayRef.keydownEvents();\n    this.outsidePointerEvents = overlayRef.outsidePointerEvents();\n    this.id = config.id; // By the time the dialog is created we are guaranteed to have an ID.\n\n    this.keydownEvents.subscribe(function (event) {\n      if (event.keyCode === ESCAPE && !_this4.disableClose && !hasModifierKey(event)) {\n        event.preventDefault();\n\n        _this4.close(undefined, {\n          focusOrigin: 'keyboard'\n        });\n      }\n    });\n    this.backdropClick.subscribe(function () {\n      if (!_this4.disableClose) {\n        _this4.close(undefined, {\n          focusOrigin: 'mouse'\n        });\n      }\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param result Optional result to return to the dialog opener.\n   * @param options Additional options to customize the closing behavior.\n   */\n\n\n  _createClass(DialogRef, [{\n    key: \"close\",\n    value: function close(result, options) {\n      if (this.containerInstance) {\n        var closedSubject = this.closed;\n        this.containerInstance._closeInteractionType = (options === null || options === void 0 ? void 0 : options.focusOrigin) || 'program';\n        this.overlayRef.dispose();\n        closedSubject.next(result);\n        closedSubject.complete();\n        this.componentInstance = this.containerInstance = null;\n      }\n    }\n    /** Updates the position of the dialog based on the current position strategy. */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      this.overlayRef.updatePosition();\n      return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n\n  }, {\n    key: \"updateSize\",\n    value: function updateSize() {\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      this.overlayRef.updateSize({\n        width: width,\n        height: height\n      });\n      return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n\n  }, {\n    key: \"addPanelClass\",\n    value: function addPanelClass(classes) {\n      this.overlayRef.addPanelClass(classes);\n      return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n\n  }, {\n    key: \"removePanelClass\",\n    value: function removePanelClass(classes) {\n      this.overlayRef.removePanelClass(classes);\n      return this;\n    }\n  }]);\n\n  return DialogRef;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token for the Dialog's ScrollStrategy. */\n\n\nvar DIALOG_SCROLL_STRATEGY = new InjectionToken('DialogScrollStrategy');\n/** Injection token for the Dialog's Data. */\n\nvar DIALOG_DATA = new InjectionToken('DialogData');\n/** Injection token that can be used to provide default options for the dialog module. */\n\nvar DEFAULT_DIALOG_CONFIG = new InjectionToken('DefaultDialogConfig');\n/** @docs-private */\n\nfunction DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.block();\n  };\n}\n/** @docs-private */\n\n\nvar DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Unique id for the created dialog. */\n\nvar uniqueId = 0;\n\nvar Dialog = /*#__PURE__*/function () {\n  function Dialog(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy) {\n    var _this5 = this;\n\n    _classCallCheck(this, Dialog);\n\n    this._overlay = _overlay;\n    this._injector = _injector;\n    this._defaultOptions = _defaultOptions;\n    this._parentDialog = _parentDialog;\n    this._overlayContainer = _overlayContainer;\n    this._openDialogsAtThisLevel = [];\n    this._afterAllClosedAtThisLevel = new Subject();\n    this._afterOpenedAtThisLevel = new Subject();\n    this._ariaHiddenElements = new Map();\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n\n    this.afterAllClosed = defer(function () {\n      return _this5.openDialogs.length ? _this5._getAfterAllClosed() : _this5._getAfterAllClosed().pipe(startWith(undefined));\n    });\n    this._scrollStrategy = scrollStrategy;\n  }\n  /** Keeps track of the currently-open dialogs. */\n\n\n  _createClass(Dialog, [{\n    key: \"openDialogs\",\n    get: function get() {\n      return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n\n  }, {\n    key: \"afterOpened\",\n    get: function get() {\n      return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n  }, {\n    key: \"open\",\n    value: function open(componentOrTemplateRef, config) {\n      var _this6 = this;\n\n      var defaults = this._defaultOptions || new DialogConfig();\n      config = Object.assign(Object.assign({}, defaults), config);\n      config.id = config.id || \"cdk-dialog-\".concat(uniqueId++);\n\n      if (config.id && this.getDialogById(config.id) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(\"Dialog with id \\\"\".concat(config.id, \"\\\" exists already. The dialog id must be unique.\"));\n      }\n\n      var overlayConfig = this._getOverlayConfig(config);\n\n      var overlayRef = this._overlay.create(overlayConfig);\n\n      var dialogRef = new DialogRef(overlayRef, config);\n\n      var dialogContainer = this._attachContainer(overlayRef, dialogRef, config);\n\n      dialogRef.containerInstance = dialogContainer;\n\n      this._attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config); // If this is the first dialog that we're opening, hide all the non-overlay content.\n\n\n      if (!this.openDialogs.length) {\n        this._hideNonDialogContentFromAssistiveTechnology();\n      }\n\n      this.openDialogs.push(dialogRef);\n      dialogRef.closed.subscribe(function () {\n        return _this6._removeOpenDialog(dialogRef, true);\n      });\n      this.afterOpened.next(dialogRef);\n      return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n\n  }, {\n    key: \"closeAll\",\n    value: function closeAll() {\n      reverseForEach(this.openDialogs, function (dialog) {\n        return dialog.close();\n      });\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n\n  }, {\n    key: \"getDialogById\",\n    value: function getDialogById(id) {\n      return this.openDialogs.find(function (dialog) {\n        return dialog.id === id;\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this7 = this;\n\n      // Make one pass over all the dialogs that need to be untracked, but should not be closed. We\n      // want to stop tracking the open dialog even if it hasn't been closed, because the tracking\n      // determines when `aria-hidden` is removed from elements outside the dialog.\n      reverseForEach(this._openDialogsAtThisLevel, function (dialog) {\n        // Check for `false` specifically since we want `undefined` to be interpreted as `true`.\n        if (dialog.config.closeOnDestroy === false) {\n          _this7._removeOpenDialog(dialog, false);\n        }\n      }); // Make a second pass and close the remaining dialogs. We do this second pass in order to\n      // correctly dispatch the `afterAllClosed` event in case we have a mixed array of dialogs\n      // that should be closed and dialogs that should not.\n\n      reverseForEach(this._openDialogsAtThisLevel, function (dialog) {\n        return dialog.close();\n      });\n\n      this._afterAllClosedAtThisLevel.complete();\n\n      this._afterOpenedAtThisLevel.complete();\n\n      this._openDialogsAtThisLevel = [];\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param config The dialog configuration.\n     * @returns The overlay configuration.\n     */\n\n  }, {\n    key: \"_getOverlayConfig\",\n    value: function _getOverlayConfig(config) {\n      var state = new OverlayConfig({\n        positionStrategy: config.positionStrategy || this._overlay.position().global().centerHorizontally().centerVertically(),\n        scrollStrategy: config.scrollStrategy || this._scrollStrategy(),\n        panelClass: config.panelClass,\n        hasBackdrop: config.hasBackdrop,\n        direction: config.direction,\n        minWidth: config.minWidth,\n        minHeight: config.minHeight,\n        maxWidth: config.maxWidth,\n        maxHeight: config.maxHeight,\n        width: config.width,\n        height: config.height,\n        disposeOnNavigation: config.closeOnNavigation\n      });\n\n      if (config.backdropClass) {\n        state.backdropClass = config.backdropClass;\n      }\n\n      return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n\n  }, {\n    key: \"_attachContainer\",\n    value: function _attachContainer(overlay, dialogRef, config) {\n      var _a;\n\n      var userInjector = config.injector || ((_a = config.viewContainerRef) === null || _a === void 0 ? void 0 : _a.injector);\n      var providers = [{\n        provide: DialogConfig,\n        useValue: config\n      }, {\n        provide: DialogRef,\n        useValue: dialogRef\n      }, {\n        provide: OverlayRef,\n        useValue: overlay\n      }];\n      var containerType;\n\n      if (config.container) {\n        if (typeof config.container === 'function') {\n          containerType = config.container;\n        } else {\n          containerType = config.container.type;\n          providers.push.apply(providers, _toConsumableArray(config.container.providers(config)));\n        }\n      } else {\n        containerType = CdkDialogContainer;\n      }\n\n      var containerPortal = new ComponentPortal(containerType, config.viewContainerRef, Injector.create({\n        parent: userInjector || this._injector,\n        providers: providers\n      }), config.componentFactoryResolver);\n      var containerRef = overlay.attach(containerPortal);\n      return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param config Configuration used to open the dialog.\n     */\n\n  }, {\n    key: \"_attachDialogContent\",\n    value: function _attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config) {\n      if (componentOrTemplateRef instanceof TemplateRef) {\n        var injector = this._createInjector(config, dialogRef, dialogContainer, undefined);\n\n        var context = {\n          $implicit: config.data,\n          dialogRef: dialogRef\n        };\n\n        if (config.templateContext) {\n          context = Object.assign(Object.assign({}, context), typeof config.templateContext === 'function' ? config.templateContext() : config.templateContext);\n        }\n\n        dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, context, injector));\n      } else {\n        var _injector2 = this._createInjector(config, dialogRef, dialogContainer, this._injector);\n\n        var contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, _injector2, config.componentFactoryResolver));\n        dialogRef.componentInstance = contentRef.instance;\n      }\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param fallbackInjector Injector to use as a fallback when a lookup fails in the custom\n     * dialog injector, if the user didn't provide a custom one.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n\n  }, {\n    key: \"_createInjector\",\n    value: function _createInjector(config, dialogRef, dialogContainer, fallbackInjector) {\n      var _a;\n\n      var userInjector = config.injector || ((_a = config.viewContainerRef) === null || _a === void 0 ? void 0 : _a.injector);\n      var providers = [{\n        provide: DIALOG_DATA,\n        useValue: config.data\n      }, {\n        provide: DialogRef,\n        useValue: dialogRef\n      }];\n\n      if (config.providers) {\n        if (typeof config.providers === 'function') {\n          providers.push.apply(providers, _toConsumableArray(config.providers(dialogRef, config, dialogContainer)));\n        } else {\n          providers.push.apply(providers, _toConsumableArray(config.providers));\n        }\n      }\n\n      if (config.direction && (!userInjector || !userInjector.get(Directionality, null, InjectFlags.Optional))) {\n        providers.push({\n          provide: Directionality,\n          useValue: {\n            value: config.direction,\n            change: of()\n          }\n        });\n      }\n\n      return Injector.create({\n        parent: userInjector || fallbackInjector,\n        providers: providers\n      });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     * @param emitEvent Whether to emit an event if this is the last dialog.\n     */\n\n  }, {\n    key: \"_removeOpenDialog\",\n    value: function _removeOpenDialog(dialogRef, emitEvent) {\n      var index = this.openDialogs.indexOf(dialogRef);\n\n      if (index > -1) {\n        this.openDialogs.splice(index, 1); // If all the dialogs were closed, remove/restore the `aria-hidden`\n        // to a the siblings and emit to the `afterAllClosed` stream.\n\n        if (!this.openDialogs.length) {\n          this._ariaHiddenElements.forEach(function (previousValue, element) {\n            if (previousValue) {\n              element.setAttribute('aria-hidden', previousValue);\n            } else {\n              element.removeAttribute('aria-hidden');\n            }\n          });\n\n          this._ariaHiddenElements.clear();\n\n          if (emitEvent) {\n            this._getAfterAllClosed().next();\n          }\n        }\n      }\n    }\n    /** Hides all of the content that isn't an overlay from assistive technology. */\n\n  }, {\n    key: \"_hideNonDialogContentFromAssistiveTechnology\",\n    value: function _hideNonDialogContentFromAssistiveTechnology() {\n      var overlayContainer = this._overlayContainer.getContainerElement(); // Ensure that the overlay container is attached to the DOM.\n\n\n      if (overlayContainer.parentElement) {\n        var siblings = overlayContainer.parentElement.children;\n\n        for (var i = siblings.length - 1; i > -1; i--) {\n          var sibling = siblings[i];\n\n          if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n            this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n\n            sibling.setAttribute('aria-hidden', 'true');\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_getAfterAllClosed\",\n    value: function _getAfterAllClosed() {\n      var parent = this._parentDialog;\n      return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n  }]);\n\n  return Dialog;\n}();\n\nDialog.ɵfac = function Dialog_Factory(t) {\n  return new (t || Dialog)(i0.ɵɵinject(i1$1.Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(DEFAULT_DIALOG_CONFIG, 8), i0.ɵɵinject(Dialog, 12), i0.ɵɵinject(i1$1.OverlayContainer), i0.ɵɵinject(DIALOG_SCROLL_STRATEGY));\n};\n\nDialog.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: Dialog,\n  factory: Dialog.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Dialog, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i0.Injector\n    }, {\n      type: DialogConfig,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DEFAULT_DIALOG_CONFIG]\n      }]\n    }, {\n      type: Dialog,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: i1$1.OverlayContainer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DIALOG_SCROLL_STRATEGY]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Executes a callback against all elements in an array while iterating in reverse.\n * Useful if the array is being modified as it is being iterated.\n */\n\n\nfunction reverseForEach(items, callback) {\n  var i = items.length;\n\n  while (i--) {\n    callback(items[i]);\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar DialogModule = /*#__PURE__*/_createClass(function DialogModule() {\n  _classCallCheck(this, DialogModule);\n});\n\nDialogModule.ɵfac = function DialogModule_Factory(t) {\n  return new (t || DialogModule)();\n};\n\nDialogModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: DialogModule\n});\nDialogModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [Dialog, DIALOG_SCROLL_STRATEGY_PROVIDER],\n  imports: [OverlayModule, PortalModule, A11yModule, // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n  // don't have to remember to import it or be faced with an unhelpful error.\n  PortalModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DialogModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, PortalModule, A11yModule],\n      exports: [// Re-export the PortalModule so that people extending the `CdkDialogContainer`\n      // don't have to remember to import it or be faced with an unhelpful error.\n      PortalModule, CdkDialogContainer],\n      declarations: [CdkDialogContainer],\n      providers: [Dialog, DIALOG_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CdkDialogContainer, DEFAULT_DIALOG_CONFIG, DIALOG_DATA, DIALOG_SCROLL_STRATEGY, DIALOG_SCROLL_STRATEGY_PROVIDER, DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, Dialog, DialogConfig, DialogModule, DialogRef, throwDialogContentAlreadyAttachedError };","map":{"version":3,"names":["_getFocusedElementPierceShadowDom","i3","BasePortalOutlet","CdkPortalOutlet","ComponentPortal","TemplatePortal","PortalModule","DOCUMENT","i0","Component","ViewEncapsulation","ChangeDetectionStrategy","Optional","Inject","ViewChild","InjectionToken","Injector","TemplateRef","InjectFlags","Injectable","SkipSelf","NgModule","i1","A11yModule","i1$1","Overlay","OverlayConfig","OverlayRef","OverlayModule","ESCAPE","hasModifierKey","Subject","defer","of","Directionality","startWith","DialogConfig","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","ariaModal","autoFocus","restoreFocus","closeOnNavigation","closeOnDestroy","throwDialogContentAlreadyAttachedError","Error","CdkDialogContainer","_elementRef","_focusTrapFactory","_document","_config","_interactivityChecker","_ngZone","_overlayRef","_focusMonitor","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","attachDomPortal","portal","_portalOutlet","hasAttached","ngDevMode","result","_contentAttached","_ariaLabelledBy","_initializeFocusTrap","_handleBackdropClicks","_captureInitialFocus","_trapFocus","_restoreFocus","attachComponentPortal","attachTemplatePortal","_containsFocus","element","options","isFocusable","tabIndex","runOutsideAngular","callback","removeEventListener","removeAttribute","addEventListener","focus","selector","elementToFocus","nativeElement","querySelector","_forceFocus","_focusTrap","focusInitialElementWhenReady","then","focusedSuccessfully","_focusDialogContainer","_focusByCssSelector","focusConfig","focusTargetElement","activeElement","body","contains","focusVia","destroy","create","backdropClick","subscribe","_recaptureFocus","ɵfac","ElementRef","FocusTrapFactory","InteractivityChecker","NgZone","FocusMonitor","ɵcmp","type","args","encapsulation","None","changeDetection","Default","host","template","styles","undefined","decorators","static","DialogRef","overlayRef","config","closed","keydownEvents","outsidePointerEvents","id","event","keyCode","preventDefault","close","focusOrigin","containerInstance","closedSubject","dispose","next","complete","componentInstance","updatePosition","updateSize","classes","addPanelClass","removePanelClass","DIALOG_SCROLL_STRATEGY","DIALOG_DATA","DEFAULT_DIALOG_CONFIG","DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","block","DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","uniqueId","Dialog","_overlay","_injector","_defaultOptions","_parentDialog","_overlayContainer","scrollStrategy","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","openDialogs","length","_getAfterAllClosed","pipe","_scrollStrategy","afterOpened","componentOrTemplateRef","defaults","Object","assign","getDialogById","overlayConfig","_getOverlayConfig","dialogRef","dialogContainer","_attachContainer","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","_removeOpenDialog","reverseForEach","dialog","find","state","positionStrategy","position","global","centerHorizontally","centerVertically","direction","minWidth","minHeight","maxWidth","maxHeight","disposeOnNavigation","_a","userInjector","injector","viewContainerRef","providers","useValue","containerType","container","containerPortal","parent","componentFactoryResolver","containerRef","attach","instance","_createInjector","context","$implicit","templateContext","contentRef","fallbackInjector","get","value","change","emitEvent","index","indexOf","splice","forEach","previousValue","setAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","set","getAttribute","OverlayContainer","ɵprov","items","DialogModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["C:/Users/MSI/Desktop/pfe/yas/angular/node_modules/@angular/cdk/fesm2015/dialog.mjs"],"sourcesContent":["import { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, ViewChild, InjectionToken, Injector, TemplateRef, InjectFlags, Injectable, SkipSelf, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayRef, OverlayModule } from '@angular/cdk/overlay';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { startWith } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Configuration for opening a modal dialog. */\nclass DialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Optional CSS class or classes applied to the overlay panel. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Optional CSS class or classes applied to the overlay backdrop. */\n        this.backdropClass = '';\n        /** Whether the dialog closes with the escape key or pointer events outside the panel element. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Dialog label applied via `aria-label` */\n        this.ariaLabel = null;\n        /** Whether this a modal dialog. Used to set the `aria-modal` attribute. */\n        this.ariaModal = true;\n        /**\n         * Where the dialog should focus on open.\n         * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n         * AutoFocusTarget instead.\n         */\n        this.autoFocus = 'first-tabbable';\n        /**\n         * Whether the dialog should restore focus to the previously-focused element upon closing.\n         * Has the following behavior based on the type that is passed in:\n         * - `boolean` - when true, will return focus to the element that was focused before the dialog\n         *    was opened, otherwise won't restore focus at all.\n         * - `string` - focus will be restored to the first element that matches the CSS selector.\n         * - `HTMLElement` - focus will be restored to the specific element.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user navigates backwards or forwards through browser\n         * history. This does not apply to navigation via anchor element unless using URL-hash based\n         * routing (`HashLocationStrategy` in the Angular router).\n         */\n        this.closeOnNavigation = true;\n        /**\n         * Whether the dialog should close when the dialog service is destroyed. This is useful if\n         * another service is wrapping the dialog and is managing the destruction instead.\n         */\n        this.closeOnDestroy = true;\n    }\n}\n\nfunction throwDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\nclass CdkDialogContainer extends BasePortalOutlet {\n    constructor(_elementRef, _focusTrapFactory, _document, _config, _interactivityChecker, _ngZone, _overlayRef, _focusMonitor) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._config = _config;\n        this._interactivityChecker = _interactivityChecker;\n        this._ngZone = _ngZone;\n        this._overlayRef = _overlayRef;\n        this._focusMonitor = _focusMonitor;\n        /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * Type of interaction that led to the dialog being closed. This is used to determine\n         * whether the focus style will be applied when returning focus to its original location\n         * after the dialog is closed.\n         */\n        this._closeInteractionType = null;\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwDialogContentAlreadyAttachedError();\n            }\n            const result = this._portalOutlet.attachDomPortal(portal);\n            this._contentAttached();\n            return result;\n        };\n        this._ariaLabelledBy = this._config.ariaLabelledBy || null;\n        this._document = _document;\n    }\n    _contentAttached() {\n        this._initializeFocusTrap();\n        this._handleBackdropClicks();\n        this._captureInitialFocus();\n    }\n    /**\n     * Can be used by child classes to customize the initial focus\n     * capturing behavior (e.g. if it's tied to an animation).\n     */\n    _captureInitialFocus() {\n        this._trapFocus();\n    }\n    ngOnDestroy() {\n        this._restoreFocus();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    // TODO(crisbeto): this shouldn't be exposed, but there are internal references to it.\n    /** Captures focus if it isn't already inside the dialog. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    element.removeEventListener('blur', callback);\n                    element.removeEventListener('mousedown', callback);\n                    element.removeAttribute('tabindex');\n                };\n                element.addEventListener('blur', callback);\n                element.addEventListener('mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n     * cannot be moved then focus will go to the dialog container.\n     */\n    _trapFocus() {\n        const element = this._elementRef.nativeElement;\n        // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty when setting focus when autoFocus isn't set to\n        // dialog. If the element inside the dialog can't be focused, then the container is focused\n        // so the user can't tab into other elements behind it.\n        switch (this._config.autoFocus) {\n            case false:\n            case 'dialog':\n                // Ensure that focus is on the dialog container. It's possible that a different\n                // component tried to move focus while the open animation was running. See:\n                // https://github.com/angular/components/issues/16215. Note that we only want to do this\n                // if the focus isn't inside the dialog already, because it's possible that the consumer\n                // turned off `autoFocus` in order to move focus themselves.\n                if (!this._containsFocus()) {\n                    element.focus();\n                }\n                break;\n            case true:\n            case 'first-tabbable':\n                this._focusTrap.focusInitialElementWhenReady().then(focusedSuccessfully => {\n                    // If we weren't able to find a focusable element in the dialog, then focus the dialog\n                    // container instead.\n                    if (!focusedSuccessfully) {\n                        this._focusDialogContainer();\n                    }\n                });\n                break;\n            case 'first-heading':\n                this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                break;\n            default:\n                this._focusByCssSelector(this._config.autoFocus);\n                break;\n        }\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const focusConfig = this._config.restoreFocus;\n        let focusTargetElement = null;\n        if (typeof focusConfig === 'string') {\n            focusTargetElement = this._document.querySelector(focusConfig);\n        }\n        else if (typeof focusConfig === 'boolean') {\n            focusTargetElement = focusConfig ? this._elementFocusedBeforeDialogWasOpened : null;\n        }\n        else if (focusConfig) {\n            focusTargetElement = focusConfig;\n        }\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus &&\n            focusTargetElement &&\n            typeof focusTargetElement.focus === 'function') {\n            const activeElement = _getFocusedElementPierceShadowDom();\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement ||\n                activeElement === this._document.body ||\n                activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(focusTargetElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    focusTargetElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer() {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = _getFocusedElementPierceShadowDom();\n        return element === activeElement || element.contains(activeElement);\n    }\n    /** Sets up the focus trap. */\n    _initializeFocusTrap() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        // Save the previously focused element. This element will be re-focused\n        // when the dialog closes.\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n        }\n    }\n    /** Sets up the listener that handles clicks on the dialog backdrop. */\n    _handleBackdropClicks() {\n        // Clicking on the backdrop will move focus out of dialog.\n        // Recapture it if closing via the backdrop is disabled.\n        this._overlayRef.backdropClick().subscribe(() => {\n            if (this._config.disableClose) {\n                this._recaptureFocus();\n            }\n        });\n    }\n}\nCdkDialogContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkDialogContainer, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: DialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });\nCdkDialogContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: CdkDialogContainer, selector: \"cdk-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, properties: { \"attr.id\": \"_config.id || null\", \"attr.role\": \"_config.role\", \"attr.aria-modal\": \"_config.ariaModal\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledBy\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\" }, classAttribute: \"cdk-dialog-container\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"], dependencies: [{ kind: \"directive\", type: i3.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: CdkDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, host: {\n                        'class': 'cdk-dialog-container',\n                        'tabindex': '-1',\n                        '[attr.id]': '_config.id || null',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    }, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DialogConfig]\n                    }] }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: i1.FocusMonitor }];\n    }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to a dialog opened via the Dialog service.\n */\nclass DialogRef {\n    constructor(overlayRef, config) {\n        this.overlayRef = overlayRef;\n        this.config = config;\n        /** Emits when the dialog has been closed. */\n        this.closed = new Subject();\n        this.disableClose = config.disableClose;\n        this.backdropClick = overlayRef.backdropClick();\n        this.keydownEvents = overlayRef.keydownEvents();\n        this.outsidePointerEvents = overlayRef.outsidePointerEvents();\n        this.id = config.id; // By the time the dialog is created we are guaranteed to have an ID.\n        this.keydownEvents.subscribe(event => {\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this.close(undefined, { focusOrigin: 'keyboard' });\n            }\n        });\n        this.backdropClick.subscribe(() => {\n            if (!this.disableClose) {\n                this.close(undefined, { focusOrigin: 'mouse' });\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param result Optional result to return to the dialog opener.\n     * @param options Additional options to customize the closing behavior.\n     */\n    close(result, options) {\n        if (this.containerInstance) {\n            const closedSubject = this.closed;\n            this.containerInstance._closeInteractionType = (options === null || options === void 0 ? void 0 : options.focusOrigin) || 'program';\n            this.overlayRef.dispose();\n            closedSubject.next(result);\n            closedSubject.complete();\n            this.componentInstance = this.containerInstance = null;\n        }\n    }\n    /** Updates the position of the dialog based on the current position strategy. */\n    updatePosition() {\n        this.overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this.overlayRef.updateSize({ width, height });\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this.overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this.overlayRef.removePanelClass(classes);\n        return this;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token for the Dialog's ScrollStrategy. */\nconst DIALOG_SCROLL_STRATEGY = new InjectionToken('DialogScrollStrategy');\n/** Injection token for the Dialog's Data. */\nconst DIALOG_DATA = new InjectionToken('DialogData');\n/** Injection token that can be used to provide default options for the dialog module. */\nconst DEFAULT_DIALOG_CONFIG = new InjectionToken('DefaultDialogConfig');\n/** @docs-private */\nfunction DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nconst DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Unique id for the created dialog. */\nlet uniqueId = 0;\nclass Dialog {\n    constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length\n            ? this._getAfterAllClosed()\n            : this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    open(componentOrTemplateRef, config) {\n        const defaults = (this._defaultOptions || new DialogConfig());\n        config = Object.assign(Object.assign({}, defaults), config);\n        config.id = config.id || `cdk-dialog-${uniqueId++}`;\n        if (config.id &&\n            this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayConfig = this._getOverlayConfig(config);\n        const overlayRef = this._overlay.create(overlayConfig);\n        const dialogRef = new DialogRef(overlayRef, config);\n        const dialogContainer = this._attachContainer(overlayRef, dialogRef, config);\n        dialogRef.containerInstance = dialogContainer;\n        this._attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.closed.subscribe(() => this._removeOpenDialog(dialogRef, true));\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        reverseForEach(this.openDialogs, dialog => dialog.close());\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Make one pass over all the dialogs that need to be untracked, but should not be closed. We\n        // want to stop tracking the open dialog even if it hasn't been closed, because the tracking\n        // determines when `aria-hidden` is removed from elements outside the dialog.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => {\n            // Check for `false` specifically since we want `undefined` to be interpreted as `true`.\n            if (dialog.config.closeOnDestroy === false) {\n                this._removeOpenDialog(dialog, false);\n            }\n        });\n        // Make a second pass and close the remaining dialogs. We do this second pass in order to\n        // correctly dispatch the `afterAllClosed` event in case we have a mixed array of dialogs\n        // that should be closed and dialogs that should not.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => dialog.close());\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n        this._openDialogsAtThisLevel = [];\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param config The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(config) {\n        const state = new OverlayConfig({\n            positionStrategy: config.positionStrategy ||\n                this._overlay.position().global().centerHorizontally().centerVertically(),\n            scrollStrategy: config.scrollStrategy || this._scrollStrategy(),\n            panelClass: config.panelClass,\n            hasBackdrop: config.hasBackdrop,\n            direction: config.direction,\n            minWidth: config.minWidth,\n            minHeight: config.minHeight,\n            maxWidth: config.maxWidth,\n            maxHeight: config.maxHeight,\n            width: config.width,\n            height: config.height,\n            disposeOnNavigation: config.closeOnNavigation,\n        });\n        if (config.backdropClass) {\n            state.backdropClass = config.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachContainer(overlay, dialogRef, config) {\n        var _a;\n        const userInjector = config.injector || ((_a = config.viewContainerRef) === null || _a === void 0 ? void 0 : _a.injector);\n        const providers = [\n            { provide: DialogConfig, useValue: config },\n            { provide: DialogRef, useValue: dialogRef },\n            { provide: OverlayRef, useValue: overlay },\n        ];\n        let containerType;\n        if (config.container) {\n            if (typeof config.container === 'function') {\n                containerType = config.container;\n            }\n            else {\n                containerType = config.container.type;\n                providers.push(...config.container.providers(config));\n            }\n        }\n        else {\n            containerType = CdkDialogContainer;\n        }\n        const containerPortal = new ComponentPortal(containerType, config.viewContainerRef, Injector.create({ parent: userInjector || this._injector, providers }), config.componentFactoryResolver);\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param config Configuration used to open the dialog.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config) {\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            const injector = this._createInjector(config, dialogRef, dialogContainer, undefined);\n            let context = { $implicit: config.data, dialogRef };\n            if (config.templateContext) {\n                context = Object.assign(Object.assign({}, context), (typeof config.templateContext === 'function'\n                    ? config.templateContext()\n                    : config.templateContext));\n            }\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, context, injector));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer, this._injector);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector, config.componentFactoryResolver));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param fallbackInjector Injector to use as a fallback when a lookup fails in the custom\n     * dialog injector, if the user didn't provide a custom one.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer, fallbackInjector) {\n        var _a;\n        const userInjector = config.injector || ((_a = config.viewContainerRef) === null || _a === void 0 ? void 0 : _a.injector);\n        const providers = [\n            { provide: DIALOG_DATA, useValue: config.data },\n            { provide: DialogRef, useValue: dialogRef },\n        ];\n        if (config.providers) {\n            if (typeof config.providers === 'function') {\n                providers.push(...config.providers(dialogRef, config, dialogContainer));\n            }\n            else {\n                providers.push(...config.providers);\n            }\n        }\n        if (config.direction &&\n            (!userInjector ||\n                !userInjector.get(Directionality, null, InjectFlags.Optional))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() },\n            });\n        }\n        return Injector.create({ parent: userInjector || fallbackInjector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     * @param emitEvent Whether to emit an event if this is the last dialog.\n     */\n    _removeOpenDialog(dialogRef, emitEvent) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                if (emitEvent) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        }\n    }\n    /** Hides all of the content that isn't an overlay from assistive technology. */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                const sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n}\nDialog.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: Dialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: DEFAULT_DIALOG_CONFIG, optional: true }, { token: Dialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: DIALOG_SCROLL_STRATEGY }], target: i0.ɵɵFactoryTarget.Injectable });\nDialog.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: Dialog });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: Dialog, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: DialogConfig, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DEFAULT_DIALOG_CONFIG]\n                    }] }, { type: Dialog, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DIALOG_SCROLL_STRATEGY]\n                    }] }];\n    } });\n/**\n * Executes a callback against all elements in an array while iterating in reverse.\n * Useful if the array is being modified as it is being iterated.\n */\nfunction reverseForEach(items, callback) {\n    let i = items.length;\n    while (i--) {\n        callback(items[i]);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DialogModule {\n}\nDialogModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: DialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nDialogModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: DialogModule, declarations: [CdkDialogContainer], imports: [OverlayModule, PortalModule, A11yModule], exports: [\n        // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n        // don't have to remember to import it or be faced with an unhelpful error.\n        PortalModule,\n        CdkDialogContainer\n    ] });\nDialogModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: DialogModule, providers: [Dialog, DIALOG_SCROLL_STRATEGY_PROVIDER], imports: [OverlayModule, PortalModule, A11yModule,\n        // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n        // don't have to remember to import it or be faced with an unhelpful error.\n        PortalModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: DialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, A11yModule],\n                    exports: [\n                        // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n                        // don't have to remember to import it or be faced with an unhelpful error.\n                        PortalModule,\n                        CdkDialogContainer,\n                    ],\n                    declarations: [CdkDialogContainer],\n                    providers: [Dialog, DIALOG_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkDialogContainer, DEFAULT_DIALOG_CONFIG, DIALOG_DATA, DIALOG_SCROLL_STRATEGY, DIALOG_SCROLL_STRATEGY_PROVIDER, DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, Dialog, DialogConfig, DialogModule, DialogRef, throwDialogContentAlreadyAttachedError };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}